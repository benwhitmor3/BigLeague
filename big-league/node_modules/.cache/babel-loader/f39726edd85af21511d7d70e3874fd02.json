{"ast":null,"code":"import{FranchiseTypeModelBase}from\"./FranchiseTypeModel.base\";/* A graphql query fragment builders for FranchiseTypeModel */export{selectFromFranchiseType,franchiseTypeModelPrimitives,FranchiseTypeModelSelector}from\"./FranchiseTypeModel.base\";/**\n * FranchiseTypeModel\n */export var FranchiseTypeModel=FranchiseTypeModelBase.actions(function(self){return{// This is an auto-generated example action.\nlog:function log(){console.log(JSON.stringify(self));}};}).views(function(self){return{get suitBonus(){var suitList=self.playerSet.map(function(player,index){if(player.lineup===\"starter\")return player.suit;});var spades=suitList.filter(function(x){return x===\"spade\";}).length;var hearts=suitList.filter(function(x){return x===\"heart\";}).length;var diamonds=suitList.filter(function(x){return x===\"diamond\";}).length;var clubs=suitList.filter(function(x){return x===\"club\";}).length;var suitBonus=0;// spade adjustment\nif(spades<=1){suitBonus+=0;}else{suitBonus-=spades*(spades-1);}// heart adjustment\nsuitBonus+=hearts*(5-hearts);// diamond adjustment\nif(diamonds>0){suitBonus+=2-(diamonds-1);}// club adjustment\nsuitBonus+=spades*clubs;return suitBonus;},get epv(){var epv=self.playerSet.map(function(player){if(player.lineup===\"starter\")return player.epv;});return epv.reduce(function(accumulator,currentValue){return(accumulator||0)+(currentValue||0);},0);},get sEpv(){var sEpv=self.playerSet.map(function(player){if(player.lineup===\"starter\")return player.sEpv;});return sEpv.reduce(function(accumulator,currentValue){return(accumulator||0)+(currentValue||0);},0);},get meanAge(){var ages=self.playerSet.map(function(player){return player.age;});var meanAge=ages.reduce(function(accumulator,currentValue){return(accumulator||0)+(currentValue||0);},0)/ages.length;return meanAge;},get salaries(){var salaries=self.playerSet.map(function(player){return player.salary;});return salaries.reduce(function(accumulator,currentValue){return(accumulator||0)+(currentValue||0);},0);},get championships(){return self.seasonSet.length===1?self.seasonSet[self.seasonSet.length-1].championships:self.seasonSet[self.seasonSet.length-2].championships;},get wins(){return self.seasonSet.length===1?self.seasonSet[self.seasonSet.length-1].wins:self.seasonSet[self.seasonSet.length-2].wins;},get lineup(){var lineup=self.playerSet.map(function(player){return player.lineup;});return lineup;},get contracts(){var contracts=self.playerSet.map(function(player){return player.contract;});return contracts;},get starters(){var starters=self.playerSet.filter(function(player){if(player.lineup===\"starter\")return player;});return starters;},get unsignedPlayers(){var unsignedPlayers=self.playerSet.filter(function(player){if(player.contract===null)return player;});return unsignedPlayers;},get unsetPlayers(){var unsetPlayers=self.playerSet.filter(function(player){if(player.lineup===null)return player;});return unsetPlayers;},get profit(){var revenue=self.seasonSet.map(function(season){return season.revenue;}).reduce(function(a,b){return a+b;});var expenses=self.seasonSet.map(function(season){return season.expenses;}).reduce(function(a,b){return a+b;});// @ts-ignore\nvar profit=revenue-expenses;return profit;}};});","map":{"version":3,"names":["FranchiseTypeModelBase","selectFromFranchiseType","franchiseTypeModelPrimitives","FranchiseTypeModelSelector","FranchiseTypeModel","actions","self","log","console","JSON","stringify","views","suitBonus","suitList","playerSet","map","player","index","lineup","suit","spades","filter","x","length","hearts","diamonds","clubs","epv","reduce","accumulator","currentValue","sEpv","meanAge","ages","age","salaries","salary","championships","seasonSet","wins","contracts","contract","starters","unsignedPlayers","unsetPlayers","profit","revenue","season","a","b","expenses"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/FranchiseTypeModel.ts"],"sourcesContent":["import {Instance} from \"mobx-state-tree\"\nimport {FranchiseTypeModelBase} from \"./FranchiseTypeModel.base\"\nimport {SeasonTypeModelType} from \"./SeasonTypeModel\";\n\n/* The TypeScript type of an instance of FranchiseTypeModel */\nexport interface FranchiseTypeModelType extends Instance<typeof FranchiseTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport {\n    selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector\n}from \"./FranchiseTypeModel.base\"\n\n/**\n * FranchiseTypeModel\n */\nexport const FranchiseTypeModel = FranchiseTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        }\n    }))\n    .views(self => ({\n        get suitBonus() {\n            let suitList = self.playerSet.map(function (player, index) {\n                if (player.lineup === \"starter\")\n                    return player.suit;\n            });\n            let spades = suitList.filter(x => x === \"spade\").length\n            let hearts = suitList.filter(x => x === \"heart\").length\n            let diamonds = suitList.filter(x => x === \"diamond\").length\n            let clubs = suitList.filter(x => x === \"club\").length\n\n            let suitBonus = 0\n\n            // spade adjustment\n            if (spades <= 1) {\n                suitBonus += 0\n            } else {\n                suitBonus -= spades * (spades - 1)\n            }\n            // heart adjustment\n            suitBonus += hearts * (5 - hearts)\n            // diamond adjustment\n            if (diamonds > 0) {\n                suitBonus += 2 - (diamonds - 1)\n            }\n            // club adjustment\n            suitBonus += (spades * clubs)\n\n            return suitBonus\n        },\n        get epv() {\n            let epv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.epv;\n            });\n\n            return epv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get sEpv() {\n            let sEpv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.sEpv;\n            });\n\n            return sEpv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get meanAge() {\n            let ages: any = self.playerSet.map((player) => {\n                return player.age;\n            });\n\n            let meanAge = ages.reduce((accumulator: any, currentValue: any) => ((accumulator || 0) + (currentValue || 0)), 0) / (ages.length)\n\n            return meanAge\n        },\n        get salaries() {\n            let salaries = self.playerSet.map((player) => {\n                return player.salary;\n            });\n\n            return salaries.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get championships() {\n\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].championships\n                : self.seasonSet[self.seasonSet.length - 2].championships\n        },\n        get wins() {\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].wins\n                : self.seasonSet[self.seasonSet.length - 2].wins\n        },\n        get lineup() {\n            let lineup = self.playerSet.map((player) => {\n                return player.lineup;\n            });\n            return lineup\n        },\n        get contracts() {\n            let contracts = self.playerSet.map((player) => {\n                return player.contract\n            });\n            return contracts\n        },\n        get starters() {\n            let starters = self.playerSet.filter((player) => {\n                if (player.lineup === \"starter\")\n                    return player;\n            });\n            return starters\n        },\n        get unsignedPlayers() {\n            let unsignedPlayers = self.playerSet.filter((player) => {\n                if (player.contract === null)\n                    return player;\n            });\n            return unsignedPlayers\n        },\n        get unsetPlayers() {\n            let unsetPlayers = self.playerSet.filter((player) => {\n                if (player.lineup === null)\n                    return player;\n            });\n            return unsetPlayers\n        },\n        get profit() {\n            let revenue = self.seasonSet.map((season: SeasonTypeModelType) => season.revenue).reduce((a: any, b: any) => a + b)\n            let expenses = self.seasonSet.map((season: SeasonTypeModelType) => season.expenses).reduce((a: any, b: any) => a + b)\n            // @ts-ignore\n            let profit = revenue - expenses\n            return profit\n        },\n    }))\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}