{"ast":null,"code":"/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { CityTypeModel } from \"./CityTypeModel\";\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\";\nimport { CoachTypeModel } from \"./CoachTypeModel\";\nimport { CoachTypeModelSelector } from \"./CoachTypeModel.base\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\nimport { GmTypeModel } from \"./GmTypeModel\";\nimport { GmTypeModelSelector } from \"./GmTypeModel.base\";\nimport { PlayerHistoryTypeModel } from \"./PlayerHistoryTypeModel\";\nimport { PlayerHistoryTypeModelSelector } from \"./PlayerHistoryTypeModel.base\";\nimport { PlayerTypeModel } from \"./PlayerTypeModel\";\nimport { PlayerTypeModelSelector } from \"./PlayerTypeModel.base\";\nimport { UserTypeModel } from \"./UserTypeModel\";\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\";\n/**\n * LeagueTypeBase\n * auto generated base class for the model LeagueTypeModel.\n */\nexport const LeagueTypeModelBase = withTypedRefs()(ModelBase.named('LeagueType').props({\n  __typename: types.optional(types.literal(\"LeagueType\"), \"LeagueType\"),\n  id: types.identifier,\n  leagueName: types.union(types.undefined, types.string),\n  user: types.union(types.undefined, types.null, MSTGQLRef(types.late(() => UserTypeModel))),\n  franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => FranchiseTypeModel)))),\n  citySet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => CityTypeModel)))),\n  gmSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => GmTypeModel)))),\n  coachSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => CoachTypeModel)))),\n  playerSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => PlayerTypeModel)))),\n  playerhistorySet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => PlayerHistoryTypeModel))))\n}).views(self => ({\n  get store() {\n    return self.__getStore();\n  }\n})));\nexport class LeagueTypeModelSelector extends QueryBuilder {\n  get id() {\n    return this.__attr(`id`);\n  }\n  get leagueName() {\n    return this.__attr(`leagueName`);\n  }\n  user(builder) {\n    return this.__child(`user`, UserTypeModelSelector, builder);\n  }\n  franchiseSet(builder) {\n    return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder);\n  }\n  citySet(builder) {\n    return this.__child(`citySet`, CityTypeModelSelector, builder);\n  }\n  gmSet(builder) {\n    return this.__child(`gmSet`, GmTypeModelSelector, builder);\n  }\n  coachSet(builder) {\n    return this.__child(`coachSet`, CoachTypeModelSelector, builder);\n  }\n  playerSet(builder) {\n    return this.__child(`playerSet`, PlayerTypeModelSelector, builder);\n  }\n  playerhistorySet(builder) {\n    return this.__child(`playerhistorySet`, PlayerHistoryTypeModelSelector, builder);\n  }\n}\nexport function selectFromLeagueType() {\n  return new LeagueTypeModelSelector();\n}\nexport const leagueTypeModelPrimitives = selectFromLeagueType().leagueName;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","CityTypeModel","CityTypeModelSelector","CoachTypeModel","CoachTypeModelSelector","FranchiseTypeModel","FranchiseTypeModelSelector","GmTypeModel","GmTypeModelSelector","PlayerHistoryTypeModel","PlayerHistoryTypeModelSelector","PlayerTypeModel","PlayerTypeModelSelector","UserTypeModel","UserTypeModelSelector","LeagueTypeModelBase","named","props","__typename","optional","literal","id","identifier","leagueName","union","undefined","string","user","null","late","franchiseSet","array","citySet","gmSet","coachSet","playerSet","playerhistorySet","views","self","store","__getStore","LeagueTypeModelSelector","__attr","builder","__child","selectFromLeagueType","leagueTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/LeagueTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { CoachTypeModel, CoachTypeModelType } from \"./CoachTypeModel\"\nimport { CoachTypeModelSelector } from \"./CoachTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { GmTypeModel, GmTypeModelType } from \"./GmTypeModel\"\nimport { GmTypeModelSelector } from \"./GmTypeModel.base\"\nimport { PlayerHistoryTypeModel, PlayerHistoryTypeModelType } from \"./PlayerHistoryTypeModel\"\nimport { PlayerHistoryTypeModelSelector } from \"./PlayerHistoryTypeModel.base\"\nimport { PlayerTypeModel, PlayerTypeModelType } from \"./PlayerTypeModel\"\nimport { PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n  franchiseSet: IObservableArray<FranchiseTypeModelType>;\n  citySet: IObservableArray<CityTypeModelType>;\n  gmSet: IObservableArray<GmTypeModelType>;\n  coachSet: IObservableArray<CoachTypeModelType>;\n  playerSet: IObservableArray<PlayerTypeModelType>;\n  playerhistorySet: IObservableArray<PlayerHistoryTypeModelType>;\n}\n\n/**\n * LeagueTypeBase\n * auto generated base class for the model LeagueTypeModel.\n */\nexport const LeagueTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('LeagueType')\n  .props({\n    __typename: types.optional(types.literal(\"LeagueType\"), \"LeagueType\"),\n    id: types.identifier,\n    leagueName: types.union(types.undefined, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n    franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => FranchiseTypeModel)))),\n    citySet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => CityTypeModel)))),\n    gmSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => GmTypeModel)))),\n    coachSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => CoachTypeModel)))),\n    playerSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => PlayerTypeModel)))),\n    playerhistorySet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => PlayerHistoryTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class LeagueTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get leagueName() { return this.__attr(`leagueName`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n  franchiseSet(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder) }\n  citySet(builder?: string | CityTypeModelSelector | ((selector: CityTypeModelSelector) => CityTypeModelSelector)) { return this.__child(`citySet`, CityTypeModelSelector, builder) }\n  gmSet(builder?: string | GmTypeModelSelector | ((selector: GmTypeModelSelector) => GmTypeModelSelector)) { return this.__child(`gmSet`, GmTypeModelSelector, builder) }\n  coachSet(builder?: string | CoachTypeModelSelector | ((selector: CoachTypeModelSelector) => CoachTypeModelSelector)) { return this.__child(`coachSet`, CoachTypeModelSelector, builder) }\n  playerSet(builder?: string | PlayerTypeModelSelector | ((selector: PlayerTypeModelSelector) => PlayerTypeModelSelector)) { return this.__child(`playerSet`, PlayerTypeModelSelector, builder) }\n  playerhistorySet(builder?: string | PlayerHistoryTypeModelSelector | ((selector: PlayerHistoryTypeModelSelector) => PlayerHistoryTypeModelSelector)) { return this.__child(`playerhistorySet`, PlayerHistoryTypeModelSelector, builder) }\n}\nexport function selectFromLeagueType() {\n  return new LeagueTypeModelSelector()\n}\n\nexport const leagueTypeModelPrimitives = selectFromLeagueType().leagueName\n"],"mappings":"AAAA;AACA;AACA;;AAGA,SAASA,KAAK,QAAQ,iBAAiB;AACvC,SAASC,SAAS,EAAEC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAChE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,aAAa,QAA2B,iBAAiB;AAClE,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,cAAc,QAA4B,kBAAkB;AACrE,SAASC,sBAAsB,QAAQ,uBAAuB;AAC9D,SAASC,kBAAkB,QAAgC,sBAAsB;AACjF,SAASC,0BAA0B,QAAQ,2BAA2B;AACtE,SAASC,WAAW,QAAyB,eAAe;AAC5D,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,sBAAsB,QAAoC,0BAA0B;AAC7F,SAASC,8BAA8B,QAAQ,+BAA+B;AAC9E,SAASC,eAAe,QAA6B,mBAAmB;AACxE,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,aAAa,QAA2B,iBAAiB;AAClE,SAASC,qBAAqB,QAAQ,sBAAsB;AAe5D;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGhB,aAAa,EAAQ,CAACC,SAAS,CAC/DgB,KAAK,CAAC,YAAY,CAAC,CACnBC,KAAK,CAAC;EACLC,UAAU,EAAEtB,KAAK,CAACuB,QAAQ,CAACvB,KAAK,CAACwB,OAAO,CAAC,YAAY,CAAC,EAAE,YAAY,CAAC;EACrEC,EAAE,EAAEzB,KAAK,CAAC0B,UAAU;EACpBC,UAAU,EAAE3B,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAAC8B,MAAM,CAAC;EACtDC,IAAI,EAAE/B,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACgC,IAAI,EAAE/B,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAWhB,aAAa,CAAC,CAAC,CAAC;EAC/FiB,YAAY,EAAElC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAWxB,kBAAkB,CAAC,CAAC,CAAC,CAAC;EAC7G2B,OAAO,EAAEpC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAW5B,aAAa,CAAC,CAAC,CAAC,CAAC;EACnGgC,KAAK,EAAErC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAWtB,WAAW,CAAC,CAAC,CAAC,CAAC;EAC/F2B,QAAQ,EAAEtC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAW1B,cAAc,CAAC,CAAC,CAAC,CAAC;EACrGgC,SAAS,EAAEvC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAWlB,eAAe,CAAC,CAAC,CAAC,CAAC;EACvGyB,gBAAgB,EAAExC,KAAK,CAAC4B,KAAK,CAAC5B,KAAK,CAAC6B,SAAS,EAAE7B,KAAK,CAACmC,KAAK,CAAClC,SAAS,CAACD,KAAK,CAACiC,IAAI,CAAC,MAAWpB,sBAAsB,CAAC,CAAC,CAAC;AACtH,CAAC,CAAC,CACD4B,KAAK,CAACC,IAAI,KAAK;EACd,IAAIC,KAAKA,CAAA,EAAG;IACV,OAAOD,IAAI,CAACE,UAAU,EAAiB;EACzC;AACF,CAAC,CAAC,CAAC,CAAC;AAEN,OAAO,MAAMC,uBAAuB,SAAS3C,YAAY,CAAC;EACxD,IAAIuB,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACqB,MAAM,CAAE,IAAG,CAAC;EAAC;EACpC,IAAInB,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACmB,MAAM,CAAE,YAAW,CAAC;EAAC;EACpDf,IAAIA,CAACgB,OAAuG,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,MAAK,EAAE9B,qBAAqB,EAAE6B,OAAO,CAAC;EAAC;EAC5Kb,YAAYA,CAACa,OAAsH,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,cAAa,EAAEtC,0BAA0B,EAAEqC,OAAO,CAAC;EAAC;EAChNX,OAAOA,CAACW,OAAuG,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,SAAQ,EAAE1C,qBAAqB,EAAEyC,OAAO,CAAC;EAAC;EAClLV,KAAKA,CAACU,OAAiG,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,OAAM,EAAEpC,mBAAmB,EAAEmC,OAAO,CAAC;EAAC;EACtKT,QAAQA,CAACS,OAA0G,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,UAAS,EAAExC,sBAAsB,EAAEuC,OAAO,CAAC;EAAC;EACxLR,SAASA,CAACQ,OAA6G,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,WAAU,EAAEhC,uBAAuB,EAAE+B,OAAO,CAAC;EAAC;EAC9LP,gBAAgBA,CAACO,OAAkI,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,kBAAiB,EAAElC,8BAA8B,EAAEiC,OAAO,CAAC;EAAC;AAC1O;AACA,OAAO,SAASE,oBAAoBA,CAAA,EAAG;EACrC,OAAO,IAAIJ,uBAAuB,EAAE;AACtC;AAEA,OAAO,MAAMK,yBAAyB,GAAGD,oBAAoB,EAAE,CAACtB,UAAU"},"metadata":{},"sourceType":"module"}