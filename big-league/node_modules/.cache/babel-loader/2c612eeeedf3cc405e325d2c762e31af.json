{"ast":null,"code":"/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\nimport { GmTraitEnumType } from \"./GmTraitEnum\";\nimport { LeagueTypeModel } from \"./LeagueTypeModel\";\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\";\n/**\n * GmTypeBase\n * auto generated base class for the model GmTypeModel.\n */\nexport const GmTypeModelBase = withTypedRefs()(ModelBase.named('GmType').props({\n  __typename: types.optional(types.literal(\"GMType\"), \"GMType\"),\n  id: types.identifier,\n  trait: types.union(types.undefined, GmTraitEnumType),\n  league: types.union(types.undefined, MSTGQLRef(types.late(() => LeagueTypeModel))),\n  franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(() => FranchiseTypeModel))))\n}).views(self => ({\n  get store() {\n    return self.__getStore();\n  }\n})));\nexport class GmTypeModelSelector extends QueryBuilder {\n  get id() {\n    return this.__attr(`id`);\n  }\n  get trait() {\n    return this.__attr(`trait`);\n  }\n  league(builder) {\n    return this.__child(`league`, LeagueTypeModelSelector, builder);\n  }\n  franchiseSet(builder) {\n    return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder);\n  }\n}\nexport function selectFromGmType() {\n  return new GmTypeModelSelector();\n}\nexport const gmTypeModelPrimitives = selectFromGmType().trait;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","FranchiseTypeModel","FranchiseTypeModelSelector","GmTraitEnumType","LeagueTypeModel","LeagueTypeModelSelector","GmTypeModelBase","named","props","__typename","optional","literal","id","identifier","trait","union","undefined","league","late","franchiseSet","array","views","self","store","__getStore","GmTypeModelSelector","__attr","builder","__child","selectFromGmType","gmTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/GmTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { GmTraitEnumType } from \"./GmTraitEnum\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n  franchiseSet: IObservableArray<FranchiseTypeModelType>;\n}\n\n/**\n * GmTypeBase\n * auto generated base class for the model GmTypeModel.\n */\nexport const GmTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('GmType')\n  .props({\n    __typename: types.optional(types.literal(\"GMType\"), \"GMType\"),\n    id: types.identifier,\n    trait: types.union(types.undefined, GmTraitEnumType),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => FranchiseTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class GmTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get trait() { return this.__attr(`trait`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  franchiseSet(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromGmType() {\n  return new GmTypeModelSelector()\n}\n\nexport const gmTypeModelPrimitives = selectFromGmType().trait\n"],"mappings":"AAAA;AACA;AACA;;AAGA,SAASA,KAAK,QAAQ,iBAAiB;AACvC,SAASC,SAAS,EAAEC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAChE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,kBAAkB,QAAgC,sBAAsB;AACjF,SAASC,0BAA0B,QAAQ,2BAA2B;AACtE,SAASC,eAAe,QAAQ,eAAe;AAC/C,SAASC,eAAe,QAA6B,mBAAmB;AACxE,SAASC,uBAAuB,QAAQ,wBAAwB;AAUhE;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGP,aAAa,EAAQ,CAACC,SAAS,CAC3DO,KAAK,CAAC,QAAQ,CAAC,CACfC,KAAK,CAAC;EACLC,UAAU,EAAEb,KAAK,CAACc,QAAQ,CAACd,KAAK,CAACe,OAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;EAC7DC,EAAE,EAAEhB,KAAK,CAACiB,UAAU;EACpBC,KAAK,EAAElB,KAAK,CAACmB,KAAK,CAACnB,KAAK,CAACoB,SAAS,EAAEb,eAAe,CAAC;EACpDc,MAAM,EAAErB,KAAK,CAACmB,KAAK,CAACnB,KAAK,CAACoB,SAAS,EAAEnB,SAAS,CAACD,KAAK,CAACsB,IAAI,CAAC,MAAWd,eAAe,CAAC,CAAC,CAAC;EACvFe,YAAY,EAAEvB,KAAK,CAACmB,KAAK,CAACnB,KAAK,CAACoB,SAAS,EAAEpB,KAAK,CAACwB,KAAK,CAACvB,SAAS,CAACD,KAAK,CAACsB,IAAI,CAAC,MAAWjB,kBAAkB,CAAC,CAAC,CAAC;AAC9G,CAAC,CAAC,CACDoB,KAAK,CAACC,IAAI,KAAK;EACd,IAAIC,KAAKA,CAAA,EAAG;IACV,OAAOD,IAAI,CAACE,UAAU,EAAiB;EACzC;AACF,CAAC,CAAC,CAAC,CAAC;AAEN,OAAO,MAAMC,mBAAmB,SAAS3B,YAAY,CAAC;EACpD,IAAIc,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACc,MAAM,CAAE,IAAG,CAAC;EAAC;EACpC,IAAIZ,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACY,MAAM,CAAE,OAAM,CAAC;EAAC;EAC1CT,MAAMA,CAACU,OAA6G,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,QAAO,EAAEvB,uBAAuB,EAAEsB,OAAO,CAAC;EAAC;EACxLR,YAAYA,CAACQ,OAAsH,EAAE;IAAE,OAAO,IAAI,CAACC,OAAO,CAAE,cAAa,EAAE1B,0BAA0B,EAAEyB,OAAO,CAAC;EAAC;AAClN;AACA,OAAO,SAASE,gBAAgBA,CAAA,EAAG;EACjC,OAAO,IAAIJ,mBAAmB,EAAE;AAClC;AAEA,OAAO,MAAMK,qBAAqB,GAAGD,gBAAgB,EAAE,CAACf,KAAK"},"metadata":{},"sourceType":"module"}