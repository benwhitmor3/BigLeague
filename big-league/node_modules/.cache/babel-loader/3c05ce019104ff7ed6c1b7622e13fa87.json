{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nimport { LeagueTypeModelBase } from \"./LeagueTypeModel.base\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\n/* A graphql query fragment builders for LeagueTypeModel */\nexport { selectFromLeagueType, leagueTypeModelPrimitives, LeagueTypeModelSelector } from \"./LeagueTypeModel.base\";\n\n/**\n * LeagueTypeModel\n */\nexport const LeagueTypeModel = LeagueTypeModelBase.actions(self => ({\n  // This is an auto-generated example action.\n  log() {\n    console.log(JSON.stringify(self));\n  },\n  setDraftingFranchise(franchise) {\n    // @ts-ignore\n    self.draftingFranchise = self.franchise(franchise.franchise);\n  },\n  setSeasonSimCheck(check) {\n    // @ts-ignore\n    self.seasonSimCheck = check;\n  }\n})).props({\n  draftingFranchise: types.union(types.undefined, types.reference(types.late(() => FranchiseTypeModel))),\n  seasonSimCheck: types.union(types.undefined, types.boolean)\n}).views(self => ({\n  franchise(franchiseName) {\n    let franchise = self.franchiseSet.find(franchise => {\n      if (franchise.franchise === franchiseName) return true;\n    });\n    return franchise;\n  },\n  player(playerName) {\n    let player = self.playerSet.find(player => {\n      if (player.name === playerName) return true;\n    });\n    return player;\n  },\n  franchiseplayers(franchiseName) {\n    let franchiseplayers = self.playerSet.filter(player => {\n      if (player.franchise) if (player.franchise.franchise === franchiseName) return true;\n    });\n    return franchiseplayers;\n  },\n  get draftClass() {\n    let draftClass = self.playerSet.filter(player => {\n      if (player.year === 1) return player;\n    });\n    return draftClass;\n  },\n  get draftClassRemaining() {\n    let draftClassRemaining = self.playerSet.filter(player => {\n      if (player.year === 1 && player.franchise == null) return player;\n    }).length;\n    return draftClassRemaining;\n  },\n  get bestDraftPlayer() {\n    let draftClass = self.playerSet.filter(player => {\n      if (player.year === 1 && player.franchise == null) return player;\n    });\n    let bestDraftPlayer = draftClass.sort(function (a, b) {\n      // @ts-ignore\n      return b.pv - a.pv;\n    });\n    return bestDraftPlayer[0];\n  },\n  get freeAgentClass() {\n    let freeAgentClass = self.playerSet.filter(player => {\n      if (player.year !== 1 && player.contract == null) return player;\n    });\n    return freeAgentClass;\n  },\n  get draftOrder() {\n    let draftOrder = self.franchiseSet.sort(function (a, b) {\n      // @ts-ignore\n      return a.wins - b.wins;\n    });\n    return draftOrder;\n  },\n  get franchisesWithoutGm() {\n    return self.franchiseSet.map(franchise => {\n      var _franchise$gm;\n      return (_franchise$gm = franchise.gm) === null || _franchise$gm === void 0 ? void 0 : _franchise$gm.trait;\n    }).filter(trait => trait === undefined);\n  },\n  get franchisesWithoutCoach() {\n    return self.franchiseSet.map(franchise => {\n      var _franchise$coach;\n      return (_franchise$coach = franchise.coach) === null || _franchise$coach === void 0 ? void 0 : _franchise$coach.attributeOne;\n    }).filter(attributeOne => attributeOne === undefined);\n  }\n}));","map":{"version":3,"names":["types","LeagueTypeModelBase","FranchiseTypeModel","selectFromLeagueType","leagueTypeModelPrimitives","LeagueTypeModelSelector","LeagueTypeModel","actions","self","log","console","JSON","stringify","setDraftingFranchise","franchise","draftingFranchise","setSeasonSimCheck","check","seasonSimCheck","props","union","undefined","reference","late","boolean","views","franchiseName","franchiseSet","find","player","playerName","playerSet","name","franchiseplayers","filter","draftClass","year","draftClassRemaining","length","bestDraftPlayer","sort","a","b","pv","freeAgentClass","contract","draftOrder","wins","franchisesWithoutGm","map","_franchise$gm","gm","trait","franchisesWithoutCoach","_franchise$coach","coach","attributeOne"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/LeagueTypeModel.ts"],"sourcesContent":["import {Instance, types} from \"mobx-state-tree\"\nimport {LeagueTypeModelBase} from \"./LeagueTypeModel.base\"\nimport {FranchiseTypeModel, FranchiseTypeModelType} from \"./FranchiseTypeModel\";\nimport {PlayerTypeModelType} from \"./PlayerTypeModel\";\n\n/* The TypeScript type of an instance of LeagueTypeModel */\nexport interface LeagueTypeModelType extends Instance<typeof LeagueTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for LeagueTypeModel */\nexport {selectFromLeagueType, leagueTypeModelPrimitives, LeagueTypeModelSelector} from \"./LeagueTypeModel.base\"\n\n/**\n * LeagueTypeModel\n */\nexport const LeagueTypeModel = LeagueTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        },\n        setDraftingFranchise(franchise: FranchiseTypeModelType) {\n            // @ts-ignore\n            self.draftingFranchise = self.franchise(franchise.franchise)\n        },\n        setSeasonSimCheck(check: boolean) {\n            // @ts-ignore\n            self.seasonSimCheck = check\n        },\n    }))\n    .props({\n        draftingFranchise: types.union(types.undefined, types.reference(types.late(() => FranchiseTypeModel))),\n        seasonSimCheck: types.union(types.undefined, types.boolean)\n    })\n    .views(self => ({\n        franchise(franchiseName: string) {\n            let franchise = self.franchiseSet.find((franchise) => {\n                if (franchise.franchise === franchiseName)\n                    return true;\n            });\n            return franchise\n        },\n        player(playerName: string) {\n            let player = self.playerSet.find((player) => {\n                if (player.name === playerName)\n                    return true;\n            });\n            return player\n        },\n        franchiseplayers(franchiseName: string) {\n            let franchiseplayers = self.playerSet.filter((player) => {\n                if (player.franchise)\n                    if (player.franchise.franchise === franchiseName)\n                        return true;\n            });\n            return franchiseplayers\n        },\n        get draftClass() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1)\n                    return player\n            })\n            return draftClass\n        },\n        get draftClassRemaining(){\n            let draftClassRemaining = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise == null)\n                    return player\n            }).length\n            return draftClassRemaining\n        },\n        get bestDraftPlayer() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise == null)\n                    return player\n            })\n            let bestDraftPlayer = draftClass.sort(function (a, b) {\n                // @ts-ignore\n                return b.pv - a.pv;\n            })\n            return bestDraftPlayer[0]\n        },\n        get freeAgentClass() {\n            let freeAgentClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year !== 1 && player.contract == null)\n                    return player\n            })\n            return freeAgentClass\n        },\n        get draftOrder() {\n            let draftOrder = self.franchiseSet.sort(function (a, b) {\n                // @ts-ignore\n                return a.wins - b.wins;\n            })\n            return draftOrder\n        },\n        get franchisesWithoutGm(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.gm?.trait).filter((trait: any) => trait === undefined)\n        },\n        get franchisesWithoutCoach(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.coach?.attributeOne).filter((attributeOne: any) => attributeOne === undefined)\n        },\n    }))\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}