{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nimport { LeagueTypeModelBase } from \"./LeagueTypeModel.base\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\n/* A graphql query fragment builders for LeagueTypeModel */\nexport { selectFromLeagueType, leagueTypeModelPrimitives, LeagueTypeModelSelector } from \"./LeagueTypeModel.base\";\n\n/**\n * LeagueTypeModel\n */\nexport var LeagueTypeModel = LeagueTypeModelBase.actions(function (self) {\n  return {\n    // This is an auto-generated example action.\n    log: function log() {\n      console.log(JSON.stringify(self));\n    },\n    setDraftingFranchise: function setDraftingFranchise(franchise) {\n      // @ts-ignore\n      self.draftingFranchise = self.franchise(franchise.franchise);\n    },\n    setSeasonSimCheck: function setSeasonSimCheck(check) {\n      // @ts-ignore\n      self.seasonSimCheck = check;\n    }\n  };\n}).props({\n  draftingFranchise: types.union(types.undefined, types.reference(types.late(function () {\n    return FranchiseTypeModel;\n  }))),\n  seasonSimCheck: types.union(types.undefined, types.boolean)\n}).views(function (self) {\n  return {\n    franchise: function franchise(franchiseName) {\n      var franchise = self.franchiseSet.find(function (franchise) {\n        if (franchise.franchise === franchiseName) return true;\n      });\n      return franchise;\n    },\n    player: function player(playerName) {\n      var player = self.playerSet.find(function (player) {\n        if (player.name === playerName) return true;\n      });\n      return player;\n    },\n    franchiseplayers: function franchiseplayers(franchiseName) {\n      var franchiseplayers = self.playerSet.filter(function (player) {\n        if (player.franchise) if (player.franchise.franchise === franchiseName) return true;\n      });\n      return franchiseplayers;\n    },\n    get draftClass() {\n      var draftClass = self.playerSet.filter(function (player) {\n        if (player.year === 1) return player;\n      });\n      return draftClass;\n    },\n    get bestDraftPlayer() {\n      var draftClass = self.playerSet.filter(function (player) {\n        if (player.year === 1 && player.franchise == null) return player;\n      });\n      var bestDraftPlayer = draftClass.sort(function (a, b) {\n        // @ts-ignore\n        return b.pv - a.pv;\n      });\n      return bestDraftPlayer[0];\n    },\n    get freeAgentClass() {\n      var freeAgentClass = self.playerSet.filter(function (player) {\n        if (player.year !== 1 && player.contract == null) return player;\n      });\n      return freeAgentClass;\n    },\n    get draftOrder() {\n      var draftOrder = self.franchiseSet.sort(function (a, b) {\n        // @ts-ignore\n        return a.wins - b.wins;\n      });\n      return draftOrder;\n    },\n    get franchisesWithoutGm() {\n      return self.franchiseSet.map(function (franchise) {\n        var _franchise$gm;\n        return (_franchise$gm = franchise.gm) === null || _franchise$gm === void 0 ? void 0 : _franchise$gm.trait;\n      }).filter(function (trait) {\n        return trait === undefined;\n      });\n    },\n    get franchisesWithoutCoach() {\n      return self.franchiseSet.map(function (franchise) {\n        var _franchise$coach;\n        return (_franchise$coach = franchise.coach) === null || _franchise$coach === void 0 ? void 0 : _franchise$coach.attributeOne;\n      }).filter(function (attributeOne) {\n        return attributeOne === undefined;\n      });\n    }\n  };\n});","map":{"version":3,"names":["types","LeagueTypeModelBase","FranchiseTypeModel","selectFromLeagueType","leagueTypeModelPrimitives","LeagueTypeModelSelector","LeagueTypeModel","actions","self","log","console","JSON","stringify","setDraftingFranchise","franchise","draftingFranchise","setSeasonSimCheck","check","seasonSimCheck","props","union","undefined","reference","late","boolean","views","franchiseName","franchiseSet","find","player","playerName","playerSet","name","franchiseplayers","filter","draftClass","year","bestDraftPlayer","sort","a","b","pv","freeAgentClass","contract","draftOrder","wins","franchisesWithoutGm","map","_franchise$gm","gm","trait","franchisesWithoutCoach","_franchise$coach","coach","attributeOne"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/LeagueTypeModel.ts"],"sourcesContent":["import {Instance, types} from \"mobx-state-tree\"\nimport {LeagueTypeModelBase} from \"./LeagueTypeModel.base\"\nimport {FranchiseTypeModel, FranchiseTypeModelType} from \"./FranchiseTypeModel\";\nimport {PlayerTypeModelType} from \"./PlayerTypeModel\";\n\n/* The TypeScript type of an instance of LeagueTypeModel */\nexport interface LeagueTypeModelType extends Instance<typeof LeagueTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for LeagueTypeModel */\nexport {selectFromLeagueType, leagueTypeModelPrimitives, LeagueTypeModelSelector} from \"./LeagueTypeModel.base\"\n\n/**\n * LeagueTypeModel\n */\nexport const LeagueTypeModel = LeagueTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        },\n        setDraftingFranchise(franchise: FranchiseTypeModelType) {\n            // @ts-ignore\n            self.draftingFranchise = self.franchise(franchise.franchise)\n        },\n        setSeasonSimCheck(check: boolean) {\n            // @ts-ignore\n            self.seasonSimCheck = check\n        },\n    }))\n    .props({\n        draftingFranchise: types.union(types.undefined, types.reference(types.late(() => FranchiseTypeModel))),\n        seasonSimCheck: types.union(types.undefined, types.boolean)\n    })\n    .views(self => ({\n        franchise(franchiseName: string) {\n            let franchise = self.franchiseSet.find((franchise) => {\n                if (franchise.franchise === franchiseName)\n                    return true;\n            });\n            return franchise\n        },\n        player(playerName: string) {\n            let player = self.playerSet.find((player) => {\n                if (player.name === playerName)\n                    return true;\n            });\n            return player\n        },\n        franchiseplayers(franchiseName: string) {\n            let franchiseplayers = self.playerSet.filter((player) => {\n                if (player.franchise)\n                    if (player.franchise.franchise === franchiseName)\n                        return true;\n            });\n            return franchiseplayers\n        },\n        get draftClass() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1)\n                    return player\n            })\n            return draftClass\n        },\n        get bestDraftPlayer() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise == null)\n                    return player\n            })\n            let bestDraftPlayer = draftClass.sort(function (a, b) {\n                // @ts-ignore\n                return b.pv - a.pv;\n            })\n            return bestDraftPlayer[0]\n        },\n        get freeAgentClass() {\n            let freeAgentClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year !== 1 && player.contract == null)\n                    return player\n            })\n            return freeAgentClass\n        },\n        get draftOrder() {\n            let draftOrder = self.franchiseSet.sort(function (a, b) {\n                // @ts-ignore\n                return a.wins - b.wins;\n            })\n            return draftOrder\n        },\n        get franchisesWithoutGm(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.gm?.trait).filter((trait: any) => trait === undefined)\n        },\n        get franchisesWithoutCoach(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.coach?.attributeOne).filter((attributeOne: any) => attributeOne === undefined)\n        },\n    }))\n"],"mappings":"AAAA,SAAkBA,KAAK,QAAO,iBAAiB;AAC/C,SAAQC,mBAAmB,QAAO,wBAAwB;AAC1D,SAAQC,kBAAkB,QAA+B,sBAAsB;AAO/E;AACA,SAAQC,oBAAoB,EAAEC,yBAAyB,EAAEC,uBAAuB,QAAO,wBAAwB;;AAE/G;AACA;AACA;AACA,OAAO,IAAMC,eAAe,GAAGL,mBAAmB,CAC7CM,OAAO,CAAC,UAAAC,IAAI;EAAA,OAAK;IACd;IACAC,GAAG,WAAAA,IAAA,EAAG;MACFC,OAAO,CAACD,GAAG,CAACE,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IACrC,CAAC;IACDK,oBAAoB,WAAAA,qBAACC,SAAiC,EAAE;MACpD;MACAN,IAAI,CAACO,iBAAiB,GAAGP,IAAI,CAACM,SAAS,CAACA,SAAS,CAACA,SAAS,CAAC;IAChE,CAAC;IACDE,iBAAiB,WAAAA,kBAACC,KAAc,EAAE;MAC9B;MACAT,IAAI,CAACU,cAAc,GAAGD,KAAK;IAC/B;EACJ,CAAC;AAAA,CAAC,CAAC,CACFE,KAAK,CAAC;EACHJ,iBAAiB,EAAEf,KAAK,CAACoB,KAAK,CAACpB,KAAK,CAACqB,SAAS,EAAErB,KAAK,CAACsB,SAAS,CAACtB,KAAK,CAACuB,IAAI,CAAC;IAAA,OAAMrB,kBAAkB;EAAA,EAAC,CAAC,CAAC;EACtGgB,cAAc,EAAElB,KAAK,CAACoB,KAAK,CAACpB,KAAK,CAACqB,SAAS,EAAErB,KAAK,CAACwB,OAAO;AAC9D,CAAC,CAAC,CACDC,KAAK,CAAC,UAAAjB,IAAI;EAAA,OAAK;IACZM,SAAS,WAAAA,UAACY,aAAqB,EAAE;MAC7B,IAAIZ,SAAS,GAAGN,IAAI,CAACmB,YAAY,CAACC,IAAI,CAAC,UAACd,SAAS,EAAK;QAClD,IAAIA,SAAS,CAACA,SAAS,KAAKY,aAAa,EACrC,OAAO,IAAI;MACnB,CAAC,CAAC;MACF,OAAOZ,SAAS;IACpB,CAAC;IACDe,MAAM,WAAAA,OAACC,UAAkB,EAAE;MACvB,IAAID,MAAM,GAAGrB,IAAI,CAACuB,SAAS,CAACH,IAAI,CAAC,UAACC,MAAM,EAAK;QACzC,IAAIA,MAAM,CAACG,IAAI,KAAKF,UAAU,EAC1B,OAAO,IAAI;MACnB,CAAC,CAAC;MACF,OAAOD,MAAM;IACjB,CAAC;IACDI,gBAAgB,WAAAA,iBAACP,aAAqB,EAAE;MACpC,IAAIO,gBAAgB,GAAGzB,IAAI,CAACuB,SAAS,CAACG,MAAM,CAAC,UAACL,MAAM,EAAK;QACrD,IAAIA,MAAM,CAACf,SAAS,EAChB,IAAIe,MAAM,CAACf,SAAS,CAACA,SAAS,KAAKY,aAAa,EAC5C,OAAO,IAAI;MACvB,CAAC,CAAC;MACF,OAAOO,gBAAgB;IAC3B,CAAC;IACD,IAAIE,UAAUA,CAAA,EAAG;MACb,IAAIA,UAAU,GAAG3B,IAAI,CAACuB,SAAS,CAACG,MAAM,CAAC,UAACL,MAA2B,EAAK;QACpE,IAAIA,MAAM,CAACO,IAAI,KAAK,CAAC,EACjB,OAAOP,MAAM;MACrB,CAAC,CAAC;MACF,OAAOM,UAAU;IACrB,CAAC;IACD,IAAIE,eAAeA,CAAA,EAAG;MAClB,IAAIF,UAAU,GAAG3B,IAAI,CAACuB,SAAS,CAACG,MAAM,CAAC,UAACL,MAA2B,EAAK;QACpE,IAAIA,MAAM,CAACO,IAAI,KAAK,CAAC,IAAIP,MAAM,CAACf,SAAS,IAAI,IAAI,EAC7C,OAAOe,MAAM;MACrB,CAAC,CAAC;MACF,IAAIQ,eAAe,GAAGF,UAAU,CAACG,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QAClD;QACA,OAAOA,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE;MACtB,CAAC,CAAC;MACF,OAAOJ,eAAe,CAAC,CAAC,CAAC;IAC7B,CAAC;IACD,IAAIK,cAAcA,CAAA,EAAG;MACjB,IAAIA,cAAc,GAAGlC,IAAI,CAACuB,SAAS,CAACG,MAAM,CAAC,UAACL,MAA2B,EAAK;QACxE,IAAIA,MAAM,CAACO,IAAI,KAAK,CAAC,IAAIP,MAAM,CAACc,QAAQ,IAAI,IAAI,EAC5C,OAAOd,MAAM;MACrB,CAAC,CAAC;MACF,OAAOa,cAAc;IACzB,CAAC;IACD,IAAIE,UAAUA,CAAA,EAAG;MACb,IAAIA,UAAU,GAAGpC,IAAI,CAACmB,YAAY,CAACW,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QACpD;QACA,OAAOD,CAAC,CAACM,IAAI,GAAGL,CAAC,CAACK,IAAI;MAC1B,CAAC,CAAC;MACF,OAAOD,UAAU;IACrB,CAAC;IACD,IAAIE,mBAAmBA,CAAA,EAAE;MACrB,OAAOtC,IAAI,CAACmB,YAAY,CAACoB,GAAG,CAAC,UAACjC,SAAiC;QAAA,IAAAkC,aAAA;QAAA,QAAAA,aAAA,GAAKlC,SAAS,CAACmC,EAAE,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,KAAK;MAAA,EAAC,CAAChB,MAAM,CAAC,UAACgB,KAAU;QAAA,OAAKA,KAAK,KAAK7B,SAAS;MAAA,EAAC;IACxI,CAAC;IACD,IAAI8B,sBAAsBA,CAAA,EAAE;MACxB,OAAO3C,IAAI,CAACmB,YAAY,CAACoB,GAAG,CAAC,UAACjC,SAAiC;QAAA,IAAAsC,gBAAA;QAAA,QAAAA,gBAAA,GAAKtC,SAAS,CAACuC,KAAK,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,YAAY;MAAA,EAAC,CAACpB,MAAM,CAAC,UAACoB,YAAiB;QAAA,OAAKA,YAAY,KAAKjC,SAAS;MAAA,EAAC;IAChK;EACJ,CAAC;AAAA,CAAC,CAAC"},"metadata":{},"sourceType":"module"}