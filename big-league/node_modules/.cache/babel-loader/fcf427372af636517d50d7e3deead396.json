{"ast":null,"code":"import _classCallCheck from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { LeagueTypeModel } from \"./LeagueTypeModel\";\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\";\nimport { StadiumTypeModel } from \"./StadiumTypeModel\";\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\";\n/**\n * CityTypeBase\n * auto generated base class for the model CityTypeModel.\n */\nexport var CityTypeModelBase = withTypedRefs()(ModelBase.named('CityType').props({\n  __typename: types.optional(types.literal(\"CityType\"), \"CityType\"),\n  id: types.identifier,\n  city: types.union(types.undefined, types.string),\n  cityValue: types.union(types.undefined, types.integer),\n  league: types.union(types.undefined, MSTGQLRef(types.late(function () {\n    return LeagueTypeModel;\n  }))),\n  stadiumSet: types.union(types.undefined, types.array(MSTGQLRef(types.late(function () {\n    return StadiumTypeModel;\n  }))))\n}).views(function (self) {\n  return {\n    get store() {\n      return self.__getStore();\n    }\n  };\n}));\nexport var CityTypeModelSelector = /*#__PURE__*/function (_QueryBuilder) {\n  _inherits(CityTypeModelSelector, _QueryBuilder);\n  var _super = _createSuper(CityTypeModelSelector);\n  function CityTypeModelSelector() {\n    _classCallCheck(this, CityTypeModelSelector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CityTypeModelSelector, [{\n    key: \"id\",\n    get: function get() {\n      return this.__attr(\"id\");\n    }\n  }, {\n    key: \"city\",\n    get: function get() {\n      return this.__attr(\"city\");\n    }\n  }, {\n    key: \"cityValue\",\n    get: function get() {\n      return this.__attr(\"cityValue\");\n    }\n  }, {\n    key: \"league\",\n    value: function league(builder) {\n      return this.__child(\"league\", LeagueTypeModelSelector, builder);\n    }\n  }, {\n    key: \"stadiumSet\",\n    value: function stadiumSet(builder) {\n      return this.__child(\"stadiumSet\", StadiumTypeModelSelector, builder);\n    }\n  }]);\n  return CityTypeModelSelector;\n}(QueryBuilder);\nexport function selectFromCityType() {\n  return new CityTypeModelSelector();\n}\nexport var cityTypeModelPrimitives = selectFromCityType().city.cityValue;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","LeagueTypeModel","LeagueTypeModelSelector","StadiumTypeModel","StadiumTypeModelSelector","CityTypeModelBase","named","props","__typename","optional","literal","id","identifier","city","union","undefined","string","cityValue","integer","league","late","stadiumSet","array","views","self","store","__getStore","CityTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","__attr","value","builder","__child","selectFromCityType","cityTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/CityTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n  stadiumSet: IObservableArray<StadiumTypeModelType>;\n}\n\n/**\n * CityTypeBase\n * auto generated base class for the model CityTypeModel.\n */\nexport const CityTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CityType')\n  .props({\n    __typename: types.optional(types.literal(\"CityType\"), \"CityType\"),\n    id: types.identifier,\n    city: types.union(types.undefined, types.string),\n    cityValue: types.union(types.undefined, types.integer),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    stadiumSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => StadiumTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CityTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get city() { return this.__attr(`city`) }\n  get cityValue() { return this.__attr(`cityValue`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  stadiumSet(builder?: string | StadiumTypeModelSelector | ((selector: StadiumTypeModelSelector) => StadiumTypeModelSelector)) { return this.__child(`stadiumSet`, StadiumTypeModelSelector, builder) }\n}\nexport function selectFromCityType() {\n  return new CityTypeModelSelector()\n}\n\nexport const cityTypeModelPrimitives = selectFromCityType().city.cityValue\n"],"mappings":";;;;AAAA;AACA;AACA;;AAGA,SAASA,KAAK,QAAQ,iBAAiB;AACvC,SAASC,SAAS,EAAEC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAChE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,eAAe,QAA6B,mBAAmB;AACxE,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAA8B,oBAAoB;AAC3E,SAASC,wBAAwB,QAAQ,yBAAyB;AAUlE;AACA;AACA;AACA;AACA,OAAO,IAAMC,iBAAiB,GAAGN,aAAa,EAAQ,CAACC,SAAS,CAC7DM,KAAK,CAAC,UAAU,CAAC,CACjBC,KAAK,CAAC;EACLC,UAAU,EAAEZ,KAAK,CAACa,QAAQ,CAACb,KAAK,CAACc,OAAO,CAAC,UAAU,CAAC,EAAE,UAAU,CAAC;EACjEC,EAAE,EAAEf,KAAK,CAACgB,UAAU;EACpBC,IAAI,EAAEjB,KAAK,CAACkB,KAAK,CAAClB,KAAK,CAACmB,SAAS,EAAEnB,KAAK,CAACoB,MAAM,CAAC;EAChDC,SAAS,EAAErB,KAAK,CAACkB,KAAK,CAAClB,KAAK,CAACmB,SAAS,EAAEnB,KAAK,CAACsB,OAAO,CAAC;EACtDC,MAAM,EAAEvB,KAAK,CAACkB,KAAK,CAAClB,KAAK,CAACmB,SAAS,EAAElB,SAAS,CAACD,KAAK,CAACwB,IAAI,CAAC;IAAA,OAAWnB,eAAe;EAAA,EAAC,CAAC,CAAC;EACvFoB,UAAU,EAAEzB,KAAK,CAACkB,KAAK,CAAClB,KAAK,CAACmB,SAAS,EAAEnB,KAAK,CAAC0B,KAAK,CAACzB,SAAS,CAACD,KAAK,CAACwB,IAAI,CAAC;IAAA,OAAWjB,gBAAgB;EAAA,EAAC,CAAC,CAAC;AAC1G,CAAC,CAAC,CACDoB,KAAK,CAAC,UAAAC,IAAI;EAAA,OAAK;IACd,IAAIC,KAAKA,CAAA,EAAG;MACV,OAAOD,IAAI,CAACE,UAAU,EAAiB;IACzC;EACF,CAAC;AAAA,CAAC,CAAC,CAAC;AAEN,WAAaC,qBAAqB,0BAAAC,aAAA;EAAAC,SAAA,CAAAF,qBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,qBAAA;EAAA,SAAAA,sBAAA;IAAAK,eAAA,OAAAL,qBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,qBAAA;IAAAS,GAAA;IAAAC,GAAA,EAChC,SAAAA,IAAA,EAAS;MAAE,OAAO,IAAI,CAACC,MAAM,MAAM;IAAC;EAAC;IAAAF,GAAA;IAAAC,GAAA,EACrC,SAAAA,IAAA,EAAW;MAAE,OAAO,IAAI,CAACC,MAAM,QAAQ;IAAC;EAAC;IAAAF,GAAA;IAAAC,GAAA,EACzC,SAAAA,IAAA,EAAgB;MAAE,OAAO,IAAI,CAACC,MAAM,aAAa;IAAC;EAAC;IAAAF,GAAA;IAAAG,KAAA,EACnD,SAAApB,OAAOqB,OAA6G,EAAE;MAAE,OAAO,IAAI,CAACC,OAAO,WAAWvC,uBAAuB,EAAEsC,OAAO,CAAC;IAAC;EAAC;IAAAJ,GAAA;IAAAG,KAAA,EACzL,SAAAlB,WAAWmB,OAAgH,EAAE;MAAE,OAAO,IAAI,CAACC,OAAO,eAAerC,wBAAwB,EAAEoC,OAAO,CAAC;IAAC;EAAC;EAAA,OAAAb,qBAAA;AAAA,EAL5J7B,YAAY;AAOvD,OAAO,SAAS4C,kBAAkBA,CAAA,EAAG;EACnC,OAAO,IAAIf,qBAAqB,EAAE;AACpC;AAEA,OAAO,IAAMgB,uBAAuB,GAAGD,kBAAkB,EAAE,CAAC7B,IAAI,CAACI,SAAS"},"metadata":{},"sourceType":"module"}