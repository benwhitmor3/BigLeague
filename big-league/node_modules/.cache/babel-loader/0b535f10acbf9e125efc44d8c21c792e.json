{"ast":null,"code":"import _classCallCheck from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { CityTypeModel } from \"./CityTypeModel\";\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\n/**\n * StadiumTypeBase\n * auto generated base class for the model StadiumTypeModel.\n */\nexport var StadiumTypeModelBase = withTypedRefs()(ModelBase.named('StadiumType').props({\n  __typename: types.optional(types.literal(\"StadiumType\"), \"StadiumType\"),\n  id: types.identifier,\n  stadiumName: types.union(types.undefined, types.string),\n  seats: types.union(types.undefined, types.integer),\n  boxes: types.union(types.undefined, types.integer),\n  grade: types.union(types.undefined, types.integer),\n  maxGrade: types.union(types.undefined, types.integer),\n  homeFieldAdvantage: types.union(types.undefined, types.integer),\n  city: types.union(types.undefined, MSTGQLRef(types.late(function () {\n    return CityTypeModel;\n  }))),\n  franchise: types.union(types.undefined, MSTGQLRef(types.late(function () {\n    return FranchiseTypeModel;\n  })))\n}).views(function (self) {\n  return {\n    get store() {\n      return self.__getStore();\n    }\n  };\n}));\nexport var StadiumTypeModelSelector = /*#__PURE__*/function (_QueryBuilder) {\n  _inherits(StadiumTypeModelSelector, _QueryBuilder);\n  var _super = _createSuper(StadiumTypeModelSelector);\n  function StadiumTypeModelSelector() {\n    _classCallCheck(this, StadiumTypeModelSelector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(StadiumTypeModelSelector, [{\n    key: \"id\",\n    get: function get() {\n      return this.__attr(\"id\");\n    }\n  }, {\n    key: \"stadiumName\",\n    get: function get() {\n      return this.__attr(\"stadiumName\");\n    }\n  }, {\n    key: \"seats\",\n    get: function get() {\n      return this.__attr(\"seats\");\n    }\n  }, {\n    key: \"boxes\",\n    get: function get() {\n      return this.__attr(\"boxes\");\n    }\n  }, {\n    key: \"grade\",\n    get: function get() {\n      return this.__attr(\"grade\");\n    }\n  }, {\n    key: \"maxGrade\",\n    get: function get() {\n      return this.__attr(\"maxGrade\");\n    }\n  }, {\n    key: \"homeFieldAdvantage\",\n    get: function get() {\n      return this.__attr(\"homeFieldAdvantage\");\n    }\n  }, {\n    key: \"city\",\n    value: function city(builder) {\n      return this.__child(\"city\", CityTypeModelSelector, builder);\n    }\n  }, {\n    key: \"franchise\",\n    value: function franchise(builder) {\n      return this.__child(\"franchise\", FranchiseTypeModelSelector, builder);\n    }\n  }]);\n  return StadiumTypeModelSelector;\n}(QueryBuilder);\nexport function selectFromStadiumType() {\n  return new StadiumTypeModelSelector();\n}\nexport var stadiumTypeModelPrimitives = selectFromStadiumType().stadiumName.seats.boxes.grade.maxGrade.homeFieldAdvantage;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","CityTypeModel","CityTypeModelSelector","FranchiseTypeModel","FranchiseTypeModelSelector","StadiumTypeModelBase","named","props","__typename","optional","literal","id","identifier","stadiumName","union","undefined","string","seats","integer","boxes","grade","maxGrade","homeFieldAdvantage","city","late","franchise","views","self","store","__getStore","StadiumTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","__attr","value","builder","__child","selectFromStadiumType","stadiumTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/StadiumTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  city: CityTypeModelType;\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * StadiumTypeBase\n * auto generated base class for the model StadiumTypeModel.\n */\nexport const StadiumTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('StadiumType')\n  .props({\n    __typename: types.optional(types.literal(\"StadiumType\"), \"StadiumType\"),\n    id: types.identifier,\n    stadiumName: types.union(types.undefined, types.string),\n    seats: types.union(types.undefined, types.integer),\n    boxes: types.union(types.undefined, types.integer),\n    grade: types.union(types.undefined, types.integer),\n    maxGrade: types.union(types.undefined, types.integer),\n    homeFieldAdvantage: types.union(types.undefined, types.integer),\n    city: types.union(types.undefined, MSTGQLRef(types.late((): any => CityTypeModel))),\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class StadiumTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get stadiumName() { return this.__attr(`stadiumName`) }\n  get seats() { return this.__attr(`seats`) }\n  get boxes() { return this.__attr(`boxes`) }\n  get grade() { return this.__attr(`grade`) }\n  get maxGrade() { return this.__attr(`maxGrade`) }\n  get homeFieldAdvantage() { return this.__attr(`homeFieldAdvantage`) }\n  city(builder?: string | CityTypeModelSelector | ((selector: CityTypeModelSelector) => CityTypeModelSelector)) { return this.__child(`city`, CityTypeModelSelector, builder) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromStadiumType() {\n  return new StadiumTypeModelSelector()\n}\n\nexport const stadiumTypeModelPrimitives = selectFromStadiumType().stadiumName.seats.boxes.grade.maxGrade.homeFieldAdvantage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}