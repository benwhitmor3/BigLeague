{"ast":null,"code":"import _classCallCheck from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* This is a mst-gql generated file, don't modify it manually */ /* eslint-disable */ /* tslint:disable */import{types}from\"mobx-state-tree\";import{MSTGQLRef,QueryBuilder,withTypedRefs}from\"mst-gql\";import{ModelBase}from\"./ModelBase\";import{CityTypeModel}from\"./CityTypeModel\";import{CityTypeModelSelector}from\"./CityTypeModel.base\";import{FranchiseTypeModel}from\"./FranchiseTypeModel\";import{FranchiseTypeModelSelector}from\"./FranchiseTypeModel.base\";/**\n * StadiumTypeBase\n * auto generated base class for the model StadiumTypeModel.\n */export var StadiumTypeModelBase=withTypedRefs()(ModelBase.named('StadiumType').props({__typename:types.optional(types.literal(\"StadiumType\"),\"StadiumType\"),id:types.identifier,stadiumName:types.union(types.undefined,types.string),seats:types.union(types.undefined,types.integer),boxes:types.union(types.undefined,types.integer),grade:types.union(types.undefined,types.integer),maxGrade:types.union(types.undefined,types.integer),homeFieldAdvantage:types.union(types.undefined,types.integer),city:types.union(types.undefined,MSTGQLRef(types.late(function(){return CityTypeModel;}))),franchise:types.union(types.undefined,MSTGQLRef(types.late(function(){return FranchiseTypeModel;})))}).views(function(self){return{get store(){return self.__getStore();}};}));export var StadiumTypeModelSelector=/*#__PURE__*/function(_QueryBuilder){_inherits(StadiumTypeModelSelector,_QueryBuilder);var _super=_createSuper(StadiumTypeModelSelector);function StadiumTypeModelSelector(){_classCallCheck(this,StadiumTypeModelSelector);return _super.apply(this,arguments);}_createClass(StadiumTypeModelSelector,[{key:\"id\",get:function get(){return this.__attr(\"id\");}},{key:\"stadiumName\",get:function get(){return this.__attr(\"stadiumName\");}},{key:\"seats\",get:function get(){return this.__attr(\"seats\");}},{key:\"boxes\",get:function get(){return this.__attr(\"boxes\");}},{key:\"grade\",get:function get(){return this.__attr(\"grade\");}},{key:\"maxGrade\",get:function get(){return this.__attr(\"maxGrade\");}},{key:\"homeFieldAdvantage\",get:function get(){return this.__attr(\"homeFieldAdvantage\");}},{key:\"city\",value:function city(builder){return this.__child(\"city\",CityTypeModelSelector,builder);}},{key:\"franchise\",value:function franchise(builder){return this.__child(\"franchise\",FranchiseTypeModelSelector,builder);}}]);return StadiumTypeModelSelector;}(QueryBuilder);export function selectFromStadiumType(){return new StadiumTypeModelSelector();}export var stadiumTypeModelPrimitives=selectFromStadiumType().stadiumName.seats.boxes.grade.maxGrade.homeFieldAdvantage;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","CityTypeModel","CityTypeModelSelector","FranchiseTypeModel","FranchiseTypeModelSelector","StadiumTypeModelBase","named","props","__typename","optional","literal","id","identifier","stadiumName","union","undefined","string","seats","integer","boxes","grade","maxGrade","homeFieldAdvantage","city","late","franchise","views","self","store","__getStore","StadiumTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","__attr","value","builder","__child","selectFromStadiumType","stadiumTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/StadiumTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  city: CityTypeModelType;\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * StadiumTypeBase\n * auto generated base class for the model StadiumTypeModel.\n */\nexport const StadiumTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('StadiumType')\n  .props({\n    __typename: types.optional(types.literal(\"StadiumType\"), \"StadiumType\"),\n    id: types.identifier,\n    stadiumName: types.union(types.undefined, types.string),\n    seats: types.union(types.undefined, types.integer),\n    boxes: types.union(types.undefined, types.integer),\n    grade: types.union(types.undefined, types.integer),\n    maxGrade: types.union(types.undefined, types.integer),\n    homeFieldAdvantage: types.union(types.undefined, types.integer),\n    city: types.union(types.undefined, MSTGQLRef(types.late((): any => CityTypeModel))),\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class StadiumTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get stadiumName() { return this.__attr(`stadiumName`) }\n  get seats() { return this.__attr(`seats`) }\n  get boxes() { return this.__attr(`boxes`) }\n  get grade() { return this.__attr(`grade`) }\n  get maxGrade() { return this.__attr(`maxGrade`) }\n  get homeFieldAdvantage() { return this.__attr(`homeFieldAdvantage`) }\n  city(builder?: string | CityTypeModelSelector | ((selector: CityTypeModelSelector) => CityTypeModelSelector)) { return this.__child(`city`, CityTypeModelSelector, builder) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromStadiumType() {\n  return new StadiumTypeModelSelector()\n}\n\nexport const stadiumTypeModelPrimitives = selectFromStadiumType().stadiumName.seats.boxes.grade.maxGrade.homeFieldAdvantage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}