{"ast":null,"code":"import { FranchiseTypeModelBase } from \"./FranchiseTypeModel.base\";\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport { selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\n\n/**\n * FranchiseTypeModel\n */\nexport var FranchiseTypeModel = FranchiseTypeModelBase.actions(function (self) {\n  return {\n    // This is an auto-generated example action.\n    log: function log() {\n      console.log(JSON.stringify(self));\n    }\n  };\n}).views(function (self) {\n  return {\n    get suitBonus() {\n      var suitList = self.playerSet.map(function (player, index) {\n        if (player.lineup === \"starter\") return player.suit;\n      });\n      var spades = suitList.filter(function (x) {\n        return x === \"spade\";\n      }).length;\n      var hearts = suitList.filter(function (x) {\n        return x === \"heart\";\n      }).length;\n      var diamonds = suitList.filter(function (x) {\n        return x === \"diamond\";\n      }).length;\n      var clubs = suitList.filter(function (x) {\n        return x === \"club\";\n      }).length;\n      var suitBonus = 0;\n\n      // spade adjustment\n      if (spades <= 1) {\n        suitBonus += 0;\n      } else {\n        suitBonus -= spades * (spades - 1);\n      }\n      // heart adjustment\n      suitBonus += hearts * (5 - hearts);\n      // diamond adjustment\n      if (diamonds > 0) {\n        suitBonus += 2 - (diamonds - 1);\n      }\n      // club adjustment\n      suitBonus += spades * clubs;\n      return suitBonus;\n    },\n    get epv() {\n      var epv = self.playerSet.map(function (player) {\n        if (player.lineup === \"starter\") return player.epv;\n      });\n      return epv.reduce(function (accumulator, currentValue) {\n        return (accumulator || 0) + (currentValue || 0);\n      }, 0);\n    },\n    get sEpv() {\n      var sEpv = self.playerSet.map(function (player) {\n        if (player.lineup === \"starter\") return player.sEpv;\n      });\n      return sEpv.reduce(function (accumulator, currentValue) {\n        return (accumulator || 0) + (currentValue || 0);\n      }, 0);\n    },\n    get meanAge() {\n      var ages = self.playerSet.map(function (player) {\n        return player.age;\n      });\n      var meanAge = ages.reduce(function (accumulator, currentValue) {\n        return (accumulator || 0) + (currentValue || 0);\n      }, 0) / ages.length;\n      return meanAge;\n    },\n    get salaries() {\n      var salaries = self.playerSet.map(function (player) {\n        return player.salary;\n      });\n      return salaries.reduce(function (accumulator, currentValue) {\n        return (accumulator || 0) + (currentValue || 0);\n      }, 0);\n    },\n    get championships() {\n      return self.seasonSet.length === 1 ? self.seasonSet[self.seasonSet.length - 1].championships : self.seasonSet[self.seasonSet.length - 2].championships;\n    },\n    get wins() {\n      return self.seasonSet.length === 1 ? self.seasonSet[self.seasonSet.length - 1].wins : self.seasonSet[self.seasonSet.length - 2].wins;\n    },\n    get lineup() {\n      var lineup = self.playerSet.map(function (player) {\n        return player.lineup;\n      });\n      return lineup;\n    },\n    get contracts() {\n      var contracts = self.playerSet.map(function (player) {\n        return player.contract;\n      });\n      return contracts;\n    },\n    get starters() {\n      var starters = self.playerSet.filter(function (player) {\n        if (player.lineup === \"starter\") return player;\n      });\n      return starters;\n    },\n    get unsignedPlayers() {\n      var unsignedPlayers = self.playerSet.filter(function (player) {\n        if (player.contract === null) return player;\n      });\n      return unsignedPlayers;\n    },\n    get unsetPlayers() {\n      var unsetPlayers = self.playerSet.filter(function (player) {\n        if (player.lineup === null) return player;\n      });\n      return unsetPlayers;\n    },\n    get profit() {\n      var revenue = self.seasonSet.map(function (season) {\n        return season.revenue;\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n      var expenses = self.seasonSet.map(function (season) {\n        return season.expenses;\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n      // @ts-ignore\n      var profit = revenue - expenses;\n      return profit;\n    }\n  };\n});","map":{"version":3,"names":["FranchiseTypeModelBase","selectFromFranchiseType","franchiseTypeModelPrimitives","FranchiseTypeModelSelector","FranchiseTypeModel","actions","self","log","console","JSON","stringify","views","suitBonus","suitList","playerSet","map","player","index","lineup","suit","spades","filter","x","length","hearts","diamonds","clubs","epv","reduce","accumulator","currentValue","sEpv","meanAge","ages","age","salaries","salary","championships","seasonSet","wins","contracts","contract","starters","unsignedPlayers","unsetPlayers","profit","revenue","season","a","b","expenses"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/FranchiseTypeModel.ts"],"sourcesContent":["import {Instance} from \"mobx-state-tree\"\nimport {FranchiseTypeModelBase} from \"./FranchiseTypeModel.base\"\nimport {SeasonTypeModelType} from \"./SeasonTypeModel\";\n\n/* The TypeScript type of an instance of FranchiseTypeModel */\nexport interface FranchiseTypeModelType extends Instance<typeof FranchiseTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport {\n    selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector\n}from \"./FranchiseTypeModel.base\"\n\n/**\n * FranchiseTypeModel\n */\nexport const FranchiseTypeModel = FranchiseTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        }\n    }))\n    .views(self => ({\n        get suitBonus() {\n            let suitList = self.playerSet.map(function (player, index) {\n                if (player.lineup === \"starter\")\n                    return player.suit;\n            });\n            let spades = suitList.filter(x => x === \"spade\").length\n            let hearts = suitList.filter(x => x === \"heart\").length\n            let diamonds = suitList.filter(x => x === \"diamond\").length\n            let clubs = suitList.filter(x => x === \"club\").length\n\n            let suitBonus = 0\n\n            // spade adjustment\n            if (spades <= 1) {\n                suitBonus += 0\n            } else {\n                suitBonus -= spades * (spades - 1)\n            }\n            // heart adjustment\n            suitBonus += hearts * (5 - hearts)\n            // diamond adjustment\n            if (diamonds > 0) {\n                suitBonus += 2 - (diamonds - 1)\n            }\n            // club adjustment\n            suitBonus += (spades * clubs)\n\n            return suitBonus\n        },\n        get epv() {\n            let epv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.epv;\n            });\n\n            return epv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get sEpv() {\n            let sEpv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.sEpv;\n            });\n\n            return sEpv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get meanAge() {\n            let ages: any = self.playerSet.map((player) => {\n                return player.age;\n            });\n\n            let meanAge = ages.reduce((accumulator: any, currentValue: any) => ((accumulator || 0) + (currentValue || 0)), 0) / (ages.length)\n\n            return meanAge\n        },\n        get salaries() {\n            let salaries = self.playerSet.map((player) => {\n                return player.salary;\n            });\n\n            return salaries.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get championships() {\n\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].championships\n                : self.seasonSet[self.seasonSet.length - 2].championships\n        },\n        get wins() {\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].wins\n                : self.seasonSet[self.seasonSet.length - 2].wins\n        },\n        get lineup() {\n            let lineup = self.playerSet.map((player) => {\n                return player.lineup;\n            });\n            return lineup\n        },\n        get contracts() {\n            let contracts = self.playerSet.map((player) => {\n                return player.contract\n            });\n            return contracts\n        },\n        get starters() {\n            let starters = self.playerSet.filter((player) => {\n                if (player.lineup === \"starter\")\n                    return player;\n            });\n            return starters\n        },\n        get unsignedPlayers() {\n            let unsignedPlayers = self.playerSet.filter((player) => {\n                if (player.contract === null)\n                    return player;\n            });\n            return unsignedPlayers\n        },\n        get unsetPlayers() {\n            let unsetPlayers = self.playerSet.filter((player) => {\n                if (player.lineup === null)\n                    return player;\n            });\n            return unsetPlayers\n        },\n        get profit() {\n            let revenue = self.seasonSet.map((season: SeasonTypeModelType) => season.revenue).reduce((a: any, b: any) => a + b)\n            let expenses = self.seasonSet.map((season: SeasonTypeModelType) => season.expenses).reduce((a: any, b: any) => a + b)\n            // @ts-ignore\n            let profit = revenue - expenses\n            return profit\n        },\n    }))\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}