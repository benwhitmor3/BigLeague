{"ast":null,"code":"import _classCallCheck from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* This is a mst-gql generated file, don't modify it manually */ /* eslint-disable */ /* tslint:disable */import{types}from\"mobx-state-tree\";import{MSTGQLRef,QueryBuilder,withTypedRefs}from\"mst-gql\";import{ModelBase}from\"./ModelBase\";import{FranchiseTypeModel}from\"./FranchiseTypeModel\";import{FranchiseTypeModelSelector}from\"./FranchiseTypeModel.base\";/**\n * SeasonTypeBase\n * auto generated base class for the model SeasonTypeModel.\n */export var SeasonTypeModelBase=withTypedRefs()(ModelBase.named('SeasonType').props({__typename:types.optional(types.literal(\"SeasonType\"),\"SeasonType\"),id:types.identifier,franchise:types.union(types.undefined,MSTGQLRef(types.late(function(){return FranchiseTypeModel;}))),season:types.union(types.undefined,types.integer),ready:types.union(types.undefined,types.boolean),wins:types.union(types.undefined,types.integer),losses:types.union(types.undefined,types.integer),ppg:types.union(types.undefined,types.number),std:types.union(types.undefined,types.number),championships:types.union(types.undefined,types.integer),bonuses:types.union(types.undefined,types.integer),penalties:types.union(types.undefined,types.integer),fanBase:types.union(types.undefined,types.number),fanIndex:types.union(types.undefined,types.number),advertising:types.union(types.undefined,types.integer),ticketPrice:types.union(types.undefined,types.number),ticketsSold:types.union(types.undefined,types.number),boxPrice:types.union(types.undefined,types.number),boxesSold:types.union(types.undefined,types.number),revenue:types.union(types.undefined,types.number),expenses:types.union(types.undefined,types.number)}).views(function(self){return{get store(){return self.__getStore();}};}));export var SeasonTypeModelSelector=/*#__PURE__*/function(_QueryBuilder){_inherits(SeasonTypeModelSelector,_QueryBuilder);var _super=_createSuper(SeasonTypeModelSelector);function SeasonTypeModelSelector(){_classCallCheck(this,SeasonTypeModelSelector);return _super.apply(this,arguments);}_createClass(SeasonTypeModelSelector,[{key:\"id\",get:function get(){return this.__attr(\"id\");}},{key:\"season\",get:function get(){return this.__attr(\"season\");}},{key:\"ready\",get:function get(){return this.__attr(\"ready\");}},{key:\"wins\",get:function get(){return this.__attr(\"wins\");}},{key:\"losses\",get:function get(){return this.__attr(\"losses\");}},{key:\"ppg\",get:function get(){return this.__attr(\"ppg\");}},{key:\"std\",get:function get(){return this.__attr(\"std\");}},{key:\"championships\",get:function get(){return this.__attr(\"championships\");}},{key:\"bonuses\",get:function get(){return this.__attr(\"bonuses\");}},{key:\"penalties\",get:function get(){return this.__attr(\"penalties\");}},{key:\"fanBase\",get:function get(){return this.__attr(\"fanBase\");}},{key:\"fanIndex\",get:function get(){return this.__attr(\"fanIndex\");}},{key:\"advertising\",get:function get(){return this.__attr(\"advertising\");}},{key:\"ticketPrice\",get:function get(){return this.__attr(\"ticketPrice\");}},{key:\"ticketsSold\",get:function get(){return this.__attr(\"ticketsSold\");}},{key:\"boxPrice\",get:function get(){return this.__attr(\"boxPrice\");}},{key:\"boxesSold\",get:function get(){return this.__attr(\"boxesSold\");}},{key:\"revenue\",get:function get(){return this.__attr(\"revenue\");}},{key:\"expenses\",get:function get(){return this.__attr(\"expenses\");}},{key:\"franchise\",value:function franchise(builder){return this.__child(\"franchise\",FranchiseTypeModelSelector,builder);}}]);return SeasonTypeModelSelector;}(QueryBuilder);export function selectFromSeasonType(){return new SeasonTypeModelSelector();}export var seasonTypeModelPrimitives=selectFromSeasonType().season.ready.wins.losses.ppg.std.championships.bonuses.penalties.fanBase.fanIndex.advertising.ticketPrice.ticketsSold.boxPrice.boxesSold.revenue.expenses;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","FranchiseTypeModel","FranchiseTypeModelSelector","SeasonTypeModelBase","named","props","__typename","optional","literal","id","identifier","franchise","union","undefined","late","season","integer","ready","boolean","wins","losses","ppg","number","std","championships","bonuses","penalties","fanBase","fanIndex","advertising","ticketPrice","ticketsSold","boxPrice","boxesSold","revenue","expenses","views","self","store","__getStore","SeasonTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","__attr","value","builder","__child","selectFromSeasonType","seasonTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/SeasonTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * SeasonTypeBase\n * auto generated base class for the model SeasonTypeModel.\n */\nexport const SeasonTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('SeasonType')\n  .props({\n    __typename: types.optional(types.literal(\"SeasonType\"), \"SeasonType\"),\n    id: types.identifier,\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    season: types.union(types.undefined, types.integer),\n    ready: types.union(types.undefined, types.boolean),\n    wins: types.union(types.undefined, types.integer),\n    losses: types.union(types.undefined, types.integer),\n    ppg: types.union(types.undefined, types.number),\n    std: types.union(types.undefined, types.number),\n    championships: types.union(types.undefined, types.integer),\n    bonuses: types.union(types.undefined, types.integer),\n    penalties: types.union(types.undefined, types.integer),\n    fanBase: types.union(types.undefined, types.number),\n    fanIndex: types.union(types.undefined, types.number),\n    advertising: types.union(types.undefined, types.integer),\n    ticketPrice: types.union(types.undefined, types.number),\n    ticketsSold: types.union(types.undefined, types.number),\n    boxPrice: types.union(types.undefined, types.number),\n    boxesSold: types.union(types.undefined, types.number),\n    revenue: types.union(types.undefined, types.number),\n    expenses: types.union(types.undefined, types.number),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class SeasonTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get season() { return this.__attr(`season`) }\n  get ready() { return this.__attr(`ready`) }\n  get wins() { return this.__attr(`wins`) }\n  get losses() { return this.__attr(`losses`) }\n  get ppg() { return this.__attr(`ppg`) }\n  get std() { return this.__attr(`std`) }\n  get championships() { return this.__attr(`championships`) }\n  get bonuses() { return this.__attr(`bonuses`) }\n  get penalties() { return this.__attr(`penalties`) }\n  get fanBase() { return this.__attr(`fanBase`) }\n  get fanIndex() { return this.__attr(`fanIndex`) }\n  get advertising() { return this.__attr(`advertising`) }\n  get ticketPrice() { return this.__attr(`ticketPrice`) }\n  get ticketsSold() { return this.__attr(`ticketsSold`) }\n  get boxPrice() { return this.__attr(`boxPrice`) }\n  get boxesSold() { return this.__attr(`boxesSold`) }\n  get revenue() { return this.__attr(`revenue`) }\n  get expenses() { return this.__attr(`expenses`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromSeasonType() {\n  return new SeasonTypeModelSelector()\n}\n\nexport const seasonTypeModelPrimitives = selectFromSeasonType().season.ready.wins.losses.ppg.std.championships.bonuses.penalties.fanBase.fanIndex.advertising.ticketPrice.ticketsSold.boxPrice.boxesSold.revenue.expenses\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}