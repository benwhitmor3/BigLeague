{"ast":null,"code":"import _classCallCheck from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/bwhitmore6/Desktop/Projects/BigLeague/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\nimport { LeagueTypeModel } from \"./LeagueTypeModel\";\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\";\n/**\n * UserTypeBase\n * auto generated base class for the model UserTypeModel.\n */\nexport var UserTypeModelBase = withTypedRefs()(ModelBase.named('UserType').props({\n  __typename: types.optional(types.literal(\"UserType\"), \"UserType\"),\n  id: types.identifier,\n  password: types.union(types.undefined, types.string),\n  email: types.union(types.undefined, types.string),\n  username: types.union(types.undefined, types.string),\n  dateJoined: types.union(types.undefined, types.frozen()),\n  lastLogin: types.union(types.undefined, types.frozen()),\n  isAdmin: types.union(types.undefined, types.boolean),\n  isActive: types.union(types.undefined, types.boolean),\n  isStaff: types.union(types.undefined, types.boolean),\n  isSuperuser: types.union(types.undefined, types.boolean),\n  franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late(function () {\n    return FranchiseTypeModel;\n  }))),\n  league: types.union(types.undefined, types.null, MSTGQLRef(types.late(function () {\n    return LeagueTypeModel;\n  })))\n}).views(function (self) {\n  return {\n    get store() {\n      return self.__getStore();\n    }\n  };\n}));\nexport var UserTypeModelSelector = /*#__PURE__*/function (_QueryBuilder) {\n  _inherits(UserTypeModelSelector, _QueryBuilder);\n  var _super = _createSuper(UserTypeModelSelector);\n  function UserTypeModelSelector() {\n    _classCallCheck(this, UserTypeModelSelector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(UserTypeModelSelector, [{\n    key: \"id\",\n    get: function get() {\n      return this.__attr(\"id\");\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      return this.__attr(\"password\");\n    }\n  }, {\n    key: \"email\",\n    get: function get() {\n      return this.__attr(\"email\");\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      return this.__attr(\"username\");\n    }\n  }, {\n    key: \"dateJoined\",\n    get: function get() {\n      return this.__attr(\"dateJoined\");\n    }\n  }, {\n    key: \"lastLogin\",\n    get: function get() {\n      return this.__attr(\"lastLogin\");\n    }\n  }, {\n    key: \"isAdmin\",\n    get: function get() {\n      return this.__attr(\"isAdmin\");\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this.__attr(\"isActive\");\n    }\n  }, {\n    key: \"isStaff\",\n    get: function get() {\n      return this.__attr(\"isStaff\");\n    }\n  }, {\n    key: \"isSuperuser\",\n    get: function get() {\n      return this.__attr(\"isSuperuser\");\n    }\n  }, {\n    key: \"franchise\",\n    value: function franchise(builder) {\n      return this.__child(\"franchise\", FranchiseTypeModelSelector, builder);\n    }\n  }, {\n    key: \"league\",\n    value: function league(builder) {\n      return this.__child(\"league\", LeagueTypeModelSelector, builder);\n    }\n  }]);\n  return UserTypeModelSelector;\n}(QueryBuilder);\nexport function selectFromUserType() {\n  return new UserTypeModelSelector();\n}\nexport var userTypeModelPrimitives = selectFromUserType().password.email.username.dateJoined.lastLogin.isAdmin.isActive.isStaff.isSuperuser;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","FranchiseTypeModel","FranchiseTypeModelSelector","LeagueTypeModel","LeagueTypeModelSelector","UserTypeModelBase","named","props","__typename","optional","literal","id","identifier","password","union","undefined","string","email","username","dateJoined","frozen","lastLogin","isAdmin","boolean","isActive","isStaff","isSuperuser","franchise","null","late","league","views","self","store","__getStore","UserTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","__attr","value","builder","__child","selectFromUserType","userTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/UserTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n  league: LeagueTypeModelType;\n}\n\n/**\n * UserTypeBase\n * auto generated base class for the model UserTypeModel.\n */\nexport const UserTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UserType')\n  .props({\n    __typename: types.optional(types.literal(\"UserType\"), \"UserType\"),\n    id: types.identifier,\n    password: types.union(types.undefined, types.string),\n    email: types.union(types.undefined, types.string),\n    username: types.union(types.undefined, types.string),\n    dateJoined: types.union(types.undefined, types.frozen()),\n    lastLogin: types.union(types.undefined, types.frozen()),\n    isAdmin: types.union(types.undefined, types.boolean),\n    isActive: types.union(types.undefined, types.boolean),\n    isStaff: types.union(types.undefined, types.boolean),\n    isSuperuser: types.union(types.undefined, types.boolean),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    league: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UserTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get password() { return this.__attr(`password`) }\n  get email() { return this.__attr(`email`) }\n  get username() { return this.__attr(`username`) }\n  get dateJoined() { return this.__attr(`dateJoined`) }\n  get lastLogin() { return this.__attr(`lastLogin`) }\n  get isAdmin() { return this.__attr(`isAdmin`) }\n  get isActive() { return this.__attr(`isActive`) }\n  get isStaff() { return this.__attr(`isStaff`) }\n  get isSuperuser() { return this.__attr(`isSuperuser`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n}\nexport function selectFromUserType() {\n  return new UserTypeModelSelector()\n}\n\nexport const userTypeModelPrimitives = selectFromUserType().password.email.username.dateJoined.lastLogin.isAdmin.isActive.isStaff.isSuperuser\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}