{"ast":null,"code":"/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\";\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\";\nimport { ModelBase } from \"./ModelBase\";\nimport { FranchiseTypeModel } from \"./FranchiseTypeModel\";\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\n/**\n * SeasonTypeBase\n * auto generated base class for the model SeasonTypeModel.\n */\nexport const SeasonTypeModelBase = withTypedRefs()(ModelBase.named('SeasonType').props({\n  __typename: types.optional(types.literal(\"SeasonType\"), \"SeasonType\"),\n  id: types.identifier,\n  franchise: types.union(types.undefined, MSTGQLRef(types.late(() => FranchiseTypeModel))),\n  season: types.union(types.undefined, types.integer),\n  ready: types.union(types.undefined, types.boolean),\n  wins: types.union(types.undefined, types.integer),\n  losses: types.union(types.undefined, types.integer),\n  ppg: types.union(types.undefined, types.number),\n  std: types.union(types.undefined, types.number),\n  championships: types.union(types.undefined, types.integer),\n  bonuses: types.union(types.undefined, types.integer),\n  penalties: types.union(types.undefined, types.integer),\n  fanBase: types.union(types.undefined, types.number),\n  fanIndex: types.union(types.undefined, types.number),\n  advertising: types.union(types.undefined, types.integer),\n  ticketPrice: types.union(types.undefined, types.number),\n  ticketsSold: types.union(types.undefined, types.number),\n  boxPrice: types.union(types.undefined, types.number),\n  boxesSold: types.union(types.undefined, types.number),\n  revenue: types.union(types.undefined, types.number),\n  expenses: types.union(types.undefined, types.number)\n}).views(self => ({\n  get store() {\n    return self.__getStore();\n  }\n})));\nexport class SeasonTypeModelSelector extends QueryBuilder {\n  get id() {\n    return this.__attr(`id`);\n  }\n  get season() {\n    return this.__attr(`season`);\n  }\n  get ready() {\n    return this.__attr(`ready`);\n  }\n  get wins() {\n    return this.__attr(`wins`);\n  }\n  get losses() {\n    return this.__attr(`losses`);\n  }\n  get ppg() {\n    return this.__attr(`ppg`);\n  }\n  get std() {\n    return this.__attr(`std`);\n  }\n  get championships() {\n    return this.__attr(`championships`);\n  }\n  get bonuses() {\n    return this.__attr(`bonuses`);\n  }\n  get penalties() {\n    return this.__attr(`penalties`);\n  }\n  get fanBase() {\n    return this.__attr(`fanBase`);\n  }\n  get fanIndex() {\n    return this.__attr(`fanIndex`);\n  }\n  get advertising() {\n    return this.__attr(`advertising`);\n  }\n  get ticketPrice() {\n    return this.__attr(`ticketPrice`);\n  }\n  get ticketsSold() {\n    return this.__attr(`ticketsSold`);\n  }\n  get boxPrice() {\n    return this.__attr(`boxPrice`);\n  }\n  get boxesSold() {\n    return this.__attr(`boxesSold`);\n  }\n  get revenue() {\n    return this.__attr(`revenue`);\n  }\n  get expenses() {\n    return this.__attr(`expenses`);\n  }\n  franchise(builder) {\n    return this.__child(`franchise`, FranchiseTypeModelSelector, builder);\n  }\n}\nexport function selectFromSeasonType() {\n  return new SeasonTypeModelSelector();\n}\nexport const seasonTypeModelPrimitives = selectFromSeasonType().season.ready.wins.losses.ppg.std.championships.bonuses.penalties.fanBase.fanIndex.advertising.ticketPrice.ticketsSold.boxPrice.boxesSold.revenue.expenses;","map":{"version":3,"names":["types","MSTGQLRef","QueryBuilder","withTypedRefs","ModelBase","FranchiseTypeModel","FranchiseTypeModelSelector","SeasonTypeModelBase","named","props","__typename","optional","literal","id","identifier","franchise","union","undefined","late","season","integer","ready","boolean","wins","losses","ppg","number","std","championships","bonuses","penalties","fanBase","fanIndex","advertising","ticketPrice","ticketsSold","boxPrice","boxesSold","revenue","expenses","views","self","store","__getStore","SeasonTypeModelSelector","__attr","builder","__child","selectFromSeasonType","seasonTypeModelPrimitives"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/SeasonTypeModel.base.ts"],"sourcesContent":["/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * SeasonTypeBase\n * auto generated base class for the model SeasonTypeModel.\n */\nexport const SeasonTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('SeasonType')\n  .props({\n    __typename: types.optional(types.literal(\"SeasonType\"), \"SeasonType\"),\n    id: types.identifier,\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    season: types.union(types.undefined, types.integer),\n    ready: types.union(types.undefined, types.boolean),\n    wins: types.union(types.undefined, types.integer),\n    losses: types.union(types.undefined, types.integer),\n    ppg: types.union(types.undefined, types.number),\n    std: types.union(types.undefined, types.number),\n    championships: types.union(types.undefined, types.integer),\n    bonuses: types.union(types.undefined, types.integer),\n    penalties: types.union(types.undefined, types.integer),\n    fanBase: types.union(types.undefined, types.number),\n    fanIndex: types.union(types.undefined, types.number),\n    advertising: types.union(types.undefined, types.integer),\n    ticketPrice: types.union(types.undefined, types.number),\n    ticketsSold: types.union(types.undefined, types.number),\n    boxPrice: types.union(types.undefined, types.number),\n    boxesSold: types.union(types.undefined, types.number),\n    revenue: types.union(types.undefined, types.number),\n    expenses: types.union(types.undefined, types.number),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class SeasonTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get season() { return this.__attr(`season`) }\n  get ready() { return this.__attr(`ready`) }\n  get wins() { return this.__attr(`wins`) }\n  get losses() { return this.__attr(`losses`) }\n  get ppg() { return this.__attr(`ppg`) }\n  get std() { return this.__attr(`std`) }\n  get championships() { return this.__attr(`championships`) }\n  get bonuses() { return this.__attr(`bonuses`) }\n  get penalties() { return this.__attr(`penalties`) }\n  get fanBase() { return this.__attr(`fanBase`) }\n  get fanIndex() { return this.__attr(`fanIndex`) }\n  get advertising() { return this.__attr(`advertising`) }\n  get ticketPrice() { return this.__attr(`ticketPrice`) }\n  get ticketsSold() { return this.__attr(`ticketsSold`) }\n  get boxPrice() { return this.__attr(`boxPrice`) }\n  get boxesSold() { return this.__attr(`boxesSold`) }\n  get revenue() { return this.__attr(`revenue`) }\n  get expenses() { return this.__attr(`expenses`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromSeasonType() {\n  return new SeasonTypeModelSelector()\n}\n\nexport const seasonTypeModelPrimitives = selectFromSeasonType().season.ready.wins.losses.ppg.std.championships.bonuses.penalties.fanBase.fanIndex.advertising.ticketPrice.ticketsSold.boxPrice.boxesSold.revenue.expenses\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}