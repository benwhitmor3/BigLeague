{"ast":null,"code":"import { FranchiseTypeModelBase } from \"./FranchiseTypeModel.base\";\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport { selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\";\n\n/**\n * FranchiseTypeModel\n */\nexport const FranchiseTypeModel = FranchiseTypeModelBase.actions(self => ({\n  // This is an auto-generated example action.\n  log() {\n    console.log(JSON.stringify(self));\n  }\n})).views(self => ({\n  get suitBonus() {\n    let suitList = self.playerSet.map(function (player, index) {\n      if (player.lineup === \"starter\") return player.suit;\n    });\n    let spades = suitList.filter(x => x === \"spade\").length;\n    let hearts = suitList.filter(x => x === \"heart\").length;\n    let diamonds = suitList.filter(x => x === \"diamond\").length;\n    let clubs = suitList.filter(x => x === \"club\").length;\n    let suitBonus = 0;\n\n    // spade adjustment\n    if (spades <= 1) {\n      suitBonus += 0;\n    } else {\n      suitBonus -= spades * (spades - 1);\n    }\n    // heart adjustment\n    suitBonus += hearts * (5 - hearts);\n    // diamond adjustment\n    if (diamonds > 0) {\n      suitBonus += 2 - (diamonds - 1);\n    }\n    // club adjustment\n    suitBonus += spades * clubs;\n    return suitBonus;\n  },\n  get epv() {\n    let epv = self.playerSet.map(player => {\n      if (player.lineup === \"starter\") return player.epv;\n    });\n    return epv.reduce((accumulator, currentValue) => (accumulator || 0) + (currentValue || 0), 0);\n  },\n  get sEpv() {\n    let sEpv = self.playerSet.map(player => {\n      if (player.lineup === \"starter\") return player.sEpv;\n    });\n    return sEpv.reduce((accumulator, currentValue) => (accumulator || 0) + (currentValue || 0), 0);\n  },\n  get meanAge() {\n    let ages = self.playerSet.map(player => {\n      return player.age;\n    });\n    let meanAge = ages.reduce((accumulator, currentValue) => (accumulator || 0) + (currentValue || 0), 0) / ages.length;\n    return meanAge;\n  },\n  get salaries() {\n    let salaries = self.playerSet.map(player => {\n      return player.salary;\n    });\n    return salaries.reduce((accumulator, currentValue) => (accumulator || 0) + (currentValue || 0), 0);\n  },\n  get championships() {\n    return self.seasonSet.length === 1 ? self.seasonSet[self.seasonSet.length - 1].championships : self.seasonSet[self.seasonSet.length - 2].championships;\n  },\n  get wins() {\n    return self.seasonSet.length === 1 ? self.seasonSet[self.seasonSet.length - 1].wins : self.seasonSet[self.seasonSet.length - 2].wins;\n  },\n  get lineup() {\n    let lineup = self.playerSet.map(player => {\n      return player.lineup;\n    });\n    return lineup;\n  },\n  get contracts() {\n    let contracts = self.playerSet.map(player => {\n      return player.contract;\n    });\n    return contracts;\n  },\n  get starters() {\n    let starters = self.playerSet.filter(player => {\n      if (player.lineup === \"starter\") return player;\n    });\n    return starters;\n  },\n  get unsignedPlayers() {\n    let unsignedPlayers = self.playerSet.filter(player => {\n      if (player.contract === null) return player;\n    });\n    return unsignedPlayers;\n  },\n  get unsetPlayers() {\n    let unsetPlayers = self.playerSet.filter(player => {\n      if (player.lineup === null) return player;\n    });\n    return unsetPlayers;\n  },\n  get profit() {\n    let revenue = self.seasonSet.map(season => season.revenue).reduce((a, b) => a + b);\n    let expenses = self.seasonSet.map(season => season.expenses).reduce((a, b) => a + b);\n    // @ts-ignore\n    let profit = revenue - expenses;\n    return profit;\n  }\n}));","map":{"version":3,"names":["FranchiseTypeModelBase","selectFromFranchiseType","franchiseTypeModelPrimitives","FranchiseTypeModelSelector","FranchiseTypeModel","actions","self","log","console","JSON","stringify","views","suitBonus","suitList","playerSet","map","player","index","lineup","suit","spades","filter","x","length","hearts","diamonds","clubs","epv","reduce","accumulator","currentValue","sEpv","meanAge","ages","age","salaries","salary","championships","seasonSet","wins","contracts","contract","starters","unsignedPlayers","unsetPlayers","profit","revenue","season","a","b","expenses"],"sources":["/Users/bwhitmore6/Desktop/Projects/BigLeague/src/models/FranchiseTypeModel.ts"],"sourcesContent":["import {Instance} from \"mobx-state-tree\"\nimport {FranchiseTypeModelBase} from \"./FranchiseTypeModel.base\"\nimport {SeasonTypeModelType} from \"./SeasonTypeModel\";\n\n/* The TypeScript type of an instance of FranchiseTypeModel */\nexport interface FranchiseTypeModelType extends Instance<typeof FranchiseTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport {\n    selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector\n}from \"./FranchiseTypeModel.base\"\n\n/**\n * FranchiseTypeModel\n */\nexport const FranchiseTypeModel = FranchiseTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        }\n    }))\n    .views(self => ({\n        get suitBonus() {\n            let suitList = self.playerSet.map(function (player, index) {\n                if (player.lineup === \"starter\")\n                    return player.suit;\n            });\n            let spades = suitList.filter(x => x === \"spade\").length\n            let hearts = suitList.filter(x => x === \"heart\").length\n            let diamonds = suitList.filter(x => x === \"diamond\").length\n            let clubs = suitList.filter(x => x === \"club\").length\n\n            let suitBonus = 0\n\n            // spade adjustment\n            if (spades <= 1) {\n                suitBonus += 0\n            } else {\n                suitBonus -= spades * (spades - 1)\n            }\n            // heart adjustment\n            suitBonus += hearts * (5 - hearts)\n            // diamond adjustment\n            if (diamonds > 0) {\n                suitBonus += 2 - (diamonds - 1)\n            }\n            // club adjustment\n            suitBonus += (spades * clubs)\n\n            return suitBonus\n        },\n        get epv() {\n            let epv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.epv;\n            });\n\n            return epv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get sEpv() {\n            let sEpv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.sEpv;\n            });\n\n            return sEpv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get meanAge() {\n            let ages: any = self.playerSet.map((player) => {\n                return player.age;\n            });\n\n            let meanAge = ages.reduce((accumulator: any, currentValue: any) => ((accumulator || 0) + (currentValue || 0)), 0) / (ages.length)\n\n            return meanAge\n        },\n        get salaries() {\n            let salaries = self.playerSet.map((player) => {\n                return player.salary;\n            });\n\n            return salaries.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get championships() {\n\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].championships\n                : self.seasonSet[self.seasonSet.length - 2].championships\n        },\n        get wins() {\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].wins\n                : self.seasonSet[self.seasonSet.length - 2].wins\n        },\n        get lineup() {\n            let lineup = self.playerSet.map((player) => {\n                return player.lineup;\n            });\n            return lineup\n        },\n        get contracts() {\n            let contracts = self.playerSet.map((player) => {\n                return player.contract\n            });\n            return contracts\n        },\n        get starters() {\n            let starters = self.playerSet.filter((player) => {\n                if (player.lineup === \"starter\")\n                    return player;\n            });\n            return starters\n        },\n        get unsignedPlayers() {\n            let unsignedPlayers = self.playerSet.filter((player) => {\n                if (player.contract === null)\n                    return player;\n            });\n            return unsignedPlayers\n        },\n        get unsetPlayers() {\n            let unsetPlayers = self.playerSet.filter((player) => {\n                if (player.lineup === null)\n                    return player;\n            });\n            return unsetPlayers\n        },\n        get profit() {\n            let revenue = self.seasonSet.map((season: SeasonTypeModelType) => season.revenue).reduce((a: any, b: any) => a + b)\n            let expenses = self.seasonSet.map((season: SeasonTypeModelType) => season.expenses).reduce((a: any, b: any) => a + b)\n            // @ts-ignore\n            let profit = revenue - expenses\n            return profit\n        },\n    }))\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}