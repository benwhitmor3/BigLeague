import * as React from 'react';
import { Table, IndexRange, OverscanIndexRange, TableRowProps, Index } from 'react-virtualized';
import 'react-virtualized/styles.css';
import './style.css';
export declare type TableProps = {
    data: Array<any>;
    height: number;
    headerHeight: number;
    columns: Array<object>;
    rowHeight: Function;
    rowRenderer: Function;
    extraContentRenderer: Function;
    maxRowCount?: number;
    rowClassName?: string;
    showCaret?: boolean;
    caretElement?: JSX.Element;
    isRowLoaded?: (index: Index) => Boolean;
    noRowsRenderer?: () => JSX.Element;
    onRowsRendered?: (info: IndexRange & OverscanIndexRange) => void;
    registerChild?: (ref: Table | null) => void;
    stopScrollPropagation: boolean;
    autoSizerProps: Object;
    tableProps: Object;
};
declare type State = {
    expandedRowsMap: object;
};
export declare class CollapsibleTable extends React.Component<TableProps, State> {
    TableRef: Table | null;
    state: {
        expandedRowsMap: {};
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    getScroller(): any;
    _onScroll(event: any): void;
    _onRowClick: (index: number) => void;
    _rowHeight: (params: {
        index: number;
    }) => any;
    _getUpdatedExpandedRowsMap: (index: number) => object;
    _recomputeRowHeights: (index: number) => void;
    _registerThyself: (ref: Table | null) => void;
    _rowRenderer: (params: TableRowProps) => JSX.Element;
    render(): JSX.Element;
}
export declare const InfiniteCollapsibleTable: typeof React.Component;
export {};
