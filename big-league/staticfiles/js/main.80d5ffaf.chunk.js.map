{"version":3,"sources":["models/ModelBase.ts","models/ActionTypeModel.base.ts","models/ActionTypeModel.ts","models/CoachAttributeOneEnum.ts","models/CoachAttributeTwoEnum.ts","models/StadiumTypeModel.base.ts","models/StadiumTypeModel.ts","models/CityTypeModel.base.ts","models/CityTypeModel.ts","models/GmTraitEnum.ts","models/GmTypeModel.base.ts","models/GmTypeModel.ts","models/PlayerHistorySuitEnum.ts","models/PlayerHistoryTypeModel.base.ts","models/PlayerHistoryTypeModel.ts","models/PlayerTypeModel.base.ts","models/PlayerTypeModel.ts","models/LeagueTypeModel.base.ts","models/LeagueTypeModel.ts","models/CoachTypeModel.base.ts","models/CoachTypeModel.ts","models/SeasonTypeModel.base.ts","models/SeasonTypeModel.ts","models/FranchiseTypeModel.base.ts","models/FranchiseTypeModel.ts","models/UserTypeModel.base.ts","models/UserTypeModel.ts","models/CreateUserModel.base.ts","models/CreateUserModel.ts","models/DeleteUserModel.base.ts","models/DeleteUserModel.ts","models/ObtainJsonWebTokenModel.base.ts","models/ObtainJsonWebTokenModel.ts","models/VerifyModel.base.ts","models/VerifyModel.ts","models/RefreshModel.base.ts","models/RefreshModel.ts","models/CreateLeagueMutationModel.base.ts","models/CreateLeagueMutationModel.ts","models/CreateFranchiseMutationModel.base.ts","models/CreateFranchiseMutationModel.ts","models/UpdateFranchiseMutationModel.base.ts","models/UpdateFranchiseMutationModel.ts","models/UpdatePlayerMutationModel.base.ts","models/UpdatePlayerMutationModel.ts","models/UpdateActionMutationModel.base.ts","models/UpdateActionMutationModel.ts","models/UpdateSeasonMutationModel.base.ts","models/UpdateSeasonMutationModel.ts","models/CreateStadiumMutationModel.base.ts","models/CreateStadiumMutationModel.ts","models/UpdateStadiumMutationModel.base.ts","models/UpdateStadiumMutationModel.ts","models/RootStore.ts","models/RootStore.base.ts","models/reactUtils.ts","Pages/Molecules/Create/CreateStyles.tsx","Pages/Molecules/Create/CreateFranchise.tsx","Pages/Utils/tablefunctions.tsx","Pages/Utils/queries.tsx","Pages/Molecules/Modals/SigningModal.tsx","Pages/Molecules/Modals/TrainerModal.tsx","Pages/Atoms/Select.tsx","Pages/Molecules/LineupSelect.tsx","Pages/Organisms/Tables/TableStyles.tsx","Pages/Organisms/Tables/RosterTable.tsx","Pages/Organisms/Cards/CardStyles.tsx","Pages/Organisms/Cards/StaffCard.tsx","Pages/Molecules/Modals/EditStadiumModal.tsx","Pages/Atoms/Icons/StadiumIcon.tsx","Pages/Organisms/Cards/StadiumCard.tsx","Pages/Organisms/Cards/LineupStatsCard.tsx","Pages/Organisms/Tables/ActionTable.tsx","Pages/Atoms/notificationerrors.tsx","Pages/Organisms/Tables/TicketTable.tsx","Pages/Molecules/Create/CreateStadium.tsx","Pages/Templates/FranchiseCards.tsx","Pages/Atoms/Loading/SmallLoading.tsx","Pages/Molecules/Create/CreateBots.tsx","Pages/Molecules/Create/CreateLeague.tsx","Pages/Franchise.tsx","Pages/Organisms/Tables/DraftTable.tsx","Pages/Molecules/DraftOrder.tsx","Pages/Molecules/SimulationButtons/SimButtonStyles.tsx","Pages/Molecules/SimulationButtons/DraftButton.tsx","Pages/Molecules/BestDraftPlayer.tsx","Pages/Templates/DraftTemplate.tsx","Pages/Atoms/MissingStaffError.tsx","Pages/Draft.tsx","Pages/Organisms/Tables/PlayerHistoryTable.tsx","Pages/PlayerHistory.tsx","Pages/Molecules/SimulationButtons/SimSeasonChecker.tsx","Pages/Atoms/Loading/BigLoading.tsx","Pages/Molecules/SimulationButtons/SimSeasonButton.tsx","Pages/Organisms/Tables/SeasonTable.tsx","Pages/Season.tsx","assets/PlayerDistribution.png","assets/DevelopmentDistribution.png","assets/Actions.png","Pages/Templates/Instructions.tsx","Pages/Home.tsx","Pages/Molecules/SimulationButtons/SignPlayersButton.tsx","Pages/Molecules/SimulationButtons/SetLineupsButton.tsx","Pages/Atoms/Icons/MissingStartersIcon.tsx","Pages/Atoms/Icons/StartersIcon.tsx","Pages/Atoms/Icons/UnsetPlayerIcon.tsx","Pages/Atoms/Icons/UnsignedPlayerIcon.tsx","Pages/Atoms/Icons/SignedPlayerIcon.tsx","Pages/Molecules/LeagueStatus.tsx","Pages/Molecules/SimulationButtons/SetStaffButton.tsx","Pages/OffSeason.tsx","Pages/Organisms/Tables/FreeAgentTable.tsx","Pages/Molecules/SimulationButtons/FreeAgentButton.tsx","Pages/FreeAgency.tsx","Pages/Molecules/StaffInfo.tsx","Pages/Molecules/StaffSelect.tsx","Pages/Staff.tsx","Pages/LoginForm.tsx","Pages/SignupForm.tsx","Pages/Organisms/Tables/LeaderboardTable.tsx","Pages/Leaderboard.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["ModelBase","MSTGQLObject","ActionTypeModelBase","withTypedRefs","named","props","__typename","types","optional","literal","id","identifier","franchise","union","undefined","MSTGQLRef","late","FranchiseTypeModel","numberOfActions","integer","improvedBathrooms","boolean","improvedBathroomsComplete","improvedConcessions","improvedConcessionsComplete","jumbotron","jumbotronComplete","upscaleBar","upscaleBarComplete","hallOfFame","hallOfFameComplete","improvedSeating","improvedSeatingComplete","improvedSound","improvedSoundComplete","partyDeck","partyDeckComplete","wiFi","wiFiComplete","fanNight","familyGame","doorPrizes","mvpNight","paradeOfChampions","bribeTheRefs","easyRuns","easyRunsComplete","fanFactor","fanFactorComplete","trainPlayer","farmSystem","fanFavourites","gourmetRestaurant","gourmetRestaurantComplete","beerGarden","namingRights","namingRightsComplete","eventPlanning","views","self","__getStore","ActionTypeModelSelector","_QueryBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","__attr","value","builder","__child","FranchiseTypeModelSelector","QueryBuilder","actionTypeModelPrimitives","ActionTypeModel","actions","log","console","JSON","stringify","CoachAttributeOneEnumType","enumeration","CoachAttributeTwoEnumType","StadiumTypeModelBase","stadiumName","string","seats","boxes","grade","maxGrade","homeFieldAdvantage","city","CityTypeModel","StadiumTypeModelSelector","CityTypeModelSelector","stadiumTypeModelPrimitives","StadiumTypeModel","CityTypeModelBase","cityValue","league","LeagueTypeModel","stadiumSet","array","LeagueTypeModelSelector","cityTypeModelPrimitives","GmTraitEnumType","GmTypeModelBase","trait","franchiseSet","GmTypeModelSelector","gmTypeModelPrimitives","GmTypeModel","PlayerHistorySuitEnumType","PlayerHistoryTypeModelBase","season","name","suit","age","pv","number","epv","sEpv","PlayerHistoryTypeModelSelector","PlayerHistoryTypeModel","PlayerTypeModelBase","contract","null","tOption","pOption","renew","salary","trainer","year","lineup","PlayerTypeModelSelector","playerTypeModelPrimitives","PlayerTypeModel","LeagueTypeModelBase","leagueName","user","UserTypeModel","citySet","gmSet","coachSet","CoachTypeModel","playerSet","playerhistorySet","UserTypeModelSelector","CoachTypeModelSelector","leagueTypeModelPrimitives","setDraftingFranchise","draftingFranchise","setSeasonSimCheck","check","seasonSimCheck","reference","franchiseName","find","player","playerName","franchiseplayers","filter","length","sort","a","b","wins","map","_franchise$gm","gm","_franchise$coach","coach","attributeOne","CoachTypeModelBase","attributeTwo","coachTypeModelPrimitives","SeasonTypeModelBase","ready","losses","ppg","std","championships","bonuses","penalties","fanBase","fanIndex","advertising","ticketPrice","ticketsSold","boxPrice","boxesSold","revenue","expenses","SeasonTypeModelSelector","seasonTypeModelPrimitives","SeasonTypeModel","FranchiseTypeModelBase","stadium","action","seasonSet","franchiseTypeModelPrimitives","suitList","index","spades","x","hearts","diamonds","suitBonus","reduce","accumulator","currentValue","ages","UserTypeModelBase","password","email","username","dateJoined","frozen","lastLogin","isAdmin","isActive","isStaff","isSuperuser","userTypeModelPrimitives","CreateUserModelBase","message","CreateUserModelSelector","createUserModelPrimitives","CreateUserModel","DeleteUserModelBase","DeleteUserModelSelector","deleteUserModelPrimitives","DeleteUserModel","ObtainJsonWebTokenModelBase","payload","refreshExpiresIn","token","ObtainJsonWebTokenModelSelector","obtainJsonWebTokenModelPrimitives","ObtainJsonWebTokenModel","VerifyModelBase","VerifyModelSelector","verifyModelPrimitives","VerifyModel","RefreshModelBase","RefreshModelSelector","refreshModelPrimitives","RefreshModel","CreateLeagueMutationModelBase","CreateLeagueMutationModelSelector","createLeagueMutationModelPrimitives","CreateLeagueMutationModel","CreateFranchiseMutationModelBase","CreateFranchiseMutationModelSelector","createFranchiseMutationModelPrimitives","CreateFranchiseMutationModel","UpdateFranchiseMutationModelBase","UpdateFranchiseMutationModelSelector","updateFranchiseMutationModelPrimitives","UpdateFranchiseMutationModel","UpdatePlayerMutationModelBase","UpdatePlayerMutationModelSelector","updatePlayerMutationModelPrimitives","UpdatePlayerMutationModel","UpdateActionMutationModelBase","UpdateActionMutationModelSelector","updateActionMutationModelPrimitives","UpdateActionMutationModel","UpdateSeasonMutationModelBase","UpdateSeasonMutationModelSelector","updateSeasonMutationModelPrimitives","UpdateSeasonMutationModel","CreateStadiumMutationModelBase","CreateStadiumMutationModelSelector","createStadiumMutationModelPrimitives","CreateStadiumMutationModel","UpdateStadiumMutationModelBase","UpdateStadiumMutationModelSelector","updateStadiumMutationModelPrimitives","UpdateStadiumMutationModel","RootStore","MSTGQLStore","extend","configureStoreMixin","userTypes","franchiseTypes","leagueTypes","cityTypes","stadiumTypes","gmTypes","coachTypes","playerTypes","playerHistoryTypes","actionTypes","seasonTypes","queryAllUser","variables","resultSelector","toString","options","query","concat","queryAllFranchise","queryAllLeague","queryAllCity","queryAllStadium","queryAllGm","queryAllCoach","queryAllPlayer","queryAllAction","queryAllSeason","queryPlayer","queryUser","queryLeague","mutateCreateUser","optimisticUpdate","mutate","mutateDeleteUser","mutateTokenAuth","mutateVerifyToken","mutateRefreshToken","mutateCreateLeague","mutateCreateFranchise","mutateUpdateFranchise","mutateCreatePlayer","mutateUpdateAction","mutateUpdateSeason","mutateCreateStadium","mutateUpdateStadium","User","isLoggedIn","setUser","fetchPolicy","then","data","setIsLoggedIn","loggedIn","StoreContext","createStoreContext","React","useQuery","createUseQueryHook","formStyles","textAlign","marginTop","cardStyles","display","width","boxShadow","labelStyles","marginRight","inputStyles","backgroundColor","border","borderRadius","padding","fontSize","color","buttonStyles","margin","verticalAlign","cursor","CreateFranchise","observer","_ref","setFranchise","store","useContext","_useForm","useForm","register","handleSubmit","errors","onSubmit","_ref2","createFranchise","createElement","style","Card","title","Space","direction","ref","required","maxLength","type","Alert","closable","insertArray","item","splice","colour","toLowerCase","suit_icon","role","aria-label","_to_fixed","toFixed","_lineup","userQuery","mutateCreatePlayerQuery","SigningModal","visible","setVisible","selectedplayer","selectStyles","_useState","useState","_useState2","_slicedToArray","setSalary","_useState3","_useState4","renewal","setRenewal","_useState5","_useState6","contractlength","setContractLength","_useState7","_useState8","playeroption","setPlayerOption","_useState9","_useState10","teamoption","setTeamOption","_useState11","_useState12","offergrade","setOfferGrade","_useState13","_useState14","gradecolour","setGradeColour","useEffect","calc_grade","Modal","centered","footer","Button","_objectSpread","onClick","Input","min","onChange","event","target","valueAsNumber","Select","defaultValue","label","Tag","TrainerModal","trainerVisible","setTrainerVisible","train_player","notification","error","description","duration","e","selectedIndex","currentTarget","selectedOption","option","LineupSelect","current_lineup","record","setRosterAlert","selected","setSelected","other_values","includes","updated_lineup","lineupArray","p","push","submitLineup","tableStyles","RosterTable","_store$User","selectedPlayer","setSelectedPlayer","rosterAlert","non_scouter_columns","dataIndex","sorter","render","icon","toUpperCase","filters","text","onFilter","indexOf","size","localeCompare","sEPV_column","trainer_column","marginBottom","showIcon","onClose","Table","columns","scouter_columns","trainer_columns","dataSource","toJS","pagination","rowKey","bordered","Option","StaffCard","Row","gutter","Col","span","offset","Statistic","EditStadiumModal","editStadiumVisible","setEditStadiumVisible","setSeats","setBoxes","total","setTotal","newTotal","Math","StadiumIcon","xmlSpace","className","animationPlayState","viewBox","xmlns","height","fill","d","StadiumCard","EditOutlined","LineupStatsCard","_franchise$gm2","precision","meanAge","prefix","salaries","ActionTable","_store$User$franchise","localStorage","getItem","setImprovedBathrooms","setImprovedConcessions","setJumbotron","setUpscaleBar","setHallOfFame","setImprovedSeating","setImprovedSound","setPartyDeck","setWiFi","setFanNight","setFamilyGame","setDoorPrizes","setMvpNight","setParadeOfChampions","setBribeTheRefs","setEasyRuns","setFanFactor","setFanFavourites","setGourmetRestaurant","setBeerGarden","setNamingRights","setEventPlanning","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","_useState41","_useState42","_useState43","_useState44","actionChecker","oldActions","newActions","oldTrue","newTrue","actionsSelected","actionError","submitActions","fixed","Checkbox","disabled","defaultChecked","checked","_franchise$gm3","_franchise$gm4","_franchise$gm5","_franchise$gm6","_franchise$gm7","Popconfirm","onConfirm","okText","cancelText","placement","observable","scroll","TicketTable","setSeason","seasonNum","setSeasonNum","season_obj","textAlignLast","season_num","changeSeason","max","seasonJS","CreateStadium","setCity","FranchiseCards","introJs","start","data-intro","data-step","SmallLoading","animation","animationDuration","strokeMiterlimit","strokeLinejoin","strokeLinecap","strokeWidth","stroke","y","CreateBots","numberOfFranchises","setNumberOfFranchises","loading","setLoading","link","window","location","port","hostname","host","FormData","append","axios","post","protocol","res","catch","err","createBots","CreateLeague","navigate","useNavigate","Franchise","_store$User2","_store$User3","_store$User4","DraftTable","draftOrder","exception_var","draftClass","DraftOrder","idx","draftClassDrafted","hoverable","simButtonStyles","DraftButton","draftSim","bestDraftPlayer","numOfPicks","currentTeamIndex","userTeamIndex","abs","draftClassRemaining","i","draftRepeater","setTimeout","draftSimRepeat","block","BestDraftPlayer","marginLeft","valueStyle","DraftTemplate","MissingStaffError","Draft","_store$User2$league","_store$User3$league","franchisesWithoutGm","franchisesWithoutCoach","PlayerHistoryTable","_store$User$league$pl","_store$User$league$pl2","_toConsumableArray","Map","values","Spin","PlayerHistory","simSeasonChecker","rosterError","lineupError","starters","starterError","contracts","unsignedError","staffError","BigLoading","opacity","zIndex","top","left","position","SimSeasonButton","simSeason","forEach","unusedActionError","leagueReset","SeasonTable","defaultSortOrder","parseInt","Season","Title","Typography","Paragraph","Text","beginButtonStyles","Instructions","level","Divider","List","grid","column","renderItem","Item","fontStyle","strong","underline","Image","src","PlayerDistribution","DevelopmentDistribution","Actions","Home","_store$User$league","_store$User$league$fr","_store$User$league2","Link","to","SignPlayersButton","signPlayers","SetLineupsButton","setLineups","MissingStartersIcon","StartersIcon","UnsetPlayerIcon","r","cy","cx","UnsignedPlayerIcon","transform","SignedPlayerIcon","missingStaff","missingStaffColor","_franchise$coach2","unsignedPlayer","unsignedPlayers","unsignedPlayerColor","unsetPlayers","unsetPlayerColor","LeagueStatus","timer","toggle","clearTimeout","_franchise$gm3$trait","_franchise$coach3","_franchise$coach3$nam","Badge","Ribbon","unsignedPlayerLogic","unsetPlayerLogic","SetStaffButton","OffSeason","_store$User4$league","_store$User5","_store$User5$league","FreeAgentTable","actionColumn","freeAgentClass","freeAgentClassSigned","FreeAgencyButton","signFreeAgents","FreeAgency","StaffInfo","StaffSelect","gmId","setGmId","coachId","setCoachId","minWidth","_coach$franchise","coachLabel","Staff","initialState","isError","reducer","state","LoginForm","_useReducer","useReducer","_useReducer2","dispatch","noValidate","autoComplete","placeholder","preventDefault","fetch","method","headers","body","ok","json","Promise","reject","setItem","access","refresh","response","status","statusText","handleLogin","isButtonDisabled","isSuccess","SignupForm","trim","test","handleSignup","LeaderboardTable","profit","Leaderboard","Header","Layout","Content","Footer","App","Date","getFullYear","deleteToken","removeItem","_useQuery","handleRefresh","Authorization","getCurrentUser","Router","Menu","theme","mode","float","href","Routes","Route","path","element","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootStore","create","gqlHttpClient","createHttpClient","URL","process","origin","addEventListener","contentType","unregister","reload","checkValidServiceWorker","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.80d5ffaf.chunk.js","sourcesContent":["import { MSTGQLObject } from \"mst-gql\"\n\nexport const ModelBase = MSTGQLObject\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * ActionTypeBase\n * auto generated base class for the model ActionTypeModel.\n */\nexport const ActionTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('ActionType')\n  .props({\n    __typename: types.optional(types.literal(\"ActionType\"), \"ActionType\"),\n    id: types.identifier,\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    numberOfActions: types.union(types.undefined, types.integer),\n    improvedBathrooms: types.union(types.undefined, types.boolean),\n    improvedBathroomsComplete: types.union(types.undefined, types.boolean),\n    improvedConcessions: types.union(types.undefined, types.boolean),\n    improvedConcessionsComplete: types.union(types.undefined, types.boolean),\n    jumbotron: types.union(types.undefined, types.boolean),\n    jumbotronComplete: types.union(types.undefined, types.boolean),\n    upscaleBar: types.union(types.undefined, types.boolean),\n    upscaleBarComplete: types.union(types.undefined, types.boolean),\n    hallOfFame: types.union(types.undefined, types.boolean),\n    hallOfFameComplete: types.union(types.undefined, types.boolean),\n    improvedSeating: types.union(types.undefined, types.boolean),\n    improvedSeatingComplete: types.union(types.undefined, types.boolean),\n    improvedSound: types.union(types.undefined, types.boolean),\n    improvedSoundComplete: types.union(types.undefined, types.boolean),\n    partyDeck: types.union(types.undefined, types.boolean),\n    partyDeckComplete: types.union(types.undefined, types.boolean),\n    wiFi: types.union(types.undefined, types.boolean),\n    wiFiComplete: types.union(types.undefined, types.boolean),\n    fanNight: types.union(types.undefined, types.boolean),\n    familyGame: types.union(types.undefined, types.boolean),\n    doorPrizes: types.union(types.undefined, types.boolean),\n    mvpNight: types.union(types.undefined, types.boolean),\n    paradeOfChampions: types.union(types.undefined, types.boolean),\n    bribeTheRefs: types.union(types.undefined, types.boolean),\n    easyRuns: types.union(types.undefined, types.boolean),\n    easyRunsComplete: types.union(types.undefined, types.boolean),\n    fanFactor: types.union(types.undefined, types.boolean),\n    fanFactorComplete: types.union(types.undefined, types.boolean),\n    trainPlayer: types.union(types.undefined, types.integer),\n    farmSystem: types.union(types.undefined, types.boolean),\n    fanFavourites: types.union(types.undefined, types.boolean),\n    gourmetRestaurant: types.union(types.undefined, types.boolean),\n    gourmetRestaurantComplete: types.union(types.undefined, types.boolean),\n    beerGarden: types.union(types.undefined, types.boolean),\n    namingRights: types.union(types.undefined, types.boolean),\n    namingRightsComplete: types.union(types.undefined, types.boolean),\n    eventPlanning: types.union(types.undefined, types.boolean),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class ActionTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get numberOfActions() { return this.__attr(`numberOfActions`) }\n  get improvedBathrooms() { return this.__attr(`improvedBathrooms`) }\n  get improvedBathroomsComplete() { return this.__attr(`improvedBathroomsComplete`) }\n  get improvedConcessions() { return this.__attr(`improvedConcessions`) }\n  get improvedConcessionsComplete() { return this.__attr(`improvedConcessionsComplete`) }\n  get jumbotron() { return this.__attr(`jumbotron`) }\n  get jumbotronComplete() { return this.__attr(`jumbotronComplete`) }\n  get upscaleBar() { return this.__attr(`upscaleBar`) }\n  get upscaleBarComplete() { return this.__attr(`upscaleBarComplete`) }\n  get hallOfFame() { return this.__attr(`hallOfFame`) }\n  get hallOfFameComplete() { return this.__attr(`hallOfFameComplete`) }\n  get improvedSeating() { return this.__attr(`improvedSeating`) }\n  get improvedSeatingComplete() { return this.__attr(`improvedSeatingComplete`) }\n  get improvedSound() { return this.__attr(`improvedSound`) }\n  get improvedSoundComplete() { return this.__attr(`improvedSoundComplete`) }\n  get partyDeck() { return this.__attr(`partyDeck`) }\n  get partyDeckComplete() { return this.__attr(`partyDeckComplete`) }\n  get wiFi() { return this.__attr(`wiFi`) }\n  get wiFiComplete() { return this.__attr(`wiFiComplete`) }\n  get fanNight() { return this.__attr(`fanNight`) }\n  get familyGame() { return this.__attr(`familyGame`) }\n  get doorPrizes() { return this.__attr(`doorPrizes`) }\n  get mvpNight() { return this.__attr(`mvpNight`) }\n  get paradeOfChampions() { return this.__attr(`paradeOfChampions`) }\n  get bribeTheRefs() { return this.__attr(`bribeTheRefs`) }\n  get easyRuns() { return this.__attr(`easyRuns`) }\n  get easyRunsComplete() { return this.__attr(`easyRunsComplete`) }\n  get fanFactor() { return this.__attr(`fanFactor`) }\n  get fanFactorComplete() { return this.__attr(`fanFactorComplete`) }\n  get trainPlayer() { return this.__attr(`trainPlayer`) }\n  get farmSystem() { return this.__attr(`farmSystem`) }\n  get fanFavourites() { return this.__attr(`fanFavourites`) }\n  get gourmetRestaurant() { return this.__attr(`gourmetRestaurant`) }\n  get gourmetRestaurantComplete() { return this.__attr(`gourmetRestaurantComplete`) }\n  get beerGarden() { return this.__attr(`beerGarden`) }\n  get namingRights() { return this.__attr(`namingRights`) }\n  get namingRightsComplete() { return this.__attr(`namingRightsComplete`) }\n  get eventPlanning() { return this.__attr(`eventPlanning`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromActionType() {\n  return new ActionTypeModelSelector()\n}\n\nexport const actionTypeModelPrimitives = selectFromActionType().numberOfActions.improvedBathrooms.improvedBathroomsComplete.improvedConcessions.improvedConcessionsComplete.jumbotron.jumbotronComplete.upscaleBar.upscaleBarComplete.hallOfFame.hallOfFameComplete.improvedSeating.improvedSeatingComplete.improvedSound.improvedSoundComplete.partyDeck.partyDeckComplete.wiFi.wiFiComplete.fanNight.familyGame.doorPrizes.mvpNight.paradeOfChampions.bribeTheRefs.easyRuns.easyRunsComplete.fanFactor.fanFactorComplete.trainPlayer.farmSystem.fanFavourites.gourmetRestaurant.gourmetRestaurantComplete.beerGarden.namingRights.namingRightsComplete.eventPlanning\n","import { Instance } from \"mobx-state-tree\"\nimport { ActionTypeModelBase } from \"./ActionTypeModel.base\"\n\n/* The TypeScript type of an instance of ActionTypeModel */\nexport interface ActionTypeModelType extends Instance<typeof ActionTypeModel.Type> {}\n\n/* A graphql query fragment builders for ActionTypeModel */\nexport { selectFromActionType, actionTypeModelPrimitives, ActionTypeModelSelector } from \"./ActionTypeModel.base\"\n\n/**\n * ActionTypeModel\n */\nexport const ActionTypeModel = ActionTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\nimport { types } from \"mobx-state-tree\"\n\n/**\n * Typescript enum\n */\n\nexport enum CoachAttributeOne {\n  TEAMWORK=\"TEAMWORK\",\nCLUTCH=\"CLUTCH\",\nFAME=\"FAME\",\nFOCUS=\"FOCUS\",\nGUTS=\"GUTS\",\nSUBSTITUTION=\"SUBSTITUTION\",\nUNDERDOG=\"UNDERDOG\",\nROAD=\"ROAD\"\n}\n\n/**\n* CoachAttributeOne\n *\n * An enumeration.\n*/\nexport const CoachAttributeOneEnumType = types.enumeration(\"CoachAttributeOne\", [\n        \"TEAMWORK\", // teamwork\n  \"CLUTCH\", // clutch\n  \"FAME\", // fame\n  \"FOCUS\", // focus\n  \"GUTS\", // guts\n  \"SUBSTITUTION\", // substitution\n  \"UNDERDOG\", // underdog\n  \"ROAD\", // road\n      ])\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\nimport { types } from \"mobx-state-tree\"\n\n/**\n * Typescript enum\n */\n\nexport enum CoachAttributeTwo {\n  TEAMWORK=\"TEAMWORK\",\nCLUTCH=\"CLUTCH\",\nFAME=\"FAME\",\nFOCUS=\"FOCUS\",\nGUTS=\"GUTS\",\nSUBSTITUTION=\"SUBSTITUTION\",\nUNDERDOG=\"UNDERDOG\",\nROAD=\"ROAD\"\n}\n\n/**\n* CoachAttributeTwo\n *\n * An enumeration.\n*/\nexport const CoachAttributeTwoEnumType = types.enumeration(\"CoachAttributeTwo\", [\n        \"TEAMWORK\", // teamwork\n  \"CLUTCH\", // clutch\n  \"FAME\", // fame\n  \"FOCUS\", // focus\n  \"GUTS\", // guts\n  \"SUBSTITUTION\", // substitution\n  \"UNDERDOG\", // underdog\n  \"ROAD\", // road\n      ])\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  city: CityTypeModelType;\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * StadiumTypeBase\n * auto generated base class for the model StadiumTypeModel.\n */\nexport const StadiumTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('StadiumType')\n  .props({\n    __typename: types.optional(types.literal(\"StadiumType\"), \"StadiumType\"),\n    id: types.identifier,\n    stadiumName: types.union(types.undefined, types.string),\n    seats: types.union(types.undefined, types.integer),\n    boxes: types.union(types.undefined, types.integer),\n    grade: types.union(types.undefined, types.integer),\n    maxGrade: types.union(types.undefined, types.integer),\n    homeFieldAdvantage: types.union(types.undefined, types.integer),\n    city: types.union(types.undefined, MSTGQLRef(types.late((): any => CityTypeModel))),\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class StadiumTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get stadiumName() { return this.__attr(`stadiumName`) }\n  get seats() { return this.__attr(`seats`) }\n  get boxes() { return this.__attr(`boxes`) }\n  get grade() { return this.__attr(`grade`) }\n  get maxGrade() { return this.__attr(`maxGrade`) }\n  get homeFieldAdvantage() { return this.__attr(`homeFieldAdvantage`) }\n  city(builder?: string | CityTypeModelSelector | ((selector: CityTypeModelSelector) => CityTypeModelSelector)) { return this.__child(`city`, CityTypeModelSelector, builder) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromStadiumType() {\n  return new StadiumTypeModelSelector()\n}\n\nexport const stadiumTypeModelPrimitives = selectFromStadiumType().stadiumName.seats.boxes.grade.maxGrade.homeFieldAdvantage\n","import { Instance } from \"mobx-state-tree\"\nimport { StadiumTypeModelBase } from \"./StadiumTypeModel.base\"\n\n/* The TypeScript type of an instance of StadiumTypeModel */\nexport interface StadiumTypeModelType extends Instance<typeof StadiumTypeModel.Type> {}\n\n/* A graphql query fragment builders for StadiumTypeModel */\nexport { selectFromStadiumType, stadiumTypeModelPrimitives, StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\n\n/**\n * StadiumTypeModel\n */\nexport const StadiumTypeModel = StadiumTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n  .views((self) => ({\n      get name() {\n          return self.stadiumName\n      },\n      // getAreaPlanUnits(date: string) {\n      //     let units = self.shiftinstanceSet.map((shift) => {\n      //         return shift.getShiftPlanUnits(date)\n      //     })\n      //     return sum(units)\n      // },\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n  stadiumSet: IObservableArray<StadiumTypeModelType>;\n}\n\n/**\n * CityTypeBase\n * auto generated base class for the model CityTypeModel.\n */\nexport const CityTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CityType')\n  .props({\n    __typename: types.optional(types.literal(\"CityType\"), \"CityType\"),\n    id: types.identifier,\n    city: types.union(types.undefined, types.string),\n    cityValue: types.union(types.undefined, types.integer),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    stadiumSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => StadiumTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CityTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get city() { return this.__attr(`city`) }\n  get cityValue() { return this.__attr(`cityValue`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  stadiumSet(builder?: string | StadiumTypeModelSelector | ((selector: StadiumTypeModelSelector) => StadiumTypeModelSelector)) { return this.__child(`stadiumSet`, StadiumTypeModelSelector, builder) }\n}\nexport function selectFromCityType() {\n  return new CityTypeModelSelector()\n}\n\nexport const cityTypeModelPrimitives = selectFromCityType().city.cityValue\n","import { Instance } from \"mobx-state-tree\"\nimport { CityTypeModelBase } from \"./CityTypeModel.base\"\n\n/* The TypeScript type of an instance of CityTypeModel */\nexport interface CityTypeModelType extends Instance<typeof CityTypeModel.Type> {}\n\n/* A graphql query fragment builders for CityTypeModel */\nexport { selectFromCityType, cityTypeModelPrimitives, CityTypeModelSelector } from \"./CityTypeModel.base\"\n\n/**\n * CityTypeModel\n */\nexport const CityTypeModel = CityTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\nimport { types } from \"mobx-state-tree\"\n\n/**\n * Typescript enum\n */\n\nexport enum GmTrait {\n  FACILITATOR=\"FACILITATOR\",\nPROMOTER=\"PROMOTER\",\nRECRUITER=\"RECRUITER\",\nSCOUTER=\"SCOUTER\",\nSUITOR=\"SUITOR\",\nTRAINER=\"TRAINER\"\n}\n\n/**\n* GmTrait\n *\n * An enumeration.\n*/\nexport const GmTraitEnumType = types.enumeration(\"GmTrait\", [\n        \"FACILITATOR\", // facilitator\n  \"PROMOTER\", // promoter\n  \"RECRUITER\", // recruiter\n  \"SCOUTER\", // scouter\n  \"SUITOR\", // suitor\n  \"TRAINER\", // trainer\n      ])\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { GmTraitEnumType } from \"./GmTraitEnum\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n  franchiseSet: IObservableArray<FranchiseTypeModelType>;\n}\n\n/**\n * GmTypeBase\n * auto generated base class for the model GmTypeModel.\n */\nexport const GmTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('GmType')\n  .props({\n    __typename: types.optional(types.literal(\"GMType\"), \"GMType\"),\n    id: types.identifier,\n    trait: types.union(types.undefined, GmTraitEnumType),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => FranchiseTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class GmTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get trait() { return this.__attr(`trait`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  franchiseSet(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromGmType() {\n  return new GmTypeModelSelector()\n}\n\nexport const gmTypeModelPrimitives = selectFromGmType().trait\n","import { Instance } from \"mobx-state-tree\"\nimport { GmTypeModelBase } from \"./GmTypeModel.base\"\n\n/* The TypeScript type of an instance of GmTypeModel */\nexport interface GmTypeModelType extends Instance<typeof GmTypeModel.Type> {}\n\n/* A graphql query fragment builders for GmTypeModel */\nexport { selectFromGmType, gmTypeModelPrimitives, GmTypeModelSelector } from \"./GmTypeModel.base\"\n\n/**\n * GmTypeModel\n */\nexport const GmTypeModel = GmTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\nimport { types } from \"mobx-state-tree\"\n\n/**\n * Typescript enum\n */\n\nexport enum PlayerHistorySuit {\n  DIAMOND=\"DIAMOND\",\nSPADE=\"SPADE\",\nCLUB=\"CLUB\",\nHEART=\"HEART\"\n}\n\n/**\n* PlayerHistorySuit\n *\n * An enumeration.\n*/\nexport const PlayerHistorySuitEnumType = types.enumeration(\"PlayerHistorySuit\", [\n        \"DIAMOND\", // diamond\n  \"SPADE\", // spade\n  \"CLUB\", // club\n  \"HEART\", // heart\n      ])\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { PlayerHistorySuitEnumType } from \"./PlayerHistorySuitEnum\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n}\n\n/**\n * PlayerHistoryTypeBase\n * auto generated base class for the model PlayerHistoryTypeModel.\n */\nexport const PlayerHistoryTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('PlayerHistoryType')\n  .props({\n    __typename: types.optional(types.literal(\"PlayerHistoryType\"), \"PlayerHistoryType\"),\n    id: types.identifier,\n    season: types.union(types.undefined, types.integer),\n    name: types.union(types.undefined, types.string),\n    suit: types.union(types.undefined, PlayerHistorySuitEnumType),\n    age: types.union(types.undefined, types.integer),\n    pv: types.union(types.undefined, types.number),\n    epv: types.union(types.undefined, types.number),\n    sEpv: types.union(types.undefined, types.number),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class PlayerHistoryTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get season() { return this.__attr(`season`) }\n  get name() { return this.__attr(`name`) }\n  get suit() { return this.__attr(`suit`) }\n  get age() { return this.__attr(`age`) }\n  get pv() { return this.__attr(`pv`) }\n  get epv() { return this.__attr(`epv`) }\n  get sEpv() { return this.__attr(`sEpv`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n}\nexport function selectFromPlayerHistoryType() {\n  return new PlayerHistoryTypeModelSelector()\n}\n\nexport const playerHistoryTypeModelPrimitives = selectFromPlayerHistoryType().season.name.suit.age.pv.epv.sEpv\n","import { Instance } from \"mobx-state-tree\"\nimport { PlayerHistoryTypeModelBase } from \"./PlayerHistoryTypeModel.base\"\n\n/* The TypeScript type of an instance of PlayerHistoryTypeModel */\nexport interface PlayerHistoryTypeModelType extends Instance<typeof PlayerHistoryTypeModel.Type> {}\n\n/* A graphql query fragment builders for PlayerHistoryTypeModel */\nexport { selectFromPlayerHistoryType, playerHistoryTypeModelPrimitives, PlayerHistoryTypeModelSelector } from \"./PlayerHistoryTypeModel.base\"\n\n/**\n * PlayerHistoryTypeModel\n */\nexport const PlayerHistoryTypeModel = PlayerHistoryTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n  league: LeagueTypeModelType;\n}\n\n/**\n * PlayerTypeBase\n * auto generated base class for the model PlayerTypeModel.\n */\nexport const PlayerTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('PlayerType')\n  .props({\n    __typename: types.optional(types.literal(\"PlayerType\"), \"PlayerType\"),\n    id: types.identifier,\n    name: types.union(types.undefined, types.string),\n    suit: types.union(types.undefined, types.string),\n    age: types.union(types.undefined, types.integer),\n    pv: types.union(types.undefined, types.number),\n    epv: types.union(types.undefined, types.number),\n    sEpv: types.union(types.undefined, types.number),\n    contract: types.union(types.undefined, types.null, types.integer),\n    tOption: types.union(types.undefined, types.null, types.integer),\n    pOption: types.union(types.undefined, types.null, types.integer),\n    renew: types.union(types.undefined, types.null, types.string),\n    salary: types.union(types.undefined, types.null, types.number),\n    grade: types.union(types.undefined, types.null, types.number),\n    trainer: types.union(types.undefined, types.boolean),\n    year: types.union(types.undefined, types.integer),\n    lineup: types.union(types.undefined, types.null, types.string),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class PlayerTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get name() { return this.__attr(`name`) }\n  get suit() { return this.__attr(`suit`) }\n  get age() { return this.__attr(`age`) }\n  get pv() { return this.__attr(`pv`) }\n  get epv() { return this.__attr(`epv`) }\n  get sEpv() { return this.__attr(`sEpv`) }\n  get contract() { return this.__attr(`contract`) }\n  get tOption() { return this.__attr(`tOption`) }\n  get pOption() { return this.__attr(`pOption`) }\n  get renew() { return this.__attr(`renew`) }\n  get salary() { return this.__attr(`salary`) }\n  get grade() { return this.__attr(`grade`) }\n  get trainer() { return this.__attr(`trainer`) }\n  get year() { return this.__attr(`year`) }\n  get lineup() { return this.__attr(`lineup`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n}\nexport function selectFromPlayerType() {\n  return new PlayerTypeModelSelector()\n}\n\nexport const playerTypeModelPrimitives = selectFromPlayerType().name.suit.age.pv.epv.sEpv.contract.tOption.pOption.renew.salary.grade.trainer.year.lineup\n","import { Instance } from \"mobx-state-tree\"\nimport { PlayerTypeModelBase } from \"./PlayerTypeModel.base\"\n\n/* The TypeScript type of an instance of PlayerTypeModel */\nexport interface PlayerTypeModelType extends Instance<typeof PlayerTypeModel.Type> {}\n\n/* A graphql query fragment builders for PlayerTypeModel */\nexport { selectFromPlayerType, playerTypeModelPrimitives, PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\n\n/**\n * PlayerTypeModel\n */\nexport const PlayerTypeModel = PlayerTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { CoachTypeModel, CoachTypeModelType } from \"./CoachTypeModel\"\nimport { CoachTypeModelSelector } from \"./CoachTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { GmTypeModel, GmTypeModelType } from \"./GmTypeModel\"\nimport { GmTypeModelSelector } from \"./GmTypeModel.base\"\nimport { PlayerHistoryTypeModel, PlayerHistoryTypeModelType } from \"./PlayerHistoryTypeModel\"\nimport { PlayerHistoryTypeModelSelector } from \"./PlayerHistoryTypeModel.base\"\nimport { PlayerTypeModel, PlayerTypeModelType } from \"./PlayerTypeModel\"\nimport { PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n  franchiseSet: IObservableArray<FranchiseTypeModelType>;\n  citySet: IObservableArray<CityTypeModelType>;\n  gmSet: IObservableArray<GmTypeModelType>;\n  coachSet: IObservableArray<CoachTypeModelType>;\n  playerSet: IObservableArray<PlayerTypeModelType>;\n  playerhistorySet: IObservableArray<PlayerHistoryTypeModelType>;\n}\n\n/**\n * LeagueTypeBase\n * auto generated base class for the model LeagueTypeModel.\n */\nexport const LeagueTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('LeagueType')\n  .props({\n    __typename: types.optional(types.literal(\"LeagueType\"), \"LeagueType\"),\n    id: types.identifier,\n    leagueName: types.union(types.undefined, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n    franchiseSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => FranchiseTypeModel)))),\n    citySet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => CityTypeModel)))),\n    gmSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => GmTypeModel)))),\n    coachSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => CoachTypeModel)))),\n    playerSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => PlayerTypeModel)))),\n    playerhistorySet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => PlayerHistoryTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class LeagueTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get leagueName() { return this.__attr(`leagueName`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n  franchiseSet(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchiseSet`, FranchiseTypeModelSelector, builder) }\n  citySet(builder?: string | CityTypeModelSelector | ((selector: CityTypeModelSelector) => CityTypeModelSelector)) { return this.__child(`citySet`, CityTypeModelSelector, builder) }\n  gmSet(builder?: string | GmTypeModelSelector | ((selector: GmTypeModelSelector) => GmTypeModelSelector)) { return this.__child(`gmSet`, GmTypeModelSelector, builder) }\n  coachSet(builder?: string | CoachTypeModelSelector | ((selector: CoachTypeModelSelector) => CoachTypeModelSelector)) { return this.__child(`coachSet`, CoachTypeModelSelector, builder) }\n  playerSet(builder?: string | PlayerTypeModelSelector | ((selector: PlayerTypeModelSelector) => PlayerTypeModelSelector)) { return this.__child(`playerSet`, PlayerTypeModelSelector, builder) }\n  playerhistorySet(builder?: string | PlayerHistoryTypeModelSelector | ((selector: PlayerHistoryTypeModelSelector) => PlayerHistoryTypeModelSelector)) { return this.__child(`playerhistorySet`, PlayerHistoryTypeModelSelector, builder) }\n}\nexport function selectFromLeagueType() {\n  return new LeagueTypeModelSelector()\n}\n\nexport const leagueTypeModelPrimitives = selectFromLeagueType().leagueName\n","import {Instance, types} from \"mobx-state-tree\"\nimport {LeagueTypeModelBase} from \"./LeagueTypeModel.base\"\nimport {FranchiseTypeModel, FranchiseTypeModelType} from \"./FranchiseTypeModel\";\nimport {PlayerTypeModelType} from \"./PlayerTypeModel\";\n\n/* The TypeScript type of an instance of LeagueTypeModel */\nexport interface LeagueTypeModelType extends Instance<typeof LeagueTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for LeagueTypeModel */\nexport {selectFromLeagueType, leagueTypeModelPrimitives, LeagueTypeModelSelector} from \"./LeagueTypeModel.base\"\n\n/**\n * LeagueTypeModel\n */\nexport const LeagueTypeModel = LeagueTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        },\n        setDraftingFranchise(franchise: FranchiseTypeModelType) {\n            // @ts-ignore\n            self.draftingFranchise = self.franchise(franchise.franchise)\n        },\n        setSeasonSimCheck(check: boolean) {\n            // @ts-ignore\n            self.seasonSimCheck = check\n        },\n    }))\n    .props({\n        draftingFranchise: types.union(types.undefined, types.reference(types.late(() => FranchiseTypeModel))),\n        seasonSimCheck: types.union(types.undefined, types.boolean)\n    })\n    .views(self => ({\n        franchise(franchiseName: string) {\n            let franchise = self.franchiseSet.find((franchise) => {\n                if (franchise.franchise === franchiseName)\n                    return true;\n            });\n            return franchise\n        },\n        player(playerName: string) {\n            let player = self.playerSet.find((player) => {\n                if (player.name === playerName)\n                    return true;\n            });\n            return player\n        },\n        franchiseplayers(franchiseName: string) {\n            let franchiseplayers = self.playerSet.filter((player) => {\n                if (player.franchise)\n                    if (player.franchise.franchise === franchiseName)\n                        return true;\n            });\n            return franchiseplayers\n        },\n        get draftClass() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1)\n                    return player\n            })\n            return draftClass\n        },\n        get draftClassDrafted() {\n            let draftClassDrafted = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise)\n                    return player\n            }).length\n            return draftClassDrafted\n        },\n        get draftClassRemaining(){\n            let draftClassRemaining = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise == null)\n                    return player\n            }).length\n            return draftClassRemaining\n        },\n        get bestDraftPlayer() {\n            let draftClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year === 1 && player.franchise == null)\n                    return player\n            })\n            let bestDraftPlayer = draftClass.sort(function (a, b) {\n                // @ts-ignore\n                return b.pv - a.pv;\n            })\n            return bestDraftPlayer[0]\n        },\n        get freeAgentClass() {\n            let freeAgentClass = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year !== 1 && player.contract == null)\n                    return player\n            })\n            return freeAgentClass\n        },\n        get freeAgentClassSigned() {\n            let freeAgentClassSigned = self.playerSet.filter((player: PlayerTypeModelType) => {\n                if (player.year !== 1 && player.contract == null && player.franchise)\n                    return player\n            })\n            return freeAgentClassSigned\n        },\n        get draftOrder() {\n            let draftOrder = self.franchiseSet.sort(function (a, b) {\n                // @ts-ignore\n                return a.wins - b.wins;\n            })\n            return draftOrder\n        },\n        get franchisesWithoutGm(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.gm?.trait).filter((trait: any) => trait === undefined)\n        },\n        get franchisesWithoutCoach(){\n            return self.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise.coach?.attributeOne).filter((attributeOne: any) => attributeOne === undefined)\n        },\n    }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { CoachAttributeOneEnumType } from \"./CoachAttributeOneEnum\"\nimport { CoachAttributeTwoEnumType } from \"./CoachAttributeTwoEnum\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  league: LeagueTypeModelType;\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * CoachTypeBase\n * auto generated base class for the model CoachTypeModel.\n */\nexport const CoachTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CoachType')\n  .props({\n    __typename: types.optional(types.literal(\"CoachType\"), \"CoachType\"),\n    id: types.identifier,\n    name: types.union(types.undefined, types.string),\n    attributeOne: types.union(types.undefined, CoachAttributeOneEnumType),\n    attributeTwo: types.union(types.undefined, CoachAttributeTwoEnumType),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CoachTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get name() { return this.__attr(`name`) }\n  get attributeOne() { return this.__attr(`attributeOne`) }\n  get attributeTwo() { return this.__attr(`attributeTwo`) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromCoachType() {\n  return new CoachTypeModelSelector()\n}\n\nexport const coachTypeModelPrimitives = selectFromCoachType().name.attributeOne.attributeTwo\n","import { Instance } from \"mobx-state-tree\"\nimport { CoachTypeModelBase } from \"./CoachTypeModel.base\"\n\n/* The TypeScript type of an instance of CoachTypeModel */\nexport interface CoachTypeModelType extends Instance<typeof CoachTypeModel.Type> {}\n\n/* A graphql query fragment builders for CoachTypeModel */\nexport { selectFromCoachType, coachTypeModelPrimitives, CoachTypeModelSelector } from \"./CoachTypeModel.base\"\n\n/**\n * CoachTypeModel\n */\nexport const CoachTypeModel = CoachTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * SeasonTypeBase\n * auto generated base class for the model SeasonTypeModel.\n */\nexport const SeasonTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('SeasonType')\n  .props({\n    __typename: types.optional(types.literal(\"SeasonType\"), \"SeasonType\"),\n    id: types.identifier,\n    franchise: types.union(types.undefined, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    season: types.union(types.undefined, types.integer),\n    ready: types.union(types.undefined, types.boolean),\n    wins: types.union(types.undefined, types.integer),\n    losses: types.union(types.undefined, types.integer),\n    ppg: types.union(types.undefined, types.number),\n    std: types.union(types.undefined, types.number),\n    championships: types.union(types.undefined, types.integer),\n    bonuses: types.union(types.undefined, types.integer),\n    penalties: types.union(types.undefined, types.integer),\n    fanBase: types.union(types.undefined, types.number),\n    fanIndex: types.union(types.undefined, types.number),\n    advertising: types.union(types.undefined, types.integer),\n    ticketPrice: types.union(types.undefined, types.number),\n    ticketsSold: types.union(types.undefined, types.number),\n    boxPrice: types.union(types.undefined, types.number),\n    boxesSold: types.union(types.undefined, types.number),\n    revenue: types.union(types.undefined, types.number),\n    expenses: types.union(types.undefined, types.number),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class SeasonTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get season() { return this.__attr(`season`) }\n  get ready() { return this.__attr(`ready`) }\n  get wins() { return this.__attr(`wins`) }\n  get losses() { return this.__attr(`losses`) }\n  get ppg() { return this.__attr(`ppg`) }\n  get std() { return this.__attr(`std`) }\n  get championships() { return this.__attr(`championships`) }\n  get bonuses() { return this.__attr(`bonuses`) }\n  get penalties() { return this.__attr(`penalties`) }\n  get fanBase() { return this.__attr(`fanBase`) }\n  get fanIndex() { return this.__attr(`fanIndex`) }\n  get advertising() { return this.__attr(`advertising`) }\n  get ticketPrice() { return this.__attr(`ticketPrice`) }\n  get ticketsSold() { return this.__attr(`ticketsSold`) }\n  get boxPrice() { return this.__attr(`boxPrice`) }\n  get boxesSold() { return this.__attr(`boxesSold`) }\n  get revenue() { return this.__attr(`revenue`) }\n  get expenses() { return this.__attr(`expenses`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromSeasonType() {\n  return new SeasonTypeModelSelector()\n}\n\nexport const seasonTypeModelPrimitives = selectFromSeasonType().season.ready.wins.losses.ppg.std.championships.bonuses.penalties.fanBase.fanIndex.advertising.ticketPrice.ticketsSold.boxPrice.boxesSold.revenue.expenses\n","import { Instance } from \"mobx-state-tree\"\nimport { SeasonTypeModelBase } from \"./SeasonTypeModel.base\"\n\n/* The TypeScript type of an instance of SeasonTypeModel */\nexport interface SeasonTypeModelType extends Instance<typeof SeasonTypeModel.Type> {}\n\n/* A graphql query fragment builders for SeasonTypeModel */\nexport { selectFromSeasonType, seasonTypeModelPrimitives, SeasonTypeModelSelector } from \"./SeasonTypeModel.base\"\n\n/**\n * SeasonTypeModel\n */\nexport const SeasonTypeModel = SeasonTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { IObservableArray } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { ActionTypeModel, ActionTypeModelType } from \"./ActionTypeModel\"\nimport { ActionTypeModelSelector } from \"./ActionTypeModel.base\"\nimport { CoachTypeModel, CoachTypeModelType } from \"./CoachTypeModel\"\nimport { CoachTypeModelSelector } from \"./CoachTypeModel.base\"\nimport { GmTypeModel, GmTypeModelType } from \"./GmTypeModel\"\nimport { GmTypeModelSelector } from \"./GmTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { PlayerTypeModel, PlayerTypeModelType } from \"./PlayerTypeModel\"\nimport { PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\nimport { SeasonTypeModel, SeasonTypeModelType } from \"./SeasonTypeModel\"\nimport { SeasonTypeModelSelector } from \"./SeasonTypeModel.base\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n  league: LeagueTypeModelType;\n  gm: GmTypeModelType;\n  coach: CoachTypeModelType;\n  stadium: StadiumTypeModelType;\n  playerSet: IObservableArray<PlayerTypeModelType>;\n  action: ActionTypeModelType;\n  seasonSet: IObservableArray<SeasonTypeModelType>;\n}\n\n/**\n * FranchiseTypeBase\n * auto generated base class for the model FranchiseTypeModel.\n */\nexport const FranchiseTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('FranchiseType')\n  .props({\n    __typename: types.optional(types.literal(\"FranchiseType\"), \"FranchiseType\"),\n    id: types.identifier,\n    franchise: types.union(types.undefined, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n    league: types.union(types.undefined, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n    gm: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => GmTypeModel))),\n    coach: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => CoachTypeModel))),\n    stadium: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => StadiumTypeModel))),\n    playerSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => PlayerTypeModel)))),\n    action: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => ActionTypeModel))),\n    seasonSet: types.union(types.undefined, types.array(MSTGQLRef(types.late((): any => SeasonTypeModel)))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class FranchiseTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get franchise() { return this.__attr(`franchise`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n  gm(builder?: string | GmTypeModelSelector | ((selector: GmTypeModelSelector) => GmTypeModelSelector)) { return this.__child(`gm`, GmTypeModelSelector, builder) }\n  coach(builder?: string | CoachTypeModelSelector | ((selector: CoachTypeModelSelector) => CoachTypeModelSelector)) { return this.__child(`coach`, CoachTypeModelSelector, builder) }\n  stadium(builder?: string | StadiumTypeModelSelector | ((selector: StadiumTypeModelSelector) => StadiumTypeModelSelector)) { return this.__child(`stadium`, StadiumTypeModelSelector, builder) }\n  playerSet(builder?: string | PlayerTypeModelSelector | ((selector: PlayerTypeModelSelector) => PlayerTypeModelSelector)) { return this.__child(`playerSet`, PlayerTypeModelSelector, builder) }\n  action(builder?: string | ActionTypeModelSelector | ((selector: ActionTypeModelSelector) => ActionTypeModelSelector)) { return this.__child(`action`, ActionTypeModelSelector, builder) }\n  seasonSet(builder?: string | SeasonTypeModelSelector | ((selector: SeasonTypeModelSelector) => SeasonTypeModelSelector)) { return this.__child(`seasonSet`, SeasonTypeModelSelector, builder) }\n}\nexport function selectFromFranchiseType() {\n  return new FranchiseTypeModelSelector()\n}\n\nexport const franchiseTypeModelPrimitives = selectFromFranchiseType().franchise\n","import {Instance} from \"mobx-state-tree\"\nimport {FranchiseTypeModelBase} from \"./FranchiseTypeModel.base\"\nimport {SeasonTypeModelType} from \"./SeasonTypeModel\";\n\n/* The TypeScript type of an instance of FranchiseTypeModel */\nexport interface FranchiseTypeModelType extends Instance<typeof FranchiseTypeModel.Type> {\n}\n\n/* A graphql query fragment builders for FranchiseTypeModel */\nexport {\n    selectFromFranchiseType, franchiseTypeModelPrimitives, FranchiseTypeModelSelector\n}from \"./FranchiseTypeModel.base\"\n\n/**\n * FranchiseTypeModel\n */\nexport const FranchiseTypeModel = FranchiseTypeModelBase\n    .actions(self => ({\n        // This is an auto-generated example action.\n        log() {\n            console.log(JSON.stringify(self))\n        }\n    }))\n    .views(self => ({\n        get suitBonus() {\n            let suitList = self.playerSet.map(function (player, index) {\n                if (player.lineup === \"starter\")\n                    return player.suit;\n            });\n            let spades = suitList.filter(x => x === \"spade\").length\n            let hearts = suitList.filter(x => x === \"heart\").length\n            let diamonds = suitList.filter(x => x === \"diamond\").length\n            let clubs = suitList.filter(x => x === \"club\").length\n\n            let suitBonus = 0\n\n            // spade adjustment\n            if (spades <= 1) {\n                suitBonus += 0\n            } else {\n                suitBonus -= spades * (spades - 1)\n            }\n            // heart adjustment\n            suitBonus += hearts * (5 - hearts)\n            // diamond adjustment\n            if (diamonds > 0) {\n                suitBonus += 2 - (diamonds - 1)\n            }\n            // club adjustment\n            suitBonus += (spades * clubs)\n\n            return suitBonus\n        },\n        get epv() {\n            let epv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.epv;\n            });\n\n            return epv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get sEpv() {\n            let sEpv = self.playerSet.map((player) => {\n                if (player.lineup === \"starter\")\n                    return player.sEpv;\n            });\n\n            return sEpv.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get meanAge() {\n            let ages: any = self.playerSet.map((player) => {\n                return player.age;\n            });\n\n            let meanAge = ages.reduce((accumulator: any, currentValue: any) => ((accumulator || 0) + (currentValue || 0)), 0) / (ages.length)\n\n            return meanAge\n        },\n        get salaries() {\n            let salaries = self.playerSet.map((player) => {\n                return player.salary;\n            });\n\n            return salaries.reduce((accumulator, currentValue) => ((accumulator || 0) + (currentValue || 0)), 0)\n        },\n        get championships() {\n\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].championships\n                : self.seasonSet[self.seasonSet.length - 2].championships\n        },\n        get wins() {\n            return (self.seasonSet.length === 1) ? self.seasonSet[self.seasonSet.length - 1].wins\n                : self.seasonSet[self.seasonSet.length - 2].wins\n        },\n        get lineup() {\n            let lineup = self.playerSet.map((player) => {\n                return player.lineup;\n            });\n            return lineup\n        },\n        get contracts() {\n            let contracts = self.playerSet.map((player) => {\n                return player.contract\n            });\n            return contracts\n        },\n        get starters() {\n            let starters = self.playerSet.filter((player) => {\n                if (player.lineup === \"starter\")\n                    return player;\n            });\n            return starters\n        },\n        get unsignedPlayers() {\n            let unsignedPlayers = self.playerSet.filter((player) => {\n                if (player.contract === null)\n                    return player;\n            });\n            return unsignedPlayers\n        },\n        get unsetPlayers() {\n            let unsetPlayers = self.playerSet.filter((player) => {\n                if (player.lineup === null)\n                    return player;\n            });\n            return unsetPlayers\n        },\n        get profit() {\n            let revenue = self.seasonSet.map((season: SeasonTypeModelType) => season.revenue).reduce((a: any, b: any) => a + b)\n            let expenses = self.seasonSet.map((season: SeasonTypeModelType) => season.expenses).reduce((a: any, b: any) => a + b)\n            // @ts-ignore\n            let profit = revenue - expenses\n            return profit\n        },\n    }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n  league: LeagueTypeModelType;\n}\n\n/**\n * UserTypeBase\n * auto generated base class for the model UserTypeModel.\n */\nexport const UserTypeModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UserType')\n  .props({\n    __typename: types.optional(types.literal(\"UserType\"), \"UserType\"),\n    id: types.identifier,\n    password: types.union(types.undefined, types.string),\n    email: types.union(types.undefined, types.string),\n    username: types.union(types.undefined, types.string),\n    dateJoined: types.union(types.undefined, types.frozen()),\n    lastLogin: types.union(types.undefined, types.frozen()),\n    isAdmin: types.union(types.undefined, types.boolean),\n    isActive: types.union(types.undefined, types.boolean),\n    isStaff: types.union(types.undefined, types.boolean),\n    isSuperuser: types.union(types.undefined, types.boolean),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    league: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => LeagueTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UserTypeModelSelector extends QueryBuilder {\n  get id() { return this.__attr(`id`) }\n  get password() { return this.__attr(`password`) }\n  get email() { return this.__attr(`email`) }\n  get username() { return this.__attr(`username`) }\n  get dateJoined() { return this.__attr(`dateJoined`) }\n  get lastLogin() { return this.__attr(`lastLogin`) }\n  get isAdmin() { return this.__attr(`isAdmin`) }\n  get isActive() { return this.__attr(`isActive`) }\n  get isStaff() { return this.__attr(`isStaff`) }\n  get isSuperuser() { return this.__attr(`isSuperuser`) }\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n  league(builder?: string | LeagueTypeModelSelector | ((selector: LeagueTypeModelSelector) => LeagueTypeModelSelector)) { return this.__child(`league`, LeagueTypeModelSelector, builder) }\n}\nexport function selectFromUserType() {\n  return new UserTypeModelSelector()\n}\n\nexport const userTypeModelPrimitives = selectFromUserType().password.email.username.dateJoined.lastLogin.isAdmin.isActive.isStaff.isSuperuser\n","import { Instance } from \"mobx-state-tree\"\nimport { UserTypeModelBase } from \"./UserTypeModel.base\"\n\n/* The TypeScript type of an instance of UserTypeModel */\nexport interface UserTypeModelType extends Instance<typeof UserTypeModel.Type> {}\n\n/* A graphql query fragment builders for UserTypeModel */\nexport { selectFromUserType, userTypeModelPrimitives, UserTypeModelSelector } from \"./UserTypeModel.base\"\n\n/**\n * UserTypeModel\n */\nexport const UserTypeModel = UserTypeModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n}\n\n/**\n * CreateUserBase\n * auto generated base class for the model CreateUserModel.\n */\nexport const CreateUserModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CreateUser')\n  .props({\n    __typename: types.optional(types.literal(\"CreateUser\"), \"CreateUser\"),\n    message: types.union(types.undefined, types.null, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CreateUserModelSelector extends QueryBuilder {\n  get message() { return this.__attr(`message`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n}\nexport function selectFromCreateUser() {\n  return new CreateUserModelSelector()\n}\n\nexport const createUserModelPrimitives = selectFromCreateUser().message\n","import { Instance } from \"mobx-state-tree\"\nimport { CreateUserModelBase } from \"./CreateUserModel.base\"\n\n/* The TypeScript type of an instance of CreateUserModel */\nexport interface CreateUserModelType extends Instance<typeof CreateUserModel.Type> {}\n\n/* A graphql query fragment builders for CreateUserModel */\nexport { selectFromCreateUser, createUserModelPrimitives, CreateUserModelSelector } from \"./CreateUserModel.base\"\n\n/**\n * CreateUserModel\n */\nexport const CreateUserModel = CreateUserModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n}\n\n/**\n * DeleteUserBase\n * auto generated base class for the model DeleteUserModel.\n */\nexport const DeleteUserModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('DeleteUser')\n  .props({\n    __typename: types.optional(types.literal(\"DeleteUser\"), \"DeleteUser\"),\n    message: types.union(types.undefined, types.null, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class DeleteUserModelSelector extends QueryBuilder {\n  get message() { return this.__attr(`message`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n}\nexport function selectFromDeleteUser() {\n  return new DeleteUserModelSelector()\n}\n\nexport const deleteUserModelPrimitives = selectFromDeleteUser().message\n","import { Instance } from \"mobx-state-tree\"\nimport { DeleteUserModelBase } from \"./DeleteUserModel.base\"\n\n/* The TypeScript type of an instance of DeleteUserModel */\nexport interface DeleteUserModelType extends Instance<typeof DeleteUserModel.Type> {}\n\n/* A graphql query fragment builders for DeleteUserModel */\nexport { selectFromDeleteUser, deleteUserModelPrimitives, DeleteUserModelSelector } from \"./DeleteUserModel.base\"\n\n/**\n * DeleteUserModel\n */\nexport const DeleteUserModel = DeleteUserModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { QueryBuilder } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { RootStoreType } from \"./index\"\n\n\n/**\n * ObtainJsonWebTokenBase\n * auto generated base class for the model ObtainJsonWebTokenModel.\n *\n * Obtain JSON Web Token mutation\n */\nexport const ObtainJsonWebTokenModelBase = ModelBase\n  .named('ObtainJsonWebToken')\n  .props({\n    __typename: types.optional(types.literal(\"ObtainJSONWebToken\"), \"ObtainJSONWebToken\"),\n    payload: types.union(types.undefined, types.frozen()),\n    refreshExpiresIn: types.union(types.undefined, types.integer),\n    token: types.union(types.undefined, types.string),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  }))\n\nexport class ObtainJsonWebTokenModelSelector extends QueryBuilder {\n  get payload() { return this.__attr(`payload`) }\n  get refreshExpiresIn() { return this.__attr(`refreshExpiresIn`) }\n  get token() { return this.__attr(`token`) }\n}\nexport function selectFromObtainJsonWebToken() {\n  return new ObtainJsonWebTokenModelSelector()\n}\n\nexport const obtainJsonWebTokenModelPrimitives = selectFromObtainJsonWebToken().payload.refreshExpiresIn.token\n","import { Instance } from \"mobx-state-tree\"\nimport { ObtainJsonWebTokenModelBase } from \"./ObtainJsonWebTokenModel.base\"\n\n/* The TypeScript type of an instance of ObtainJsonWebTokenModel */\nexport interface ObtainJsonWebTokenModelType extends Instance<typeof ObtainJsonWebTokenModel.Type> {}\n\n/* A graphql query fragment builders for ObtainJsonWebTokenModel */\nexport { selectFromObtainJsonWebToken, obtainJsonWebTokenModelPrimitives, ObtainJsonWebTokenModelSelector } from \"./ObtainJsonWebTokenModel.base\"\n\n/**\n * ObtainJsonWebTokenModel\n *\n * Obtain JSON Web Token mutation\n */\nexport const ObtainJsonWebTokenModel = ObtainJsonWebTokenModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { QueryBuilder } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { RootStoreType } from \"./index\"\n\n\n/**\n * VerifyBase\n * auto generated base class for the model VerifyModel.\n */\nexport const VerifyModelBase = ModelBase\n  .named('Verify')\n  .props({\n    __typename: types.optional(types.literal(\"Verify\"), \"Verify\"),\n    payload: types.union(types.undefined, types.frozen()),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  }))\n\nexport class VerifyModelSelector extends QueryBuilder {\n  get payload() { return this.__attr(`payload`) }\n}\nexport function selectFromVerify() {\n  return new VerifyModelSelector()\n}\n\nexport const verifyModelPrimitives = selectFromVerify().payload\n","import { Instance } from \"mobx-state-tree\"\nimport { VerifyModelBase } from \"./VerifyModel.base\"\n\n/* The TypeScript type of an instance of VerifyModel */\nexport interface VerifyModelType extends Instance<typeof VerifyModel.Type> {}\n\n/* A graphql query fragment builders for VerifyModel */\nexport { selectFromVerify, verifyModelPrimitives, VerifyModelSelector } from \"./VerifyModel.base\"\n\n/**\n * VerifyModel\n */\nexport const VerifyModel = VerifyModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { QueryBuilder } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { RootStoreType } from \"./index\"\n\n\n/**\n * RefreshBase\n * auto generated base class for the model RefreshModel.\n */\nexport const RefreshModelBase = ModelBase\n  .named('Refresh')\n  .props({\n    __typename: types.optional(types.literal(\"Refresh\"), \"Refresh\"),\n    payload: types.union(types.undefined, types.frozen()),\n    refreshExpiresIn: types.union(types.undefined, types.integer),\n    token: types.union(types.undefined, types.string),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  }))\n\nexport class RefreshModelSelector extends QueryBuilder {\n  get payload() { return this.__attr(`payload`) }\n  get refreshExpiresIn() { return this.__attr(`refreshExpiresIn`) }\n  get token() { return this.__attr(`token`) }\n}\nexport function selectFromRefresh() {\n  return new RefreshModelSelector()\n}\n\nexport const refreshModelPrimitives = selectFromRefresh().payload.refreshExpiresIn.token\n","import { Instance } from \"mobx-state-tree\"\nimport { RefreshModelBase } from \"./RefreshModel.base\"\n\n/* The TypeScript type of an instance of RefreshModel */\nexport interface RefreshModelType extends Instance<typeof RefreshModel.Type> {}\n\n/* A graphql query fragment builders for RefreshModel */\nexport { selectFromRefresh, refreshModelPrimitives, RefreshModelSelector } from \"./RefreshModel.base\"\n\n/**\n * RefreshModel\n */\nexport const RefreshModel = RefreshModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  user: UserTypeModelType;\n}\n\n/**\n * CreateLeagueMutationBase\n * auto generated base class for the model CreateLeagueMutationModel.\n */\nexport const CreateLeagueMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CreateLeagueMutation')\n  .props({\n    __typename: types.optional(types.literal(\"CreateLeagueMutation\"), \"CreateLeagueMutation\"),\n    leagueName: types.union(types.undefined, types.null, types.string),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CreateLeagueMutationModelSelector extends QueryBuilder {\n  get leagueName() { return this.__attr(`leagueName`) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n}\nexport function selectFromCreateLeagueMutation() {\n  return new CreateLeagueMutationModelSelector()\n}\n\nexport const createLeagueMutationModelPrimitives = selectFromCreateLeagueMutation().leagueName\n","import { Instance } from \"mobx-state-tree\"\nimport { CreateLeagueMutationModelBase } from \"./CreateLeagueMutationModel.base\"\n\n/* The TypeScript type of an instance of CreateLeagueMutationModel */\nexport interface CreateLeagueMutationModelType extends Instance<typeof CreateLeagueMutationModel.Type> {}\n\n/* A graphql query fragment builders for CreateLeagueMutationModel */\nexport { selectFromCreateLeagueMutation, createLeagueMutationModelPrimitives, CreateLeagueMutationModelSelector } from \"./CreateLeagueMutationModel.base\"\n\n/**\n * CreateLeagueMutationModel\n */\nexport const CreateLeagueMutationModel = CreateLeagueMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n  user: UserTypeModelType;\n}\n\n/**\n * CreateFranchiseMutationBase\n * auto generated base class for the model CreateFranchiseMutationModel.\n */\nexport const CreateFranchiseMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CreateFranchiseMutation')\n  .props({\n    __typename: types.optional(types.literal(\"CreateFranchiseMutation\"), \"CreateFranchiseMutation\"),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n    user: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => UserTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CreateFranchiseMutationModelSelector extends QueryBuilder {\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n  user(builder?: string | UserTypeModelSelector | ((selector: UserTypeModelSelector) => UserTypeModelSelector)) { return this.__child(`user`, UserTypeModelSelector, builder) }\n}\nexport function selectFromCreateFranchiseMutation() {\n  return new CreateFranchiseMutationModelSelector()\n}\n\nexport const createFranchiseMutationModelPrimitives = selectFromCreateFranchiseMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { CreateFranchiseMutationModelBase } from \"./CreateFranchiseMutationModel.base\"\n\n/* The TypeScript type of an instance of CreateFranchiseMutationModel */\nexport interface CreateFranchiseMutationModelType extends Instance<typeof CreateFranchiseMutationModel.Type> {}\n\n/* A graphql query fragment builders for CreateFranchiseMutationModel */\nexport { selectFromCreateFranchiseMutation, createFranchiseMutationModelPrimitives, CreateFranchiseMutationModelSelector } from \"./CreateFranchiseMutationModel.base\"\n\n/**\n * CreateFranchiseMutationModel\n */\nexport const CreateFranchiseMutationModel = CreateFranchiseMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  franchise: FranchiseTypeModelType;\n}\n\n/**\n * UpdateFranchiseMutationBase\n * auto generated base class for the model UpdateFranchiseMutationModel.\n */\nexport const UpdateFranchiseMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UpdateFranchiseMutation')\n  .props({\n    __typename: types.optional(types.literal(\"UpdateFranchiseMutation\"), \"UpdateFranchiseMutation\"),\n    franchise: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => FranchiseTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UpdateFranchiseMutationModelSelector extends QueryBuilder {\n  franchise(builder?: string | FranchiseTypeModelSelector | ((selector: FranchiseTypeModelSelector) => FranchiseTypeModelSelector)) { return this.__child(`franchise`, FranchiseTypeModelSelector, builder) }\n}\nexport function selectFromUpdateFranchiseMutation() {\n  return new UpdateFranchiseMutationModelSelector()\n}\n\nexport const updateFranchiseMutationModelPrimitives = selectFromUpdateFranchiseMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { UpdateFranchiseMutationModelBase } from \"./UpdateFranchiseMutationModel.base\"\n\n/* The TypeScript type of an instance of UpdateFranchiseMutationModel */\nexport interface UpdateFranchiseMutationModelType extends Instance<typeof UpdateFranchiseMutationModel.Type> {}\n\n/* A graphql query fragment builders for UpdateFranchiseMutationModel */\nexport { selectFromUpdateFranchiseMutation, updateFranchiseMutationModelPrimitives, UpdateFranchiseMutationModelSelector } from \"./UpdateFranchiseMutationModel.base\"\n\n/**\n * UpdateFranchiseMutationModel\n */\nexport const UpdateFranchiseMutationModel = UpdateFranchiseMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { PlayerTypeModel, PlayerTypeModelType } from \"./PlayerTypeModel\"\nimport { PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  player: PlayerTypeModelType;\n}\n\n/**\n * UpdatePlayerMutationBase\n * auto generated base class for the model UpdatePlayerMutationModel.\n */\nexport const UpdatePlayerMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UpdatePlayerMutation')\n  .props({\n    __typename: types.optional(types.literal(\"UpdatePlayerMutation\"), \"UpdatePlayerMutation\"),\n    player: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => PlayerTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UpdatePlayerMutationModelSelector extends QueryBuilder {\n  player(builder?: string | PlayerTypeModelSelector | ((selector: PlayerTypeModelSelector) => PlayerTypeModelSelector)) { return this.__child(`player`, PlayerTypeModelSelector, builder) }\n}\nexport function selectFromUpdatePlayerMutation() {\n  return new UpdatePlayerMutationModelSelector()\n}\n\nexport const updatePlayerMutationModelPrimitives = selectFromUpdatePlayerMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { UpdatePlayerMutationModelBase } from \"./UpdatePlayerMutationModel.base\"\n\n/* The TypeScript type of an instance of UpdatePlayerMutationModel */\nexport interface UpdatePlayerMutationModelType extends Instance<typeof UpdatePlayerMutationModel.Type> {}\n\n/* A graphql query fragment builders for UpdatePlayerMutationModel */\nexport { selectFromUpdatePlayerMutation, updatePlayerMutationModelPrimitives, UpdatePlayerMutationModelSelector } from \"./UpdatePlayerMutationModel.base\"\n\n/**\n * UpdatePlayerMutationModel\n */\nexport const UpdatePlayerMutationModel = UpdatePlayerMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { ActionTypeModel, ActionTypeModelType } from \"./ActionTypeModel\"\nimport { ActionTypeModelSelector } from \"./ActionTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  action: ActionTypeModelType;\n}\n\n/**\n * UpdateActionMutationBase\n * auto generated base class for the model UpdateActionMutationModel.\n */\nexport const UpdateActionMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UpdateActionMutation')\n  .props({\n    __typename: types.optional(types.literal(\"UpdateActionMutation\"), \"UpdateActionMutation\"),\n    action: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => ActionTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UpdateActionMutationModelSelector extends QueryBuilder {\n  action(builder?: string | ActionTypeModelSelector | ((selector: ActionTypeModelSelector) => ActionTypeModelSelector)) { return this.__child(`action`, ActionTypeModelSelector, builder) }\n}\nexport function selectFromUpdateActionMutation() {\n  return new UpdateActionMutationModelSelector()\n}\n\nexport const updateActionMutationModelPrimitives = selectFromUpdateActionMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { UpdateActionMutationModelBase } from \"./UpdateActionMutationModel.base\"\n\n/* The TypeScript type of an instance of UpdateActionMutationModel */\nexport interface UpdateActionMutationModelType extends Instance<typeof UpdateActionMutationModel.Type> {}\n\n/* A graphql query fragment builders for UpdateActionMutationModel */\nexport { selectFromUpdateActionMutation, updateActionMutationModelPrimitives, UpdateActionMutationModelSelector } from \"./UpdateActionMutationModel.base\"\n\n/**\n * UpdateActionMutationModel\n */\nexport const UpdateActionMutationModel = UpdateActionMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { SeasonTypeModel, SeasonTypeModelType } from \"./SeasonTypeModel\"\nimport { SeasonTypeModelSelector } from \"./SeasonTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  season: SeasonTypeModelType;\n}\n\n/**\n * UpdateSeasonMutationBase\n * auto generated base class for the model UpdateSeasonMutationModel.\n */\nexport const UpdateSeasonMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UpdateSeasonMutation')\n  .props({\n    __typename: types.optional(types.literal(\"UpdateSeasonMutation\"), \"UpdateSeasonMutation\"),\n    season: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => SeasonTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UpdateSeasonMutationModelSelector extends QueryBuilder {\n  season(builder?: string | SeasonTypeModelSelector | ((selector: SeasonTypeModelSelector) => SeasonTypeModelSelector)) { return this.__child(`season`, SeasonTypeModelSelector, builder) }\n}\nexport function selectFromUpdateSeasonMutation() {\n  return new UpdateSeasonMutationModelSelector()\n}\n\nexport const updateSeasonMutationModelPrimitives = selectFromUpdateSeasonMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { UpdateSeasonMutationModelBase } from \"./UpdateSeasonMutationModel.base\"\n\n/* The TypeScript type of an instance of UpdateSeasonMutationModel */\nexport interface UpdateSeasonMutationModelType extends Instance<typeof UpdateSeasonMutationModel.Type> {}\n\n/* A graphql query fragment builders for UpdateSeasonMutationModel */\nexport { selectFromUpdateSeasonMutation, updateSeasonMutationModelPrimitives, UpdateSeasonMutationModelSelector } from \"./UpdateSeasonMutationModel.base\"\n\n/**\n * UpdateSeasonMutationModel\n */\nexport const UpdateSeasonMutationModel = UpdateSeasonMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  stadium: StadiumTypeModelType;\n}\n\n/**\n * CreateStadiumMutationBase\n * auto generated base class for the model CreateStadiumMutationModel.\n */\nexport const CreateStadiumMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('CreateStadiumMutation')\n  .props({\n    __typename: types.optional(types.literal(\"CreateStadiumMutation\"), \"CreateStadiumMutation\"),\n    stadium: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => StadiumTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class CreateStadiumMutationModelSelector extends QueryBuilder {\n  stadium(builder?: string | StadiumTypeModelSelector | ((selector: StadiumTypeModelSelector) => StadiumTypeModelSelector)) { return this.__child(`stadium`, StadiumTypeModelSelector, builder) }\n}\nexport function selectFromCreateStadiumMutation() {\n  return new CreateStadiumMutationModelSelector()\n}\n\nexport const createStadiumMutationModelPrimitives = selectFromCreateStadiumMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { CreateStadiumMutationModelBase } from \"./CreateStadiumMutationModel.base\"\n\n/* The TypeScript type of an instance of CreateStadiumMutationModel */\nexport interface CreateStadiumMutationModelType extends Instance<typeof CreateStadiumMutationModel.Type> {}\n\n/* A graphql query fragment builders for CreateStadiumMutationModel */\nexport { selectFromCreateStadiumMutation, createStadiumMutationModelPrimitives, CreateStadiumMutationModelSelector } from \"./CreateStadiumMutationModel.base\"\n\n/**\n * CreateStadiumMutationModel\n */\nexport const CreateStadiumMutationModel = CreateStadiumMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLRef, QueryBuilder, withTypedRefs } from \"mst-gql\"\nimport { ModelBase } from \"./ModelBase\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { RootStoreType } from \"./index\"\n\n\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  stadium: StadiumTypeModelType;\n}\n\n/**\n * UpdateStadiumMutationBase\n * auto generated base class for the model UpdateStadiumMutationModel.\n */\nexport const UpdateStadiumMutationModelBase = withTypedRefs<Refs>()(ModelBase\n  .named('UpdateStadiumMutation')\n  .props({\n    __typename: types.optional(types.literal(\"UpdateStadiumMutation\"), \"UpdateStadiumMutation\"),\n    stadium: types.union(types.undefined, types.null, MSTGQLRef(types.late((): any => StadiumTypeModel))),\n  })\n  .views(self => ({\n    get store() {\n      return self.__getStore<RootStoreType>()\n    }\n  })))\n\nexport class UpdateStadiumMutationModelSelector extends QueryBuilder {\n  stadium(builder?: string | StadiumTypeModelSelector | ((selector: StadiumTypeModelSelector) => StadiumTypeModelSelector)) { return this.__child(`stadium`, StadiumTypeModelSelector, builder) }\n}\nexport function selectFromUpdateStadiumMutation() {\n  return new UpdateStadiumMutationModelSelector()\n}\n\nexport const updateStadiumMutationModelPrimitives = selectFromUpdateStadiumMutation()\n","import { Instance } from \"mobx-state-tree\"\nimport { UpdateStadiumMutationModelBase } from \"./UpdateStadiumMutationModel.base\"\n\n/* The TypeScript type of an instance of UpdateStadiumMutationModel */\nexport interface UpdateStadiumMutationModelType extends Instance<typeof UpdateStadiumMutationModel.Type> {}\n\n/* A graphql query fragment builders for UpdateStadiumMutationModel */\nexport { selectFromUpdateStadiumMutation, updateStadiumMutationModelPrimitives, UpdateStadiumMutationModelSelector } from \"./UpdateStadiumMutationModel.base\"\n\n/**\n * UpdateStadiumMutationModel\n */\nexport const UpdateStadiumMutationModel = UpdateStadiumMutationModelBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    }\n  }))\n","import {Instance, types} from \"mobx-state-tree\"\nimport { RootStoreBase } from \"./RootStore.base\"\nimport {UserTypeModel} from \"./UserTypeModel\";\nimport {FranchiseTypeModel} from \"./FranchiseTypeModel\";\n\nexport interface RootStoreType extends Instance<typeof RootStore.Type> {}\n\nexport const RootStore = RootStoreBase\n  .actions(self => ({\n    // This is an auto-generated example action.\n    log() {\n      console.log(JSON.stringify(self))\n    },\n  // draft_mutation(player: any, franchiseId: string) {\n  //       self.mutateRosterUpdate({\n  //       \"rosterInput\": {\n\t// \t\"playerId\": player.id,\n\t// \t\"franchiseId\": franchiseId,\n  //       \"lineup\": 'bench'\n\t//     }\n  //     })\n  //   }\n  }))\n  .props({\n    User: types.union(\n      types.undefined,\n      types.null,\n      types.reference(types.late((): any => UserTypeModel)),\n    ),\n    isLoggedIn: types.optional(\n      types.boolean,\n      false,\n    ),\n  })\n  .actions((self) => ({\n      setUser(email: string) {\n      const query = self.queryUser(\n              {email: email},\n              `\n__typename\n    id\n    email\n    username\n    league{\n      __typename\n      id\n      leagueName\n    }\n    franchise{\n      __typename\n      id\n      gm{\n        __typename\n        id\n        trait\n      }\n      coach{\n        __typename\n        id\n        name\n        attributeOne\n        attributeTwo\n      }\n      stadium{\n        __typename\n        id\n        stadiumName\n        seats\n        boxes\n        grade\n        maxGrade\n        homeFieldAdvantage\n        city{\n          __typename\n          id\n          city\n          cityValue\n        }\n        franchise{\n          __typename\n          id\n          franchise\n        }\n      }\n      playerSet{\n        __typename\n        id\n        name\n        suit\n        age\n        pv\n        epv\n        sEpv\n        contract\n        tOption\n        pOption\n        renew\n        salary\n        grade\n        trainer\n        franchise{\n          __typename\n          id\n          franchise\n        }\n        lineup\n      }\n      action{\n        __typename\n        id\n        numberOfActions\n        improvedBathrooms\n        improvedConcessions\n        jumbotron\n        upscaleBar\n        hallOfFame\n        improvedSeating\n        improvedSound\n        partyDeck\n        wiFi\n        fanNight\n        familyGame\n        doorPrizes\n        mvpNight\n        paradeOfChampions\n        bribeTheRefs\n        easyRuns\n        fanFactor\n        trainPlayer\n        farmSystem\n        fanFavourites\n        gourmetRestaurant\n        beerGarden\n        namingRights\n        eventPlanning\n      }\n      stadium{\n        __typename\n        id\n        city{\n          __typename\n          id\n        }\n        franchise{\n          __typename\n          id\n        }\n        stadiumName\n        seats\n        boxes\n        grade\n        maxGrade\n        homeFieldAdvantage\n      }\n      seasonSet{\n        __typename\n        id\n        franchise{\n          __typename\n          id\n        }\n        season\n        ready\n        wins\n        losses\n        ppg\n        std\n        championships\n        bonuses\n        penalties\n        fanBase\n        fanIndex\n        advertising\n        revenue\n        expenses\n      }\n      league{\n        __typename\n        id\n        leagueName\n        franchiseSet{\n          __typename\n          id\n          franchise\n          gm{\n            __typename\n            id\n            trait\n          }\n          coach{\n            __typename\n            id\n            name\n            attributeOne\n            attributeTwo\n          }\n          playerSet{\n            __typename\n            id\n            name\n          suit\n          age\n          pv\n          epv\n          sEpv\n          contract\n          tOption\n          pOption\n          renew\n          salary\n          grade\n          trainer\n          franchise{\n            __typename\n            id\n          }\n          lineup\n          }\n        seasonSet{\n          __typename\n          id\n          franchise{\n            __typename\n            id\n          }\n          season\n          ready\n          wins\n          losses\n          ppg\n          std\n          championships\n          bonuses\n          penalties\n          fanBase\n          fanIndex\n          advertising\n          revenue\n          expenses\n        }\n        stadium{\n          __typename\n          id\n          stadiumName\n          seats\n          boxes\n          grade\n          maxGrade\n          homeFieldAdvantage\n          city{\n            __typename\n            id\n            city\n            cityValue\n            }\n          }\n        }\n        citySet{\n          __typename\n          id\n          city\n          cityValue\n          league{\n            __typename\n            id\n          }\n          stadiumSet{\n            __typename\n            id\n            city{\n              __typename\n              id\n            }\n            franchise{\n              __typename\n              id\n            }\n            stadiumName\n            seats\n            boxes\n            grade\n            maxGrade\n            homeFieldAdvantage\n          }\n        }\n        playerSet{\n          __typename\n          id\n          name\n          suit\n          age\n          pv\n          epv\n          sEpv\n          contract\n          tOption\n          pOption\n          renew\n          salary\n          grade\n          trainer\n          franchise{\n            __typename\n            id\n            franchise\n          }\n          lineup\n        }\n        gmSet{\n          __typename\n          id\n          trait\n        }\n        coachSet{\n          __typename\n          id\n          name\n          attributeOne\n          attributeTwo\n        }\n      }\n    }\n    `,\n      {fetchPolicy: \"cache-and-network\"},\n          ).then((data) => self.User! = self.userTypes!.get(data!.user!.id!))\n  return query\n      },\n    setIsLoggedIn(loggedIn: boolean) {\n            self.isLoggedIn = loggedIn\n        },\n  }))\n\n\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\nimport { ObservableMap } from \"mobx\"\nimport { types } from \"mobx-state-tree\"\nimport { MSTGQLStore, configureStoreMixin, QueryOptions, withTypedRefs } from \"mst-gql\"\n\nimport { UserTypeModel, UserTypeModelType } from \"./UserTypeModel\"\nimport { userTypeModelPrimitives, UserTypeModelSelector } from \"./UserTypeModel.base\"\nimport { FranchiseTypeModel, FranchiseTypeModelType } from \"./FranchiseTypeModel\"\nimport { franchiseTypeModelPrimitives, FranchiseTypeModelSelector } from \"./FranchiseTypeModel.base\"\nimport { LeagueTypeModel, LeagueTypeModelType } from \"./LeagueTypeModel\"\nimport { leagueTypeModelPrimitives, LeagueTypeModelSelector } from \"./LeagueTypeModel.base\"\nimport { CityTypeModel, CityTypeModelType } from \"./CityTypeModel\"\nimport { cityTypeModelPrimitives, CityTypeModelSelector } from \"./CityTypeModel.base\"\nimport { StadiumTypeModel, StadiumTypeModelType } from \"./StadiumTypeModel\"\nimport { stadiumTypeModelPrimitives, StadiumTypeModelSelector } from \"./StadiumTypeModel.base\"\nimport { GmTypeModel, GmTypeModelType } from \"./GmTypeModel\"\nimport { gmTypeModelPrimitives, GmTypeModelSelector } from \"./GmTypeModel.base\"\nimport { CoachTypeModel, CoachTypeModelType } from \"./CoachTypeModel\"\nimport { coachTypeModelPrimitives, CoachTypeModelSelector } from \"./CoachTypeModel.base\"\nimport { PlayerTypeModel, PlayerTypeModelType } from \"./PlayerTypeModel\"\nimport { playerTypeModelPrimitives, PlayerTypeModelSelector } from \"./PlayerTypeModel.base\"\nimport { PlayerHistoryTypeModel, PlayerHistoryTypeModelType } from \"./PlayerHistoryTypeModel\"\nimport { playerHistoryTypeModelPrimitives, PlayerHistoryTypeModelSelector } from \"./PlayerHistoryTypeModel.base\"\nimport { ActionTypeModel, ActionTypeModelType } from \"./ActionTypeModel\"\nimport { actionTypeModelPrimitives, ActionTypeModelSelector } from \"./ActionTypeModel.base\"\nimport { SeasonTypeModel, SeasonTypeModelType } from \"./SeasonTypeModel\"\nimport { seasonTypeModelPrimitives, SeasonTypeModelSelector } from \"./SeasonTypeModel.base\"\nimport { CreateUserModel, CreateUserModelType } from \"./CreateUserModel\"\nimport { createUserModelPrimitives, CreateUserModelSelector } from \"./CreateUserModel.base\"\nimport { DeleteUserModel, DeleteUserModelType } from \"./DeleteUserModel\"\nimport { deleteUserModelPrimitives, DeleteUserModelSelector } from \"./DeleteUserModel.base\"\nimport { ObtainJsonWebTokenModel, ObtainJsonWebTokenModelType } from \"./ObtainJsonWebTokenModel\"\nimport { obtainJsonWebTokenModelPrimitives, ObtainJsonWebTokenModelSelector } from \"./ObtainJsonWebTokenModel.base\"\nimport { VerifyModel, VerifyModelType } from \"./VerifyModel\"\nimport { verifyModelPrimitives, VerifyModelSelector } from \"./VerifyModel.base\"\nimport { RefreshModel, RefreshModelType } from \"./RefreshModel\"\nimport { refreshModelPrimitives, RefreshModelSelector } from \"./RefreshModel.base\"\nimport { CreateLeagueMutationModel, CreateLeagueMutationModelType } from \"./CreateLeagueMutationModel\"\nimport { createLeagueMutationModelPrimitives, CreateLeagueMutationModelSelector } from \"./CreateLeagueMutationModel.base\"\nimport { CreateFranchiseMutationModel, CreateFranchiseMutationModelType } from \"./CreateFranchiseMutationModel\"\nimport { createFranchiseMutationModelPrimitives, CreateFranchiseMutationModelSelector } from \"./CreateFranchiseMutationModel.base\"\nimport { UpdateFranchiseMutationModel, UpdateFranchiseMutationModelType } from \"./UpdateFranchiseMutationModel\"\nimport { updateFranchiseMutationModelPrimitives, UpdateFranchiseMutationModelSelector } from \"./UpdateFranchiseMutationModel.base\"\nimport { UpdatePlayerMutationModel, UpdatePlayerMutationModelType } from \"./UpdatePlayerMutationModel\"\nimport { updatePlayerMutationModelPrimitives, UpdatePlayerMutationModelSelector } from \"./UpdatePlayerMutationModel.base\"\nimport { UpdateActionMutationModel, UpdateActionMutationModelType } from \"./UpdateActionMutationModel\"\nimport { updateActionMutationModelPrimitives, UpdateActionMutationModelSelector } from \"./UpdateActionMutationModel.base\"\nimport { UpdateSeasonMutationModel, UpdateSeasonMutationModelType } from \"./UpdateSeasonMutationModel\"\nimport { updateSeasonMutationModelPrimitives, UpdateSeasonMutationModelSelector } from \"./UpdateSeasonMutationModel.base\"\nimport { CreateStadiumMutationModel, CreateStadiumMutationModelType } from \"./CreateStadiumMutationModel\"\nimport { createStadiumMutationModelPrimitives, CreateStadiumMutationModelSelector } from \"./CreateStadiumMutationModel.base\"\nimport { UpdateStadiumMutationModel, UpdateStadiumMutationModelType } from \"./UpdateStadiumMutationModel\"\nimport { updateStadiumMutationModelPrimitives, UpdateStadiumMutationModelSelector } from \"./UpdateStadiumMutationModel.base\"\n\n\nimport { GmTrait } from \"./GmTraitEnum\"\nimport { CoachAttributeOne } from \"./CoachAttributeOneEnum\"\nimport { CoachAttributeTwo } from \"./CoachAttributeTwoEnum\"\nimport { PlayerHistorySuit } from \"./PlayerHistorySuitEnum\"\n\nexport type FranchiseInput = {\n  franchise: string\n  gmId?: string\n  coachId?: string\n}\nexport type PlayerInput = {\n  name: string\n  suit: string\n  age: number\n  pv: number\n  epv: number\n  sEpv: number\n  contract?: number\n  tOption?: number\n  pOption?: number\n  renew?: string\n  salary?: number\n  grade?: number\n  trainer?: boolean\n  year?: number\n  lineup?: string\n  franchiseId?: string\n  leagueId: string\n}\nexport type ActionInput = {\n  numberOfActions?: number\n  improvedBathrooms?: boolean\n  improvedConcessions?: boolean\n  jumbotron?: boolean\n  upscaleBar?: boolean\n  hallOfFame?: boolean\n  improvedSeating?: boolean\n  improvedSound?: boolean\n  partyDeck?: boolean\n  wiFi?: boolean\n  fanNight?: boolean\n  familyGame?: boolean\n  doorPrizes?: boolean\n  mvpNight?: boolean\n  paradeOfChampions?: boolean\n  bribeTheRefs?: boolean\n  easyRuns?: boolean\n  fanFactor?: boolean\n  trainPlayer?: number\n  farmSystem?: boolean\n  fanFavourites?: boolean\n  gourmetRestaurant?: boolean\n  beerGarden?: boolean\n  namingRights?: boolean\n  eventPlanning?: boolean\n  franchiseId?: string\n}\nexport type SeasonInput = {\n  franchiseId?: string\n  season: number\n  ready?: boolean\n  wins?: number\n  losses?: number\n  ppg?: number\n  std?: number\n  championships?: number\n  bonuses?: number\n  penalties?: number\n  fanBase?: number\n  fanIndex?: number\n  advertising?: number\n  ticketPrice?: number\n  ticketsSold?: number\n  boxPrice?: number\n  boxesSold?: number\n  revenue?: number\n  expenses?: number\n}\nexport type StadiumInput = {\n  stadiumName?: string\n  seats?: number\n  boxes?: number\n  grade?: number\n  maxGrade?: number\n  homeFieldAdvantage?: number\n  cityId?: string\n  franchiseId?: string\n}\n/* The TypeScript type that explicits the refs to other models in order to prevent a circular refs issue */\ntype Refs = {\n  userTypes: ObservableMap<string, UserTypeModelType>,\n  franchiseTypes: ObservableMap<string, FranchiseTypeModelType>,\n  leagueTypes: ObservableMap<string, LeagueTypeModelType>,\n  cityTypes: ObservableMap<string, CityTypeModelType>,\n  stadiumTypes: ObservableMap<string, StadiumTypeModelType>,\n  gmTypes: ObservableMap<string, GmTypeModelType>,\n  coachTypes: ObservableMap<string, CoachTypeModelType>,\n  playerTypes: ObservableMap<string, PlayerTypeModelType>,\n  playerHistoryTypes: ObservableMap<string, PlayerHistoryTypeModelType>,\n  actionTypes: ObservableMap<string, ActionTypeModelType>,\n  seasonTypes: ObservableMap<string, SeasonTypeModelType>\n}\n\n\n/**\n* Enums for the names of base graphql actions\n*/\nexport enum RootStoreBaseQueries {\nqueryAllUser=\"queryAllUser\",\nqueryAllFranchise=\"queryAllFranchise\",\nqueryAllLeague=\"queryAllLeague\",\nqueryAllCity=\"queryAllCity\",\nqueryAllStadium=\"queryAllStadium\",\nqueryAllGm=\"queryAllGm\",\nqueryAllCoach=\"queryAllCoach\",\nqueryAllPlayer=\"queryAllPlayer\",\nqueryAllAction=\"queryAllAction\",\nqueryAllSeason=\"queryAllSeason\",\nqueryPlayer=\"queryPlayer\",\nqueryUser=\"queryUser\",\nqueryLeague=\"queryLeague\"\n}\nexport enum RootStoreBaseMutations {\nmutateCreateUser=\"mutateCreateUser\",\nmutateDeleteUser=\"mutateDeleteUser\",\nmutateTokenAuth=\"mutateTokenAuth\",\nmutateVerifyToken=\"mutateVerifyToken\",\nmutateRefreshToken=\"mutateRefreshToken\",\nmutateCreateLeague=\"mutateCreateLeague\",\nmutateCreateFranchise=\"mutateCreateFranchise\",\nmutateUpdateFranchise=\"mutateUpdateFranchise\",\nmutateCreatePlayer=\"mutateCreatePlayer\",\nmutateUpdateAction=\"mutateUpdateAction\",\nmutateUpdateSeason=\"mutateUpdateSeason\",\nmutateCreateStadium=\"mutateCreateStadium\",\nmutateUpdateStadium=\"mutateUpdateStadium\"\n}\n\n/**\n* Store, managing, among others, all the objects received through graphQL\n*/\nexport const RootStoreBase = withTypedRefs<Refs>()(MSTGQLStore\n  .named(\"RootStore\")\n  .extend(configureStoreMixin([['UserType', () => UserTypeModel], ['FranchiseType', () => FranchiseTypeModel], ['LeagueType', () => LeagueTypeModel], ['CityType', () => CityTypeModel], ['StadiumType', () => StadiumTypeModel], ['GMType', () => GmTypeModel], ['CoachType', () => CoachTypeModel], ['PlayerType', () => PlayerTypeModel], ['PlayerHistoryType', () => PlayerHistoryTypeModel], ['ActionType', () => ActionTypeModel], ['SeasonType', () => SeasonTypeModel], ['CreateUser', () => CreateUserModel], ['DeleteUser', () => DeleteUserModel], ['ObtainJSONWebToken', () => ObtainJsonWebTokenModel], ['Verify', () => VerifyModel], ['Refresh', () => RefreshModel], ['CreateLeagueMutation', () => CreateLeagueMutationModel], ['CreateFranchiseMutation', () => CreateFranchiseMutationModel], ['UpdateFranchiseMutation', () => UpdateFranchiseMutationModel], ['UpdatePlayerMutation', () => UpdatePlayerMutationModel], ['UpdateActionMutation', () => UpdateActionMutationModel], ['UpdateSeasonMutation', () => UpdateSeasonMutationModel], ['CreateStadiumMutation', () => CreateStadiumMutationModel], ['UpdateStadiumMutation', () => UpdateStadiumMutationModel]], ['UserType', 'FranchiseType', 'LeagueType', 'CityType', 'StadiumType', 'GMType', 'CoachType', 'PlayerType', 'PlayerHistoryType', 'ActionType', 'SeasonType'], \"js\"))\n  .props({\n    userTypes: types.optional(types.map(types.late((): any => UserTypeModel)), {}),\n    franchiseTypes: types.optional(types.map(types.late((): any => FranchiseTypeModel)), {}),\n    leagueTypes: types.optional(types.map(types.late((): any => LeagueTypeModel)), {}),\n    cityTypes: types.optional(types.map(types.late((): any => CityTypeModel)), {}),\n    stadiumTypes: types.optional(types.map(types.late((): any => StadiumTypeModel)), {}),\n    gmTypes: types.optional(types.map(types.late((): any => GmTypeModel)), {}),\n    coachTypes: types.optional(types.map(types.late((): any => CoachTypeModel)), {}),\n    playerTypes: types.optional(types.map(types.late((): any => PlayerTypeModel)), {}),\n    playerHistoryTypes: types.optional(types.map(types.late((): any => PlayerHistoryTypeModel)), {}),\n    actionTypes: types.optional(types.map(types.late((): any => ActionTypeModel)), {}),\n    seasonTypes: types.optional(types.map(types.late((): any => SeasonTypeModel)), {})\n  })\n  .actions(self => ({\n    queryAllUser(variables?: {  }, resultSelector: string | ((qb: UserTypeModelSelector) => UserTypeModelSelector) = userTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allUser: UserTypeModelType[]}>(`query allUser { allUser {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UserTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllFranchise(variables?: {  }, resultSelector: string | ((qb: FranchiseTypeModelSelector) => FranchiseTypeModelSelector) = franchiseTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allFranchise: FranchiseTypeModelType[]}>(`query allFranchise { allFranchise {\n        ${typeof resultSelector === \"function\" ? resultSelector(new FranchiseTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllLeague(variables?: {  }, resultSelector: string | ((qb: LeagueTypeModelSelector) => LeagueTypeModelSelector) = leagueTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allLeague: LeagueTypeModelType[]}>(`query allLeague { allLeague {\n        ${typeof resultSelector === \"function\" ? resultSelector(new LeagueTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllCity(variables?: {  }, resultSelector: string | ((qb: CityTypeModelSelector) => CityTypeModelSelector) = cityTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allCity: CityTypeModelType[]}>(`query allCity { allCity {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CityTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllStadium(variables?: {  }, resultSelector: string | ((qb: StadiumTypeModelSelector) => StadiumTypeModelSelector) = stadiumTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allStadium: StadiumTypeModelType[]}>(`query allStadium { allStadium {\n        ${typeof resultSelector === \"function\" ? resultSelector(new StadiumTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllGm(variables?: {  }, resultSelector: string | ((qb: GmTypeModelSelector) => GmTypeModelSelector) = gmTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allGm: GmTypeModelType[]}>(`query allGm { allGm {\n        ${typeof resultSelector === \"function\" ? resultSelector(new GmTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllCoach(variables?: {  }, resultSelector: string | ((qb: CoachTypeModelSelector) => CoachTypeModelSelector) = coachTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allCoach: CoachTypeModelType[]}>(`query allCoach { allCoach {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CoachTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllPlayer(variables?: {  }, resultSelector: string | ((qb: PlayerTypeModelSelector) => PlayerTypeModelSelector) = playerTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allPlayer: PlayerTypeModelType[]}>(`query allPlayer { allPlayer {\n        ${typeof resultSelector === \"function\" ? resultSelector(new PlayerTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllAction(variables?: {  }, resultSelector: string | ((qb: ActionTypeModelSelector) => ActionTypeModelSelector) = actionTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allAction: ActionTypeModelType[]}>(`query allAction { allAction {\n        ${typeof resultSelector === \"function\" ? resultSelector(new ActionTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryAllSeason(variables?: {  }, resultSelector: string | ((qb: SeasonTypeModelSelector) => SeasonTypeModelSelector) = seasonTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ allSeason: SeasonTypeModelType[]}>(`query allSeason { allSeason {\n        ${typeof resultSelector === \"function\" ? resultSelector(new SeasonTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryPlayer(variables?: {  }, resultSelector: string | ((qb: PlayerTypeModelSelector) => PlayerTypeModelSelector) = playerTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ player: PlayerTypeModelType}>(`query player { player {\n        ${typeof resultSelector === \"function\" ? resultSelector(new PlayerTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryUser(variables: { email?: string }, resultSelector: string | ((qb: UserTypeModelSelector) => UserTypeModelSelector) = userTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ user: UserTypeModelType}>(`query user($email: String) { user(email: $email) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UserTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    queryLeague(variables: { leagueName?: string }, resultSelector: string | ((qb: LeagueTypeModelSelector) => LeagueTypeModelSelector) = leagueTypeModelPrimitives.toString(), options: QueryOptions = {}) {\n      return self.query<{ league: LeagueTypeModelType}>(`query league($leagueName: String) { league(leagueName: $leagueName) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new LeagueTypeModelSelector()).toString() : resultSelector}\n      } }`, variables, options)\n    },\n    mutateCreateUser(variables: { email: string, password: string, username?: string }, resultSelector: string | ((qb: CreateUserModelSelector) => CreateUserModelSelector) = createUserModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ createUser: CreateUserModelType}>(`mutation createUser($email: String!, $password: String!, $username: String) { createUser(email: $email, password: $password, username: $username) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CreateUserModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateDeleteUser(variables: { email: string }, resultSelector: string | ((qb: DeleteUserModelSelector) => DeleteUserModelSelector) = deleteUserModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ deleteUser: DeleteUserModelType}>(`mutation deleteUser($email: String!) { deleteUser(email: $email) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new DeleteUserModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    // Obtain JSON Web Token mutation\n    mutateTokenAuth(variables: { email: string, password: string }, resultSelector: string | ((qb: ObtainJsonWebTokenModelSelector) => ObtainJsonWebTokenModelSelector) = obtainJsonWebTokenModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ tokenAuth: ObtainJsonWebTokenModelType}>(`mutation tokenAuth($email: String!, $password: String!) { tokenAuth(email: $email, password: $password) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new ObtainJsonWebTokenModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateVerifyToken(variables: { token?: string }, resultSelector: string | ((qb: VerifyModelSelector) => VerifyModelSelector) = verifyModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ verifyToken: VerifyModelType}>(`mutation verifyToken($token: String) { verifyToken(token: $token) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new VerifyModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateRefreshToken(variables: { token?: string }, resultSelector: string | ((qb: RefreshModelSelector) => RefreshModelSelector) = refreshModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ refreshToken: RefreshModelType}>(`mutation refreshToken($token: String) { refreshToken(token: $token) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new RefreshModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateCreateLeague(variables: { email: string, leagueName: string }, resultSelector: string | ((qb: CreateLeagueMutationModelSelector) => CreateLeagueMutationModelSelector) = createLeagueMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ createLeague: CreateLeagueMutationModelType}>(`mutation createLeague($email: String!, $leagueName: String!) { createLeague(email: $email, leagueName: $leagueName) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CreateLeagueMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateCreateFranchise(variables: { email: string, franchiseInput: FranchiseInput }, resultSelector: string | ((qb: CreateFranchiseMutationModelSelector) => CreateFranchiseMutationModelSelector) = createFranchiseMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ createFranchise: CreateFranchiseMutationModelType}>(`mutation createFranchise($email: String!, $franchiseInput: FranchiseInput!) { createFranchise(email: $email, franchiseInput: $franchiseInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CreateFranchiseMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateUpdateFranchise(variables: { franchiseInput: FranchiseInput }, resultSelector: string | ((qb: UpdateFranchiseMutationModelSelector) => UpdateFranchiseMutationModelSelector) = updateFranchiseMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ updateFranchise: UpdateFranchiseMutationModelType}>(`mutation updateFranchise($franchiseInput: FranchiseInput!) { updateFranchise(franchiseInput: $franchiseInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UpdateFranchiseMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateCreatePlayer(variables: { playerInput: PlayerInput }, resultSelector: string | ((qb: UpdatePlayerMutationModelSelector) => UpdatePlayerMutationModelSelector) = updatePlayerMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ createPlayer: UpdatePlayerMutationModelType}>(`mutation createPlayer($playerInput: PlayerInput!) { createPlayer(playerInput: $playerInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UpdatePlayerMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateUpdateAction(variables: { actionInput: ActionInput }, resultSelector: string | ((qb: UpdateActionMutationModelSelector) => UpdateActionMutationModelSelector) = updateActionMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ updateAction: UpdateActionMutationModelType}>(`mutation updateAction($actionInput: ActionInput!) { updateAction(actionInput: $actionInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UpdateActionMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateUpdateSeason(variables: { seasonInput: SeasonInput }, resultSelector: string | ((qb: UpdateSeasonMutationModelSelector) => UpdateSeasonMutationModelSelector) = updateSeasonMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ updateSeason: UpdateSeasonMutationModelType}>(`mutation updateSeason($seasonInput: SeasonInput!) { updateSeason(seasonInput: $seasonInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UpdateSeasonMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateCreateStadium(variables: { stadiumInput: StadiumInput }, resultSelector: string | ((qb: CreateStadiumMutationModelSelector) => CreateStadiumMutationModelSelector) = createStadiumMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ createStadium: CreateStadiumMutationModelType}>(`mutation createStadium($stadiumInput: StadiumInput!) { createStadium(stadiumInput: $stadiumInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new CreateStadiumMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n    mutateUpdateStadium(variables: { stadiumInput: StadiumInput }, resultSelector: string | ((qb: UpdateStadiumMutationModelSelector) => UpdateStadiumMutationModelSelector) = updateStadiumMutationModelPrimitives.toString(), optimisticUpdate?: () => void) {\n      return self.mutate<{ updateStadium: UpdateStadiumMutationModelType}>(`mutation updateStadium($stadiumInput: StadiumInput!) { updateStadium(stadiumInput: $stadiumInput) {\n        ${typeof resultSelector === \"function\" ? resultSelector(new UpdateStadiumMutationModelSelector()).toString() : resultSelector}\n      } }`, variables, optimisticUpdate)\n    },\n  })))\n","/* This is a mst-gql generated file, don't modify it manually */\n/* eslint-disable */\n/* tslint:disable */\n\nimport { createStoreContext, createUseQueryHook } from \"mst-gql\"\nimport * as React from \"react\"\nimport { RootStoreType } from \"./RootStore\"\n\nexport const StoreContext = createStoreContext<RootStoreType>(React)\n\nexport const useQuery = createUseQueryHook(StoreContext, React)\n","import CSS from \"csstype\";\n\nexport const formStyles: CSS.Properties = {\n    textAlign: 'center',\n    marginTop: '20px',\n};\n\nexport const cardStyles: CSS.Properties = {\n    display: 'inline-block',\n    width: '30%',\n    boxShadow: 'rgba(0, 0, 0, 0.1) 0px 2px 8px',\n};\n\nexport const labelStyles: CSS.Properties = {\n    marginRight: '5px',\n};\n\nexport const inputStyles: CSS.Properties = {\n    backgroundColor: '#f5f4f0',\n    textAlign: 'center',\n    border: '1px',\n    borderRadius: '4px',\n    padding: '0.5rem',\n    fontSize: '14px',\n    color: '#011228',\n};\n\nexport const buttonStyles: CSS.Properties = {\n    backgroundColor: '#7395aa',\n    margin: '5px',\n    border: '0px',\n    borderRadius: '4px',\n    fontSize: '14px',\n    width: '80%',\n    color: '#FDFFFC',\n    padding: '6px',\n    verticalAlign: 'middle',\n    cursor: 'pointer'\n};","import React, {useContext} from 'react';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../../../models\";\nimport {useForm} from \"react-hook-form\";\nimport {Alert, Card, Space} from \"antd\";\nimport {buttonStyles, cardStyles, formStyles, inputStyles, labelStyles} from \"./CreateStyles\";\n\ntype franchiseConfig = {\n    franchiseName: any;\n};\n\ninterface ICreate {\n    setFranchise: any;\n}\n\nexport const CreateFranchise: React.FunctionComponent<ICreate> = observer(({setFranchise}: ICreate) => {\n\n        const store = useContext(StoreContext)\n        const {register, handleSubmit, errors} = useForm<franchiseConfig>();\n        const onSubmit = handleSubmit(({franchiseName}: franchiseConfig) => {\n            console.log(franchiseName);\n            store.mutateCreateFranchise({\n                    \"email\": store.User.email,\n                    \"franchiseInput\": {\n                        \"franchise\": franchiseName\n                    }\n                },\n                `\n            franchise {\n                __typename\n                id\n                franchise\n                gm {\n                    __typename\n                    id\n                    trait\n                }\n                coach {\n                    __typename\n                    id\n                    name\n                    attributeOne\n                    attributeTwo\n                }\n            }\n            user {\n                __typename\n                id\n                email\n                username\n                league {\n                    __typename\n                    id\n                    leagueName\n                }\n                franchise {\n                    __typename\n                    id\n                    league {\n                        __typename\n                        id\n                        leagueName\n                        franchiseSet {\n                            __typename\n                            id\n                            franchise\n                            gm {\n                                __typename\n                                id\n                                trait\n                            }\n                            coach {\n                                __typename\n                                id\n                                name\n                                attributeOne\n                                attributeTwo\n                            }\n                            playerSet {\n                                __typename\n                                id\n                                name\n                                suit\n                                age\n                                pv\n                                epv\n                                sEpv\n                                contract\n                                tOption\n                                pOption\n                                renew\n                                salary\n                                grade\n                                trainer\n                                franchise {\n                                    __typename\n                                    id\n                                }\n                                lineup\n                            }\n                            seasonSet {\n                                __typename\n                                id\n                                franchise {\n                                    __typename\n                                    id\n                                }\n                                season\n                                ready\n                                wins\n                                losses\n                                ppg\n                                std\n                                championships\n                                bonuses\n                                penalties\n                                fanBase\n                                fanIndex\n                                advertising\n                                revenue\n                                expenses\n                            }\n                            stadium {\n                                __typename\n                                id\n                                stadiumName\n                                seats\n                                boxes\n                                grade\n                                maxGrade\n                                homeFieldAdvantage\n                                city {\n                                    __typename\n                                    id\n                                    city\n                                    cityValue\n                                }\n                            }\n                        }\n                        citySet {\n                            __typename\n                            id\n                            city\n                            cityValue\n                            league {\n                                __typename\n                                id\n                            }\n                            stadiumSet {\n                                __typename\n                                id\n                                city {\n                                    __typename\n                                    id\n                                }\n                                franchise {\n                                    __typename\n                                    id\n                                }\n                                stadiumName\n                                seats\n                                boxes\n                                grade\n                                maxGrade\n                                homeFieldAdvantage\n                            }\n                        }\n                        playerSet {\n                            __typename\n                            id\n                            name\n                            suit\n                            age\n                            pv\n                            epv\n                            sEpv\n                            contract\n                            tOption\n                            pOption\n                            renew\n                            salary\n                            grade\n                            trainer\n                            franchise {\n                                __typename\n                                id\n                                franchise\n                            }\n                            lineup\n                        }\n                        gmSet {\n                            __typename\n                            id\n                            trait\n                        }\n                        coachSet {\n                            __typename\n                            id\n                            name\n                            attributeOne\n                            attributeTwo\n                        }\n                    }\n                }\n            }\n            `,\n                undefined\n            ).then(data =>\n                // this is needed so the franchise page can switch between franchises selected\n                setFranchise(data.createFranchise.user.franchise))\n        });\n\n        return (\n            <form style={formStyles} onSubmit={onSubmit}>\n                <Card style={cardStyles} title=\"Start Franchise\">\n                    <Space direction=\"vertical\">\n                        <label style={labelStyles}>Franchise Name</label>\n                        <input name=\"franchiseName\" style={inputStyles} ref={register({\n                            required: {\n                                value: true,\n                                message: \"Franchise name is a required field\",\n                            },\n                            maxLength: {\n                                value: 25,\n                                message: 'Max Franchise name length is 25',\n                            },\n                        })}/>\n                        <input type=\"submit\" style={buttonStyles} value=\"Create Franchise\"/>\n                        <br/> {errors.franchiseName &&\n                    <Alert message={errors.franchiseName.message} type=\"error\" closable/>}\n                        <br/>\n                    </Space>\n                </Card>\n            </form>\n        );\n    }\n)\n\nexport default CreateFranchise;\n","import React from \"react\";\n\nexport const insertArray = ( array: any, index: number, item: any ) => {\n    array.splice( index, 0, item );\n};\n\nexport const colour = (suit: string) => {\n      if (suit.toLowerCase() === 'diamond') {\n        return '#40a9ff';\n      }\n      else if (suit.toLowerCase() === 'spade' ) {\n        return '#ffc53d';\n      }\n      else if (suit.toLowerCase() === 'heart') {\n        return '#ff4d4f';\n      }\n      else if (suit.toLowerCase() === 'club') {\n        return '#73d13d';\n      }\n}\n\n  export const suit_icon = (suit: string) => {\n    if (suit === 'diamond') {\n      return <span role=\"img\" aria-label=\"diamond\"> ♦ </span>;\n    }\n    else if (suit === 'spade') {\n      return <span role=\"img\" aria-label=\"spade\"> ♠ </span>;\n    }\n    else if (suit === 'heart') {\n      return <span role=\"img\" aria-label=\"spade\"> ♥ </span>;\n    }\n    else if (suit === 'club') {\n      return <span role=\"img\" aria-label=\"spade\"> ♣ </span>;\n    }\n}\n\n  export const _to_fixed = (value: any) => {\n  if (value != null) {\n    return value.toFixed(2) ;\n  }\n  else {\n    return \"\";\n  }\n}\n\n\n  export const _lineup = (lineup: any) => {\n    if (lineup != null) {\n      return lineup ;\n    }\n    else {\n      return \"\";\n    }\n}","export const userQuery = `\n    __typename\n    id\n    email\n    username\n    league{\n      __typename\n      id\n    }\n    franchise{\n      __typename\n      id\n      gm{\n        __typename\n        id\n        trait\n      }\n      coach{\n        __typename\n        id\n        name\n        attributeOne\n        attributeTwo\n        franchise{\n            __typename\n            id\n          }\n      }\n      stadium{\n        __typename\n        id\n        stadiumName\n        seats\n        boxes\n        grade\n        maxGrade\n        homeFieldAdvantage\n        city{\n          __typename\n          id\n          city\n          cityValue\n        }\n        franchise{\n          __typename\n          id\n          franchise\n        }\n      }\n      playerSet{\n        __typename\n        id\n        name\n        suit\n        age\n        pv\n        epv\n        sEpv\n        contract\n        tOption\n        pOption\n        renew\n        salary\n        grade\n        trainer\n        year\n        franchise{\n          __typename\n          id\n          franchise\n        }\n        lineup\n      }\n      action{\n        __typename\n        id\n        numberOfActions\n        improvedBathrooms\n        improvedBathroomsComplete\n        improvedConcessions\n        improvedConcessionsComplete\n        jumbotron\n        jumbotronComplete\n        upscaleBar\n        upscaleBarComplete\n        hallOfFame\n        hallOfFameComplete\n        improvedSeating\n        improvedSeatingComplete\n        improvedSound\n        improvedSound\n        partyDeck\n        partyDeckComplete\n        wiFi\n        wiFiComplete\n        fanNight\n        familyGame\n        doorPrizes\n        mvpNight\n        paradeOfChampions\n        bribeTheRefs\n        easyRuns\n        easyRunsComplete\n        fanFactor\n        fanFactorComplete\n        trainPlayer\n        farmSystem\n        fanFavourites\n        gourmetRestaurant\n        gourmetRestaurantComplete\n        beerGarden\n        namingRights\n        namingRightsComplete\n        eventPlanning\n      }\n      stadium{\n        __typename\n        id\n        city{\n          __typename\n          id\n        }\n        franchise{\n          __typename\n          id\n        }\n        stadiumName\n        seats\n        boxes\n        grade\n        maxGrade\n        homeFieldAdvantage\n      }\n      seasonSet{\n        __typename\n        id\n        franchise{\n          __typename\n          id\n        }\n        season\n        ready\n        wins\n        losses\n        ppg\n        std\n        championships\n        bonuses\n        penalties\n        fanBase\n        fanIndex\n        advertising\n        ticketPrice\n        ticketsSold\n        boxPrice\n        boxesSold\n        revenue\n        expenses\n      }\n      league{\n        __typename\n        id\n        leagueName\n        franchiseSet{\n          __typename\n          id\n          franchise\n          gm{\n            __typename\n            id\n            trait\n          }\n          coach{\n            __typename\n            id\n            name\n            attributeOne\n            attributeTwo\n            franchise{\n            __typename\n            id\n            }\n          }\n          action{\n            __typename\n            id\n            numberOfActions\n            improvedBathrooms\n            improvedBathroomsComplete\n            improvedConcessions\n            improvedConcessionsComplete\n            jumbotron\n            jumbotronComplete\n            upscaleBar\n            upscaleBarComplete\n            hallOfFame\n            hallOfFameComplete\n            improvedSeating\n            improvedSeatingComplete\n            improvedSound\n            improvedSound\n            partyDeck\n            partyDeckComplete\n            wiFi\n            wiFiComplete\n            fanNight\n            familyGame\n            doorPrizes\n            mvpNight\n            paradeOfChampions\n            bribeTheRefs\n            easyRuns\n            easyRunsComplete\n            fanFactor\n            fanFactorComplete\n            trainPlayer\n            farmSystem\n            fanFavourites\n            gourmetRestaurant\n            gourmetRestaurantComplete\n            beerGarden\n            namingRights\n            namingRightsComplete\n            eventPlanning\n          }\n          playerSet{\n            __typename\n            id\n            name\n          suit\n          age\n          pv\n          epv\n          sEpv\n          contract\n          tOption\n          pOption\n          renew\n          salary\n          grade\n          trainer\n          year\n          franchise{\n            __typename\n            id\n          }\n          lineup\n          }\n        seasonSet{\n          __typename\n          id\n          franchise{\n            __typename\n            id\n            franchise\n          }\n          season\n          ready\n          wins\n          losses\n          ppg\n          std\n          championships\n          bonuses\n          penalties\n          fanBase\n          fanIndex\n          advertising\n          ticketPrice\n          ticketsSold\n          boxPrice\n          boxesSold\n          revenue\n          expenses\n        }\n        stadium{\n        __typename\n        id\n        stadiumName\n        seats\n        boxes\n        grade\n        maxGrade\n        homeFieldAdvantage\n        city{\n          __typename\n          id\n          city\n          cityValue\n        }\n        }\n        }\n        citySet{\n          __typename\n          id\n          city\n          cityValue\n          league{\n            __typename\n            id\n          }\n          stadiumSet{\n            __typename\n            id\n            city{\n              __typename\n              id\n            }\n            franchise{\n              __typename\n              id\n            }\n            stadiumName\n            seats\n            boxes\n            grade\n            maxGrade\n            homeFieldAdvantage\n          }\n        }\n        playerhistorySet{\n          __typename\n          id\n          season\n          name\n           suit\n          age\n          pv\n          epv\n          sEpv\n          league{\n            __typename\n            id\n            leagueName\n          }\n        }\n        playerSet{\n          __typename\n          id\n          name\n          suit\n          age\n          pv\n          epv\n          sEpv\n          contract\n          tOption\n          pOption\n          renew\n          salary\n          grade\n          trainer\n          year\n          franchise{\n            __typename\n            id\n            franchise\n          }\n          lineup\n        }\n        gmSet{\n          __typename\n          id\n          trait\n        }\n        coachSet{\n          __typename\n          id\n          name\n          attributeOne\n          attributeTwo\n          franchise{\n            __typename\n            id\n          }\n        }\n      }\n    }`;\n\nexport const mutateCreatePlayerQuery = `\nplayer {\n        league {\n            __typename\n            id\n            leagueName\n            franchiseSet {\n                __typename\n                id\n                franchise\n                playerSet {\n                    __typename\n                    id\n                    name\n                    suit\n                    age\n                    pv\n                    epv\n                    sEpv\n                    contract\n                    tOption\n                    pOption\n                    renew\n                    salary\n                    grade\n                    trainer\n                    year\n                    franchise {\n                        __typename\n                        id\n                        franchise\n                    }\n                    lineup\n                }\n            }\n        }\n    }\n`;","import React, {useContext, useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Tag, Input, Modal, Select, Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport CSS from \"csstype\";\nimport {StoreContext} from \"../../../models\";\nimport {mutateCreatePlayerQuery} from \"../../Utils/queries\";\nimport {buttonStyles} from \"../Create/CreateStyles\";\n\ninterface IVisible {\n    visible: boolean;\n    setVisible: (visible:boolean) => void;\n    selectedplayer: any;\n}\n\nexport const SigningModal: React.FunctionComponent<IVisible> = observer(({visible, setVisible, selectedplayer} : IVisible) => {\n\n        const store = useContext(StoreContext)\n\n        const formStyles: CSS.Properties = {\n            backgroundColor: '#ffffff',\n            border: '1px solid #afafaf',\n            margin: '5px',\n            width: '10vh',\n            borderRadius: '3px',\n            padding: '1px',\n            fontSize: '14px',\n            color: '#000000',\n        };\n\n        const selectStyles: CSS.Properties = {\n            margin: '5px',\n            width: '20vh',\n            fontSize: '14px',\n        };\n\n\n        const [salary, setSalary] = useState<number>(0);\n        const [renewal, setRenewal] = useState<string>(\"no\");\n        const [contractlength, setContractLength] = useState<number>(1);\n        const [playeroption, setPlayerOption] = useState<number>(0);\n        const [teamoption, setTeamOption] = useState<number>(0);\n        const [offergrade, setOfferGrade] = useState<number>(0);\n        const [gradecolour, setGradeColour] = useState<string>('#ff4d4f');\n\n\n        const sign_player = () => {\n            if (gradecolour == '#73d13d') {\n                console.log(\"PLAYER SIGNED!\");\n                store.mutateCreatePlayer({\n                        \"playerInput\": {\n                            \"name\": selectedplayer.name,\n                            \"suit\": selectedplayer.suit,\n                            \"age\": selectedplayer.age,\n                            \"pv\": selectedplayer.pv,\n                            \"epv\": selectedplayer.epv,\n                            \"sEpv\": selectedplayer.sEpv,\n                            \"contract\": contractlength,\n                            \"tOption\": teamoption,\n                            \"pOption\": playeroption,\n                            \"renew\": renewal,\n                            \"salary\": salary,\n                            \"grade\": offergrade,\n                            \"franchiseId\": store.User.franchise.id,\n                            \"trainer\": selectedplayer.trainer,\n                            \"year\": selectedplayer.year,\n                            \"lineup\": selectedplayer.lineup,\n                            \"leagueId\": store.User.franchise.league.id\n                        }\n                    },\n                    mutateCreatePlayerQuery,\n                    undefined\n                )\n                setVisible(false);\n\n\n            } else {\n                console.log(\"PLAYER REJECTED!\");\n            }\n        }\n\n        useEffect(() => {\n            calc_grade();\n        }, [salary, renewal, contractlength, playeroption, teamoption, selectedplayer]);\n\n\n        const calc_grade = () => {\n            let epv = selectedplayer.epv;\n            let age = selectedplayer.age;\n\n            let grade = 0;\n\n            // is contract is greater than zero\n            if (contractlength > 0) {\n                // set initial base salary\n                grade = (salary * (contractlength + 1)) / epv;\n                // adjust for renewal\n                if (renewal === \"repeat\") {\n                    grade -= 2\n                } else if (renewal === \"non-repeat\") {\n                    grade -= 1\n                }\n                // adjust for t_option\n                if (teamoption > 0) {\n                    grade -= (contractlength - teamoption)\n                }\n                // adjust for p_option\n                if (playeroption > 0) {\n                    grade += 0.5 * (contractlength - playeroption)\n                }\n                // adjust for age\n                if (age >= 27) {\n                    grade += age - 26\n                }\n                // stopper for invalid contracts where option is greater than contract length\n                if (contractlength <= playeroption || contractlength <= teamoption) {\n                    grade = -999.99\n                }\n\n               if (store.User.franchise.gm !== null)\n                   if (store.User.franchise.gm.trait === \"RECRUITER\") {\n                   // set grade after all adjustments + 2 for recruiter bonus\n                       grade = grade + 2\n                       setOfferGrade(grade )\n                    }\n                    else {\n                   // set grade after all adjustments\n                        setOfferGrade(grade)\n                    }\n                else setOfferGrade(grade)\n                }\n\n            if (grade >= selectedplayer.grade && grade >= 5) {\n                setGradeColour('#73d13d')\n            } else {\n                setGradeColour('#ff4d4f')\n            }\n        }\n\n\n        return (\n            <div>\n                <Modal\n                    title=\"Contract Portal\"\n                    centered\n                    closable={false}\n                    visible={visible}\n                    footer={[\n                        <Button key={1} style={{...buttonStyles, ...{width: '100px'}}} onClick={() => setVisible(false)}>\n                            Cancel\n                        </Button>,\n                        <Button key={2} style={{...buttonStyles, ...{width: '100px'}}} onClick={() => sign_player()}>\n                            Confirm\n                        </Button>,\n                    ]}\n                    width={'600px'}\n                >\n                    <h4>{selectedplayer.name}</h4>\n                    <label>Salary: </label>\n                    <Input min={0} type=\"number\" onChange={event => {\n                        setSalary(event.target.valueAsNumber)\n                    }} name=\"salary\" style={formStyles}/>\n                    <span>million / yr</span>\n                    <br/>\n                    <label>Contract Length: </label>\n                    <Select defaultValue={contractlength} style={selectStyles} options={[\n                        {label: \"One Year\", value: 1},\n                        {label: \"Two Years\", value: 2},\n                        {label: \"Three Years\", value: 3},\n                        {label: \"Four Years\", value: 4},\n                        {label: \"Five Years\", value: 5},]} onChange={event => {\n                        setContractLength(event)\n                    }}>\n                    </Select>\n                    <br/>\n                    <label>Renewal: </label>\n                    <Select defaultValue={renewal} style={selectStyles} options={[\n                        {label: \"No\", value: \"no\"},\n                        {label: \"Non-Repeat\", value: \"non-repeat\"},\n                        {label: \"Repeat\", value: \"repeat\"},]}\n                            onChange={event => {\n                                setRenewal(event)\n                            }}>\n                    </Select>\n                    <br/>\n                    <label>Player Option: </label>\n                    <Select defaultValue={playeroption} style={selectStyles} options={[\n                        {label: \"None\", value: 0},\n                        {label: \"Year One\", value: 1},\n                        {label: \"Year Two\", value: 2},\n                        {label: \"Year Three\", value: 3},\n                        {label: \"Year Four\", value: 4},]}\n                            onChange={event => {\n                                setPlayerOption(event)\n                            }}>\n                    </Select>\n                    <br/>\n                    <label>Team Option: </label>\n                    <Select defaultValue={teamoption} style={selectStyles} options={[\n                        {label: \"None\", value: 0},\n                        {label: \"Year One\", value: 1},\n                        {label: \"Year Two\", value: 2},\n                        {label: \"Year Three\", value: 3},\n                        {label: \"Year Four\", value: 4},]}\n                            onChange={event => {\n                                setTeamOption(event)\n                            }}>\n                    </Select>\n                    <br/>\n                    <label>Current Grade: </label>\n                    <Tag color={'#afafaf'} style={{marginTop: '10px', fontSize: '14px'}}>\n                        {selectedplayer.grade ? selectedplayer.grade.toFixed(2) : selectedplayer.grade}\n                    </Tag>\n                    <label>Offer Grade: </label>\n                    <Tag color={gradecolour} style={{marginTop: '10px', fontSize: '14px'}}>\n                        {offergrade.toFixed(2)}\n                    </Tag>\n                </Modal>\n\n            </div>\n        );\n    }\n)\n\nexport default SigningModal;\n","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button, Modal, notification} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../../../models\";\nimport {mutateCreatePlayerQuery} from \"../../Utils/queries\";\nimport {buttonStyles} from \"../Create/CreateStyles\";\n\ninterface IVisible {\n    trainerVisible: boolean;\n    setTrainerVisible: (visible:boolean) => void;\n    selectedplayer: any;\n}\n\nexport const TrainerModal: React.FunctionComponent<IVisible> = observer(({ trainerVisible, setTrainerVisible, selectedplayer} : IVisible) => {\n\n        const store = useContext(StoreContext)\n\n        const actionError = (franchise: string | undefined) => {\n            notification.error({\n                message: 'Action Error',\n                description: franchise + ' does not have enough actions to train',\n                duration: 10,\n            });\n        };\n\n        const train_player = () => {\n                console.log(\"PLAYER TRAINED!\");\n                console.log(selectedplayer)\n                if (selectedplayer.franchise.action.numberOfActions <= 0)\n                    return actionError(selectedplayer.franchise.franchise);\n            else {\n                    store.mutateCreatePlayer({\n                            \"playerInput\": {\n                                \"name\": selectedplayer.name,\n                                \"suit\": selectedplayer.suit,\n                                \"age\": selectedplayer.age,\n                                \"pv\": selectedplayer.pv,\n                                \"epv\": selectedplayer.epv,\n                                \"sEpv\": selectedplayer.sEpv,\n                                \"contract\": selectedplayer.contract,\n                                \"tOption\": selectedplayer.tOption,\n                                \"pOption\": selectedplayer.pOption,\n                                \"renew\": selectedplayer.renew,\n                                \"salary\": selectedplayer.salary,\n                                \"grade\": selectedplayer.grade,\n                                \"lineup\": selectedplayer.lineup,\n                                \"franchiseId\": selectedplayer.franchise.id,\n                                \"trainer\": true,\n                                \"year\": selectedplayer.year,\n                                \"leagueId\": store.User.franchise.league.id\n                            }\n                        }, mutateCreatePlayerQuery,\n                        undefined\n                    ).then(() => store.mutateUpdateAction({\n                            \"actionInput\": {\n                                \"numberOfActions\": (selectedplayer.franchise.action.numberOfActions - 1),\n                                \"improvedBathrooms\": selectedplayer.franchise.action.improvedBathrooms,\n                                \"improvedConcessions\": selectedplayer.franchise.action.improvedConcessions,\n                                \"jumbotron\": selectedplayer.franchise.action.jumbotron,\n                                \"upscaleBar\": selectedplayer.franchise.action.upscaleBar,\n                                \"hallOfFame\": selectedplayer.franchise.action.hallOfFame,\n                                \"improvedSeating\": selectedplayer.franchise.action.improvedSeating,\n                                \"improvedSound\": selectedplayer.franchise.action.improvedSound,\n                                \"partyDeck\": selectedplayer.franchise.action.partyDeck,\n                                \"wiFi\": selectedplayer.franchise.action.wiFi,\n                                \"fanNight\": selectedplayer.franchise.action.fanNight,\n                                \"familyGame\": selectedplayer.franchise.action.familyGame,\n                                \"doorPrizes\": selectedplayer.franchise.action.doorPrizes,\n                                \"mvpNight\": selectedplayer.franchise.action.mvpNight,\n                                \"paradeOfChampions\": selectedplayer.franchise.action.paradeOfChampions,\n                                \"bribeTheRefs\": selectedplayer.franchise.action.bribeTheRefs,\n                                \"easyRuns\": selectedplayer.franchise.action.easyRuns,\n                                \"fanFactor\": selectedplayer.franchise.action.fanFactor,\n                                \"trainPlayer\": 2,\n                                \"farmSystem\": false,\n                                \"fanFavourites\": selectedplayer.franchise.action.fanFavourites,\n                                \"gourmetRestaurant\": selectedplayer.franchise.action.gourmetRestaurant,\n                                \"beerGarden\": selectedplayer.franchise.action.beerGarden,\n                                \"namingRights\": selectedplayer.franchise.action.namingRights,\n                                \"eventPlanning\": selectedplayer.franchise.action.eventPlanning,\n                                \"franchiseId\": selectedplayer.franchise.id\n                            }\n                        }, `__typename\n                                    action{\n                                      __typename\n                                      id\n                                      franchise{\n                                        __typename\n                                        id\n                                        user{\n                                          __typename\n                                          id\n                                          franchise{\n                                            __typename\n                                            id\n                                            action{\n                                          __typename\n                                          id\n                                          numberOfActions\n                                          improvedBathrooms\n                                          improvedConcessions\n                                          jumbotron\n                                          upscaleBar\n                                          hallOfFame\n                                          improvedSeating\n                                          improvedSound\n                                          partyDeck\n                                          wiFi\n                                          fanNight\n                                          familyGame\n                                          doorPrizes\n                                          mvpNight\n                                          paradeOfChampions\n                                          bribeTheRefs\n                                          easyRuns\n                                          fanFactor\n                                          trainPlayer\n                                          farmSystem\n                                          fanFavourites\n                                          gourmetRestaurant\n                                          beerGarden\n                                          namingRights\n                                          eventPlanning\n                                            }\n                                         league{\n                                          __typename\n                                          id\n                                          franchiseSet{\n                                            __typename\n                                            id\n                                            action{\n                                              __typename\n                                              id\n                                              numberOfActions\n                                              improvedBathrooms\n                                              improvedConcessions\n                                              jumbotron\n                                              upscaleBar\n                                              hallOfFame\n                                              improvedSeating\n                                              improvedSound\n                                              partyDeck\n                                              wiFi\n                                              fanNight\n                                              familyGame\n                                              doorPrizes\n                                              mvpNight\n                                              paradeOfChampions\n                                              bribeTheRefs\n                                              easyRuns\n                                              fanFactor\n                                              trainPlayer\n                                              farmSystem\n                                              fanFavourites\n                                              gourmetRestaurant\n                                              beerGarden\n                                              namingRights\n                                              eventPlanning\n                                              franchise{\n                                                __typename\n                                                id\n                                              }\n                                            }\n                                          }\n                                        }\n                                          }\n                                        }\n                                  }\n                                }\n                                `,\n                        undefined\n                    ))\n                }\n                setTrainerVisible(false);\n            }\n\n        return (\n            <div>\n                <Modal\n                    title=\"Trainer\"\n                    centered\n                    visible={trainerVisible}\n                    closable={false}\n                    footer={[\n                        <Button style={{...buttonStyles, ...{width: '100px'}}} onClick={() => setTrainerVisible(false)}>\n                            Cancel\n                        </Button>,\n                        <Button style={{...buttonStyles, ...{width: '100px'}}} onClick={() => train_player()}>\n                            Confirm\n                        </Button>,\n                    ]}\n                    width={'600px'}\n                >\n                    <p>Are you sure you want to train {selectedplayer.name}?</p>\n                </Modal>\n\n            </div>\n        );\n    }\n)\n\nexport default TrainerModal;","import React from 'react';\nimport CSS from \"csstype\";\n\nexport type OptionValue = string | number;\n\nexport type Option<T extends OptionValue> = {\n  value: T;\n  label: string;\n};\n\ntype Props<T extends OptionValue> = {\n  options: Option<T>[];\n  value: T;\n  onChange: (value: T) => void;\n  style?: CSS.Properties\n};\n\nexport function Select<T extends OptionValue>(props: Props<T>) {\n  function handleOnChange(e: React.FormEvent<HTMLSelectElement>) {\n    const { selectedIndex } = e.currentTarget;\n    const selectedOption = props.options[selectedIndex];\n    props.onChange(selectedOption.value);\n  }\n  return (\n        // @ts-ignore\n    <select style={props.style} value={props.value} onChange={handleOnChange}>\n      {props.options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  );\n}","import React, {useContext, useState} from \"react\";\nimport {PlayerTypeModelType, StoreContext} from \"../../models\";\nimport {Select} from \"../Atoms/Select\";\nimport {observer} from \"mobx-react\";\nimport {mutateCreatePlayerQuery} from \"../Utils/queries\";\n\n\ninterface ILineup {\n    current_lineup: any;\n    record: any;\n    setRosterAlert: (rosteralert:boolean) => void;\n}\n\nconst LineupSelect: React.FunctionComponent<ILineup> = observer(({current_lineup, record, setRosterAlert} : ILineup) => {\n\n            const store = useContext(StoreContext);\n\n            const [selected, setSelected] = useState(current_lineup);\n\n            const submitLineup = (updated_lineup: any) => {\n                // hides roster alert if previously true\n                setRosterAlert(false)\n                // get current lineup array\n                let lineupArray: Array<string> = record.franchise.playerSet.map((p: PlayerTypeModelType) =>\n                    p.lineup\n                );\n                // add updated_lineup selection\n                lineupArray.push(updated_lineup);\n                // if legal lineup run mutation\n                if (lineupArray.filter(x => x === \"starter\").length <= 5 && lineupArray.filter(x => x === \"rotation\").length <= 3) {\n                    setSelected(updated_lineup);\n                    store.mutateCreatePlayer({\n                            \"playerInput\": {\n                                \"name\": record.name,\n                                \"suit\": record.suit,\n                                \"age\": record.age,\n                                \"pv\": record.pv,\n                                \"epv\": record.epv,\n                                \"sEpv\": record.sEpv,\n                                \"contract\": record.contract,\n                                \"tOption\": record.tOption,\n                                \"pOption\": record.pOption,\n                                \"renew\": record.renew,\n                                \"salary\": record.salary,\n                                \"grade\": record.grade,\n                                \"franchiseId\": record.franchise.id,\n                                \"trainer\": record.trainer,\n                                \"year\": record.year,\n                                \"lineup\": updated_lineup,\n                                \"leagueId\": store.User.franchise.league.id\n                            }\n                        }, mutateCreatePlayerQuery,\n                        undefined\n                    )\n                }\n                // else set roster alert pop-up\n                else {\n                    setRosterAlert(true)\n                }\n            };\n\n            let other_values = [\"starter\", \"rotation\", \"bench\"].filter(x => ![current_lineup].includes(x));\n\n            const options = (other_values: Array<string>) => {\n                if (other_values.length === 2) {\n                    return [{value: current_lineup, label: current_lineup}, {\n                        value: other_values[0],\n                        label: other_values[0]\n                    },\n                        {value: other_values[1], label: other_values[1]}];\n                } else {\n                    return [{value: current_lineup, label: current_lineup}, {\n                        value: other_values[0],\n                        label: other_values[0]\n                    },\n                        {value: other_values[1], label: other_values[1]}, {value: other_values[2], label: other_values[2]}];\n                }\n            };\n\n            return <Select options={options(other_values)} value={selected}\n                           onChange={(updated_lineup: any) => submitLineup(updated_lineup)}/>\n        }\n);\n\nexport default LineupSelect;","import CSS from \"csstype\";\n\nexport const inputStyles: CSS.Properties = {\n    backgroundColor: '#f5f4f0',\n    textAlign: 'center',\n    border: '1px',\n    borderRadius: '4px',\n    padding: '0.5rem',\n    width: '100%',\n    fontSize: '14px',\n    color: '#011228',\n};\n\nexport const buttonStyles: CSS.Properties = {\n    backgroundColor: '#7395aa',\n    margin: '5px',\n    border: '0px',\n    borderRadius: '2px',\n    fontSize: '14px',\n    color: '#FDFFFC',\n    padding: '6px',\n    boxShadow: 'rgba(27, 31, 35, .3) 0 1px 0',\n    verticalAlign: 'middle',\n    cursor: 'pointer'\n};\n\nexport const tableStyles: CSS.Properties = {\n    boxShadow: 'rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px',\n};","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Tag, Space, Alert} from 'antd';\nimport {FranchiseTypeModelType, PlayerTypeModelType, StoreContext} from \"../../../models\";\nimport {observer} from \"mobx-react\";\nimport {colour, suit_icon, _to_fixed, _lineup, insertArray} from '../../Utils/tablefunctions'\nimport {toJS} from \"mobx\";\nimport SigningModal from \"../../Molecules/Modals/SigningModal\";\nimport TrainerModal from \"../../Molecules/Modals/TrainerModal\";\nimport LineupSelect from \"../../Molecules/LineupSelect\";\nimport {mutateCreatePlayerQuery} from \"../../Utils/queries\";\nimport {tableStyles} from \"./TableStyles\";\n\n\ninterface IFranchise {\n    franchise: FranchiseTypeModelType;\n}\n\nexport const RosterTable: React.FunctionComponent<IFranchise> = observer(({franchise} : IFranchise) => {\n\n        const store = useContext(StoreContext)\n\n        const [visible, setVisible] = useState<boolean>(false)\n        const [trainerVisible, setTrainerVisible] = useState<boolean>(false)\n        const [selectedPlayer, setSelectedPlayer] = useState<any>([]);\n        const [rosterAlert, setRosterAlert] = useState<boolean>(false)\n\n        const non_scouter_columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n                key: 'age',\n                sorter: (a: any, b: any) => a.age - b.age,\n            },\n            {\n                title: 'EPV',\n                dataIndex: 'epv',\n                key: 'epv',\n                sorter: (a: any, b: any) => a.epv - b.epv,\n                render: (epv: number) => <span>{epv.toFixed(1)}</span>,\n            },\n            {\n                title: 'Suit',\n                dataIndex: 'suit',\n                key: 'suit',\n                render: (suit: string) => (\n                    <Tag icon={suit_icon(suit)} color={colour(suit)} key={suit}>\n                        {suit.toUpperCase()}\n                    </Tag>\n                ),\n                filters: [\n                    {\n                        text: 'Diamond',\n                        value: 'diamond',\n                    },\n                    {\n                        text: 'Spade',\n                        value: 'spade',\n                    },\n                    {\n                        text: 'Heart',\n                        value: 'heart',\n                    },\n                    {\n                        text: 'Club',\n                        value: 'club',\n                    },\n                ],\n                onFilter: (value: any, record: any) => record.player.suit.indexOf(value) === 0,\n            },\n            {\n                title: 'Contract',\n                dataIndex: 'contract',\n                key: 'contract',\n                sorter: (a: any, b: any) => a.contract - b.contract,\n            },\n            {\n                title: 'Team Option',\n                dataIndex: 'tOption',\n                key: 'tOption',\n                render: (tOption: number, record: any) => (\n                    (record.tOption === 0) ? (\n                        <Space size=\"middle\">\n                            <Tag color={\"#FFB4AD\"} style={{color: \"#000000\", border: \"2px solid #FFB4AD\"}}\n                                 onClick={() => {\n                                     store.mutateCreatePlayer({\n                                             \"playerInput\": {\n                                                 \"name\": record.name,\n                                                 \"suit\": record.suit,\n                                                 \"age\": record.age,\n                                                 \"pv\": record.pv,\n                                                 \"epv\": record.epv,\n                                                 \"sEpv\": record.sEpv,\n                                                 \"contract\": undefined,\n                                                 \"tOption\": undefined,\n                                                 \"pOption\": undefined,\n                                                 \"renew\": undefined,\n                                                 \"salary\": undefined,\n                                                 \"grade\": undefined,\n                                                 \"lineup\": undefined,\n                                                 \"franchiseId\": undefined,\n                                                 \"trainer\": record.trainer,\n                                                 \"year\": record.year,\n                                                 \"leagueId\": store.User.franchise.league.id\n                                             }\n                                         }, mutateCreatePlayerQuery,\n                                         undefined\n                                     );\n                                 }\n                                 }>\n                                Release Player\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <span>{tOption}</span>\n                    )\n\n                ),\n            },\n            {\n                title: 'Player Option',\n                dataIndex: 'pOption',\n                key: 'pOption',\n                render: (pOption: number, record: any) => (\n                    (record.pOption === 0) ? (\n                        <Space size=\"middle\">\n                            <Tag color={\"#e96879\"} style={{color: \"#ffffff\", border: \"2px solid #e96879\"}}>\n                                Active\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <span>{pOption}</span>\n                    )\n\n                ),\n            },\n            {\n                title: 'Renew',\n                dataIndex: 'renew',\n                key: 'renew',\n                render: (renew: string, record: any) => (\n                    (record.renew === \"repeat\" && record.contract === 1) ? (\n                        <Space size=\"middle\">\n                            <Tag color={\"#FFB4AD\"} style={{color: \"#000000\", border: \"2px solid #FFB4AD\"}}\n                                 onClick={() => {\n                                     store.mutateCreatePlayer({\n                                             \"playerInput\": {\n                                                 \"name\": record.name,\n                                                 \"suit\": record.suit,\n                                                 \"age\": record.age,\n                                                 \"pv\": record.pv,\n                                                 \"epv\": record.epv,\n                                                 \"sEpv\": record.sEpv,\n                                                 \"contract\": (record.contract + 1),\n                                                 \"tOption\": record.tOption,\n                                                 \"pOption\": record.pOption,\n                                                 \"renew\": record.renew,\n                                                 \"salary\": record.salary,\n                                                 \"grade\": record.grade,\n                                                 \"lineup\": record.lineup,\n                                                 \"franchiseId\": record.franchise.id,\n                                                 \"trainer\": record.trainer,\n                                                 \"year\": record.year,\n                                                 \"leagueId\": store.User.franchise.league.id\n                                             }\n                                         }, mutateCreatePlayerQuery,\n                                         undefined\n                                     );\n                                 }\n                                 }>\n                                Extend Player\n                            </Tag>\n                        </Space>\n                    ) : (\n                    (record.renew === \"non-repeat\" && record.contract === 1) ? (\n                        <Space size=\"middle\">\n                            <Tag color={\"#FFB4AD\"} style={{color: \"#ffffff\", border: \"2px solid #FFB4AD\"}}\n                                 onClick={() => {\n                                     store.mutateCreatePlayer({\n                                             \"playerInput\": {\n                                                 \"name\": record.name,\n                                                 \"suit\": record.suit,\n                                                 \"age\": record.age,\n                                                 \"pv\": record.pv,\n                                                 \"epv\": record.epv,\n                                                 \"sEpv\": record.sEpv,\n                                                 \"contract\": (record.contract + 1),\n                                                 \"tOption\": record.tOption,\n                                                 \"pOption\": record.pOption,\n                                                 \"renew\": \"No\",\n                                                 \"salary\": record.salary,\n                                                 \"grade\": record.grade,\n                                                 \"lineup\": record.lineup,\n                                                 \"franchiseId\": record.franchise.id,\n                                                 \"trainer\": record.trainer,\n                                                 \"year\": record.year,\n                                                 \"leagueId\": store.User.franchise.league.id\n                                             }\n                                         }, mutateCreatePlayerQuery,\n                                         undefined\n                                     );\n                                 }\n                                 }>\n                                Extend Player\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <span>\n                            {renew}\n                        </span>\n                    )\n                    )\n                ),\n            },\n            {\n                title: 'Salary (m)',\n                dataIndex: 'salary',\n                key: 'salary',\n                sorter: (a: any, b: any) => a.salary - b.salary,\n                render: (salary: number) => <span>{_to_fixed(salary)}</span>,\n            },\n            {\n                title: 'Grade',\n                dataIndex: 'grade',\n                key: 'grade',\n                sorter: (a: any, b: any) => a.grade - b.grade,\n                render: (grade: number) => <span>{_to_fixed(grade)}</span>,\n            },\n            {\n                title: 'Lineup',\n                dataIndex: 'lineup',\n                key: 'lineup',\n                sorter: (a: any, b: any) => a.lineup.localeCompare(b.lineup),\n                render: (lineup: any, record: any) => (\n                    <LineupSelect current_lineup={_lineup(lineup)} record={record} setRosterAlert={setRosterAlert}/>\n                ),\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (record: PlayerTypeModelType) => (\n\n                    (record.contract) ? (\n                        <Space size=\"middle\">\n                            <Tag color={\"#57B43A\"} style={{ color: \"#ffffff\", border: \"3px solid #57B43A\"}}>\n                            Signed\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <Space size=\"middle\">\n                            <Tag icon={<span style={{marginRight: '3px'}} role=\"img\" aria-label=\"player\"> 📝 </span>}\n                                 color={\"#FFDE70\"} style={{ color: \"#000000\", border: \"3px solid #FFDE70\"}}\n                                 onClick={() => {setSelectedPlayer(record); setVisible(true)}}>\n                            Offer Contract\n                            </Tag>\n                        </Space>\n                    )\n                ),\n            },\n        ];\n\n\n        let sEPV_column =\n            {\n                title: 'S EPV',\n                dataIndex: 'sEpv',\n                key: 'sEpv',\n                sorter: (a: any, b: any) => a.sEpv - b.sEpv,\n                render: (sEpv: number) => <span>{sEpv.toFixed(1)}</span>,\n            }\n\n        let trainer_column =\n            {\n                title: 'Trainer',\n                key: 'trainer',\n                render: (record: PlayerTypeModelType) => (\n                    (record.trainer) ? (\n                        <Space size=\"middle\">\n                            <Tag\n                                // icon={<span style={{marginRight: '3px'}} role=\"img\" aria-label=\"player\"> 🏋️‍♂️ </span>}\n                                color={\"#620E81\"} style={{ color: \"#ffffff\", border: \"3px solid #620E81\"}}>\n                            Training\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <Space size=\"middle\">\n                            <Tag\n                                 color={\"#E4B6F7\"} style={{ color: \"#000000\", border: \"3px solid #E4B6F7\"}}\n                                 onClick={() => {setSelectedPlayer(record); setTrainerVisible(true)}}>\n                            Train\n                            </Tag>\n                        </Space>\n                    )\n                ),\n            }\n\n        const columns = () => {\n            if (franchise.gm !== null)\n                if (franchise.gm.trait === \"SCOUTER\") {\n                    let scouter_columns = non_scouter_columns\n                    insertArray(non_scouter_columns, 3, sEPV_column)\n                    return scouter_columns\n                }\n                else if (franchise.gm.trait === \"TRAINER\") {\n                    let trainer_columns = non_scouter_columns\n                    insertArray(non_scouter_columns, 3, trainer_column)\n                    return trainer_columns\n                }\n                else {\n                    return non_scouter_columns\n                }\n            else return non_scouter_columns\n            }\n\n        if (store.User?.franchise === undefined) return <div>loading</div>;\n        else {\n            return (\n                <div>\n                    <SigningModal visible={visible} setVisible={setVisible} selectedplayer={selectedPlayer}/>\n                    <TrainerModal trainerVisible={trainerVisible} setTrainerVisible={setTrainerVisible} selectedplayer={selectedPlayer}/>\n                    {rosterAlert ?\n                        <Alert\n                            style={{marginBottom: '10px'}}\n                            message=\"Illegal Roster\"\n                            description=\"Maximum Starters: 5 Maximum Rotation: 3\"\n                            type=\"error\"\n                            showIcon\n                            closable\n                            onClose={() => setRosterAlert(false)}\n                        />\n                        : null}\n                    <Table columns={columns()} dataSource={toJS(franchise.playerSet)} pagination={false}\n                           rowKey=\"id\"\n                           bordered\n                           style={tableStyles}\n                    />\n                </div>\n            );\n        }\n    }\n)\n\nexport default RosterTable;","import CSS from \"csstype\";\n\nexport const cardStyles: CSS.Properties = {\n    boxShadow: 'rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px'\n};","import React, {useContext} from 'react';\nimport {observer} from 'mobx-react'\nimport {StoreContext} from \"../../../models\";\nimport {Statistic, Row, Col, Card, Select} from 'antd';\nimport {cardStyles} from \"./CardStyles\";\n\nconst {Option} = Select;\n\ninterface IFranchise {\n    franchise: any;\n    setFranchise: any;\n}\n\nexport const StaffCard: React.FunctionComponent<IFranchise> = observer(({franchise, setFranchise}: IFranchise) => {\n\n    const store = useContext(StoreContext)\n\n    return (\n        <div>\n            <Card bordered={false}\n                  key={franchise.id}\n                  style={cardStyles}\n            >\n                <Row gutter={[0, 24]}>\n                    <Col span={12} offset={0}>\n                        <Select defaultValue={franchise.franchise} bordered={false}\n                                style={{\n                                    width: \"80%\",\n                                    borderRadius: \"8px\",\n                                    fontSize: '24px',\n                                    padding: '0.5rem',\n                                }}\n                                onChange={(franchise: string) => setFranchise(store.User.league.franchise(franchise))}\n                        >\n                            {store.User.franchise.league.franchiseSet.map((franchise: any) => (\n                                    <Option key={franchise.franchise} value={franchise.franchise}>\n                                        {franchise.franchise}\n                                    </Option>\n                                )\n                            )}\n                        </Select>\n                    </Col>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"City\"\n                                   value={franchise.stadium ? franchise.stadium.city.city : \"None\"}/>\n                    </Col>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"CityValue\"\n                                   value={franchise.stadium ? franchise.stadium.city.cityValue : \"None\"}/>\n                    </Col>\n                </Row>\n                <Row gutter={[0, 0]}>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"General Manager\"\n                                   value={franchise.gm ? franchise.gm.trait.toLowerCase() : \"None\"}/>\n                    </Col>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"Coach\" value={franchise.coach ? franchise.coach.name : \"None\"}/>\n                    </Col>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"Attribute One\"\n                                   value={franchise.coach ? franchise.coach.attributeOne.toLowerCase() : \"None\"}/>\n                    </Col>\n                    <Col span={6} offset={0}>\n                        <Statistic title=\"Attribute Two\"\n                                   value={franchise.coach ? franchise.coach.attributeTwo.toLowerCase() : \"None\"}/>\n                    </Col>\n                </Row>\n            </Card>\n        </div>\n    );\n})\n\nexport default StaffCard;\n\n","import React, {useContext, useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Modal, Space, Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../../../models\";\nimport {useForm} from \"react-hook-form\";\nimport {buttonStyles, formStyles, inputStyles, labelStyles} from \"../Create/CreateStyles\";\n\ninterface IVisible {\n    editStadiumVisible: boolean;\n    setEditStadiumVisible: (visible: boolean) => void;\n}\n\ntype stadiumConfig = {\n    seats: number;\n    boxes: number;\n};\n\nexport const EditStadiumModal: React.FunctionComponent<IVisible> = observer(({editStadiumVisible, setEditStadiumVisible}: IVisible) => {\n\n        const store = useContext(StoreContext)\n        const {register, handleSubmit, errors} = useForm<stadiumConfig>();\n        const [seats, setSeats] = useState<number>(store.User.franchise.stadium.seats);\n        const [boxes, setBoxes] = useState<number>(store.User.franchise.stadium.boxes);\n        const [total, setTotal] = useState<any>(0);\n\n        // get franchise season set and filter to most current season\n        const [season, setSeason] = useState<any>(store.User.franchise.seasonSet.filter(function (season: any) {\n            return season.season === store.User.franchise.seasonSet[store.User.franchise.seasonSet.length - 1].season;\n        })[0]);\n\n        useEffect(() => {\n            // renovation cost\n            let newTotal = 20000000 * Math.log((store.User.franchise.stadium.maxGrade - store.User.franchise.stadium.grade) + 1);\n            // adding seats cost\n            if (seats > store.User.franchise.stadium.seats) {\n                newTotal += ((seats - store.User.franchise.stadium.seats) * 20000)\n            }\n            // removing seats cost\n            if (store.User.franchise.stadium.seats > seats) {\n                newTotal += ((store.User.franchise.stadium.seats - seats) * 5000)\n            }\n            // adding boxes cost\n            if (boxes > store.User.franchise.stadium.boxes) {\n                newTotal += ((boxes - store.User.franchise.stadium.boxes) * 1000000)\n            }\n            // removing boxes cost\n            if (store.User.franchise.stadium.boxes > boxes) {\n                newTotal += ((store.User.franchise.stadium.boxes - boxes) * 250000)\n            }\n\n            setTotal(newTotal)\n\n        }, [seats, boxes]);\n\n\n        const onSubmit = handleSubmit(({seats, boxes}: stadiumConfig) => {\n            store.mutateUpdateStadium({\n                    \"stadiumInput\": {\n                        \"stadiumName\": store.User.franchise.stadium.stadiumName,\n                        \"seats\": seats,\n                        \"boxes\": boxes,\n                        \"grade\": store.User.franchise.stadium.maxGrade,\n                        \"maxGrade\": store.User.franchise.stadium.maxGrade,\n                        \"homeFieldAdvantage\": 0,\n                        \"cityId\": store.User.franchise.stadium.city.id,\n                        \"franchiseId\": store.User.franchise.id\n                    },\n                },\n                `\n                stadium{\n                    __typename\n                    id\n                    stadiumName\n                    seats\n                    boxes\n                    grade\n                    maxGrade\n                    homeFieldAdvantage\n                    city{\n                        __typename\n                        id\n                        city\n                    }\n                    franchise{\n                        __typename\n                        id\n                        league{\n                            __typename\n                            id\n                            franchiseSet{\n                                __typename\n                                id\n                                stadium{\n                                    __typename\n                                    id\n                                }\n                            }\n                        }\n                    }\n                }\n                `,\n                undefined\n            ).then(() => store.mutateUpdateSeason({\n                    \"seasonInput\": {\n                        'franchiseId': season.franchise.id,\n                        'season': season.season,\n                        'ready': false,\n                        'wins': season.wins,\n                        'losses': season.losses,\n                        'ppg': season.ppg,\n                        'std': season.std,\n                        'championships': season.championships,\n                        'bonuses': season.bonuses,\n                        'penalties': season.penalties,\n                        'fanBase': season.fanBase,\n                        'fanIndex': season.fanIndex,\n                        'advertising': season.advertising,\n                        'ticketPrice': season.ticketPrice,\n                        'ticketsSold': season.ticketsSold,\n                        'boxPrice': season.boxPrice,\n                        'boxesSold': season.boxesSold,\n                        'revenue': season.revenue,\n                        'expenses': (season.expenses + total),\n                    },\n                },\n                `\n                        __typename\n                        season{\n                          __typename\n                          id\n                          franchise{\n                            __typename\n                            id\n                            seasonSet{\n                              __typename\n                              id\n                              season\n                              ready\n                              wins\n                              losses\n                              ppg\n                              std\n                              championships\n                              bonuses\n                              penalties\n                              fanBase\n                              fanIndex\n                              advertising\n                              ticketPrice\n                              ticketsSold\n                              boxPrice\n                              boxesSold\n                              revenue\n                              expenses\n                            }\n                          }\n                        }\n                `,\n                undefined\n            ))\n            setTotal(0)\n            setEditStadiumVisible(false);\n        });\n\n        return (\n            <div>\n                <Modal\n                    centered\n                    closable={false}\n                    visible={editStadiumVisible}\n                    // onOk={() =>\n                    //     onSubmit()\n                    // }\n                    // onCancel={() => setEditStadiumVisible(false)}\n                    footer={[\n                        <Button key={1} style={{...buttonStyles, ...{width: '100px'}}} onClick={() => setEditStadiumVisible(false)}>\n                            Cancel\n                        </Button>,\n                        <Button key={2} style={{...buttonStyles, ...{width: '100px'}}} onClick={() => onSubmit()}>\n                            Confirm\n                        </Button>,\n                    ]}\n                    width={'600px'}\n                >\n                    <form style={formStyles} onSubmit={onSubmit}>\n                        <Space direction=\"vertical\">\n\n                            <label style={labelStyles}>Seats</label>\n                            <input name=\"seats\" type=\"number\" style={inputStyles}\n                                   defaultValue={store.User.franchise.stadium.seats}\n                                   onChange={event => {\n                                       setSeats(event.target.valueAsNumber)\n                                   }}\n                                   ref={register({\n                                       required: {\n                                           value: true,\n                                           message: \"Seats is a required field\",\n                                       },\n                                       min: {\n                                           value: 1,\n                                           message: 'At least 1 seat is required',\n                                       },\n                                   })}/>\n\n                            <label style={labelStyles}>Boxes</label>\n                            <input name=\"boxes\" type=\"number\" style={inputStyles}\n                                   defaultValue={store.User.franchise.stadium.boxes}\n                                   onChange={event => {\n                                       setBoxes(event.target.valueAsNumber)\n                                   }}\n                                   ref={register({\n                                       required: {\n                                           value: true,\n                                           message: \"Boxes is a required field\",\n                                       },\n                                       min: {\n                                           value: 1,\n                                           message: 'At least 1 box is required',\n                                       },\n                                   })}/>\n\n                            <label style={labelStyles}>Current Grade</label>\n                            <span>{store.User.franchise.stadium.grade}</span>\n                            <label style={labelStyles}>Renovated Grade</label>\n                            <span>{store.User.franchise.stadium.maxGrade}</span>\n                            <h3>{total\n                                ?\n                                'Renovation Cost: $' + (total / 1000000).toFixed(3) + ' million'\n                                :\n                                'Renovation Cost: $0'}</h3>\n                        </Space>\n                    </form>\n                </Modal>\n\n            </div>\n        );\n    }\n)\n\nexport default EditStadiumModal;\n","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const StadiumIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n             className=\"ld ld-zoom-in\"\n             style={{animationPlayState: 'running',\n             }}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g fill=\"#61DAFB\"\n            >\n                <path fill=\"#0a4308\"\n                      d=\"M76.971 7.5H23.029a4.087 4.087 0 0 0-4.087 4.087v76.828a4.087 4.087 0 0 0 4.087 4.087h13.308l6.001-.031h15.325l6.025.031h13.284a4.088 4.088 0 0 0 4.087-4.087v-35.35-41.478A4.09 4.09 0 0 0 76.971 7.5z\"></path>\n                <path fill=\"#60a363\"\n                      d=\"M50 37.74c-5.702 0-10.507 3.912-11.872 9.195h23.744C60.508 41.653 55.702 37.74 50 37.74zm0 24.519c5.702 0 10.508-3.913 11.872-9.195H38.128c1.365 5.282 6.17 9.195 11.872 9.195zm13.717-50.672v6.008h-.043a3.065 3.065 0 0 1-3.05 2.767h-21.25a3.065 3.065 0 0 1-3.038-3.455v-5.32H23.029v35.349h8.842C33.335 38.25 40.905 31.611 50 31.611c9.096 0 16.665 6.639 18.129 15.325h8.842V11.587H63.717zm4.412 41.477C66.665 61.75 59.095 68.389 50 68.389S33.336 61.75 31.871 53.064h-8.842v35.349h13.308v-5.138a3.065 3.065 0 0 1 3.038-3.455h21.25a3.061 3.061 0 0 1 3.056 2.903h.006v.114l.002.047-.002.047v5.48h13.284V53.064h-8.842z\"></path>\n                <g>\n                    <path fill=\"#60a363\"\n                          d=\"M57.662 87.564H42.338a2.14 2.14 0 1 1 0-4.282h15.325a2.14 2.14 0 1 1-.001 4.282z\"></path>\n                </g>\n                <g>\n                    <path fill=\"#60a363\"\n                          d=\"M57.662 16.731H42.338a2.14 2.14 0 1 1 0-4.282h15.325a2.14 2.14 0 1 1-.001 4.282z\"></path>\n                </g>\n            </g>\n        </svg>\n    );\n})\n\nexport default StadiumIcon;\n\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react'\nimport {FranchiseTypeModelType} from \"../../../models\";\nimport {Statistic, Row, Col, Card, Tag, Space} from 'antd';\nimport {EditOutlined} from \"@ant-design/icons\";\nimport EditStadiumModal from \"../../Molecules/Modals/EditStadiumModal\";\nimport StadiumIcon from \"../../Atoms/Icons/StadiumIcon\";\nimport {cardStyles} from \"./CardStyles\";\n\ninterface IFranchise {\n    franchise: FranchiseTypeModelType;\n}\n\nexport const StadiumCard: React.FunctionComponent<IFranchise> = observer(({franchise}: IFranchise) => {\n\n    const [editStadiumVisible, setEditStadiumVisible] = useState<boolean>(false)\n\n    return (\n        <div>\n            <EditStadiumModal editStadiumVisible={editStadiumVisible}\n                                  setEditStadiumVisible={setEditStadiumVisible}/>\n                <Row gutter={[0, 24]}>\n                    <Col span={24}>\n                        <Card bordered={false}\n                              key={franchise.id}\n                              style={cardStyles}\n                        >\n                            <Row gutter={[0, 24]}>\n                                <Col span={8} offset={0}>\n                                    <Statistic title=\"Stadium\" value={franchise.stadium.stadiumName}/>\n                                </Col>\n                                <Col span={8} offset={0}>\n                                    <Statistic title=\"Seats\" value={franchise.stadium.seats}/>\n                                </Col>\n                                <Col span={6} offset={0}>\n                                    <Statistic title=\"Boxes\" value={franchise.stadium.boxes}/>\n                                </Col>\n                                <Col span={2} offset={0}>\n                                    <Space size=\"middle\">\n                                        <Tag icon={<EditOutlined/>}\n                                             color={\"#eeeeee\"}\n                                             style={{color: \"#000000\", border: \"3px solid #eeeeee\", cursor: \"pointer\"}}\n                                             onClick={() => {\n                                                 setEditStadiumVisible(true)\n                                             }}>\n                                            Edit\n                                        </Tag>\n                                    </Space>\n                                </Col>\n                            </Row>\n                            <Row gutter={[0, 0]}>\n                                <Col span={8} offset={0}>\n                                    <Statistic title=\"Grade\" value={franchise.stadium.grade}/>\n                                </Col>\n                                <Col span={8} offset={0}>\n                                    <Statistic title=\"Max Grade\" value={franchise.stadium.maxGrade}/>\n                                </Col>\n                                <Col span={6} offset={0}>\n                                    <Statistic title=\"Home Field Advantage\"\n                                               value={franchise.stadium.homeFieldAdvantage}/>\n                                </Col>\n                                <Col span={2} offset={0}>\n                                        <StadiumIcon/>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n        </div>\n    );\n})\n\nexport default StadiumCard;\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\nimport {Statistic, Row, Col, Card} from 'antd';\nimport {cardStyles} from \"./CardStyles\";\n\ninterface IFranchise {\n    franchise: any;\n}\n\nexport const LineupStatsCard: React.FunctionComponent<IFranchise> = observer(({franchise}: IFranchise) => {\n\n    return (\n        <div>\n        <Card bordered={false}\n              key={franchise.id}\n              style={cardStyles}>\n            <Row gutter={[0, 0]}>\n                <Col span={4} offset={0}>\n                    {(franchise.gm?.trait === 'SUITOR')\n                            ?\n                            <Statistic title=\"Suit bonus\" value={franchise.suitBonus + ' (zero)'}/>\n                            :\n                            <Statistic title=\"Suit bonus\" value={franchise.suitBonus}/>\n                    }\n                </Col>\n                <Col span={4} offset={0}>\n                    {(franchise.gm?.trait === 'SCOUTER')\n                            ?\n                            <Statistic title=\"Starting S EPV\" precision={2} value={franchise.sEpv}/>\n                            :\n                            <Statistic title=\"Starting EPV\" precision={2} value={franchise.epv}/>\n                    }\n                </Col>\n                <Col span={4} offset={0}>\n                    <Statistic title=\"Mean Age\" precision={2} value={franchise.meanAge}/>\n                </Col>\n                <Col span={4} offset={0}>\n                    <Statistic title=\"Salaries (m)\" prefix={'$'} precision={2}\n                               value={franchise.salaries}/>\n                </Col>\n            </Row>\n        </Card>\n        </div>\n    );\n})\n\nexport default LineupStatsCard;\n\n","import React, {useContext, useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Checkbox, Button, Popconfirm} from 'antd';\nimport {ActionTypeModelType, FranchiseTypeModelType, StoreContext} from \"../../../models\";\nimport {observer} from \"mobx-react\";\nimport {IObservableArray, observable} from \"mobx\";\nimport {buttonStyles, tableStyles} from \"./TableStyles\";\nimport {userQuery} from \"../../Utils/queries\";\nimport {actionError} from \"../../Atoms/notificationerrors\";\n\ninterface IFranchise {\n    franchise: FranchiseTypeModelType;\n}\n\nexport const ActionTable: React.FunctionComponent<IFranchise> = observer(({franchise}: IFranchise) => {\n\n        const store = useContext(StoreContext)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        let facilitatorBonus = 2\n\n        // need this useEffect since state of selected actions not switching when change franchise\n        useEffect(() => {\n            setImprovedBathrooms(franchise.action.improvedBathrooms)\n            setImprovedConcessions(franchise.action.improvedConcessions)\n            setJumbotron(franchise.action.jumbotron)\n            setUpscaleBar(franchise.action.upscaleBar)\n            setHallOfFame(franchise.action.hallOfFame)\n            setImprovedSeating(franchise.action.improvedSeating)\n            setImprovedSound(franchise.action.improvedSound)\n            setPartyDeck(franchise.action.partyDeck)\n            setWiFi(franchise.action.wiFi)\n            setFanNight(franchise.action.fanNight)\n            setFamilyGame(franchise.action.familyGame)\n            setDoorPrizes(franchise.action.doorPrizes)\n            setMvpNight(franchise.action.mvpNight)\n            setParadeOfChampions(franchise.action.paradeOfChampions)\n            setBribeTheRefs(franchise.action.bribeTheRefs)\n            setEasyRuns(franchise.action.easyRuns)\n            setFanFactor(franchise.action.fanFactor)\n            setFanFavourites(franchise.action.fanFavourites)\n            setGourmetRestaurant(franchise.action.gourmetRestaurant)\n            setBeerGarden(franchise.action.beerGarden)\n            setNamingRights(franchise.action.namingRights)\n            setEventPlanning(franchise.action.eventPlanning)\n        }, [franchise])\n\n        const [improvedBathrooms, setImprovedBathrooms] = useState<boolean | undefined>(franchise.action.improvedBathrooms)\n        const [improvedConcessions, setImprovedConcessions] = useState<boolean | undefined>(franchise.action.improvedConcessions)\n        const [jumbotron, setJumbotron] = useState<boolean | undefined>(franchise.action.jumbotron)\n        const [upscaleBar, setUpscaleBar] = useState<boolean | undefined>(franchise.action.upscaleBar)\n        const [hallOfFame, setHallOfFame] = useState<boolean | undefined>(franchise.action.hallOfFame)\n        const [improvedSeating, setImprovedSeating] = useState<boolean | undefined>(franchise.action.improvedSeating)\n        const [improvedSound, setImprovedSound] = useState<boolean | undefined>(franchise.action.improvedSound)\n        const [partyDeck, setPartyDeck] = useState<boolean | undefined>(franchise.action.partyDeck)\n        const [wiFi, setWiFi] = useState<boolean | undefined>(franchise.action.wiFi)\n        const [fanNight, setFanNight] = useState<boolean | undefined>(franchise.action.fanNight)\n        const [familyGame, setFamilyGame] = useState<boolean | undefined>(franchise.action.familyGame)\n        const [doorPrizes, setDoorPrizes] = useState<boolean | undefined>(franchise.action.doorPrizes)\n        const [mvpNight, setMvpNight] = useState<boolean | undefined>(franchise.action.mvpNight)\n        const [paradeOfChampions, setParadeOfChampions] = useState<boolean | undefined>(franchise.action.paradeOfChampions)\n        const [bribeTheRefs, setBribeTheRefs] = useState<boolean | undefined>(franchise.action.bribeTheRefs)\n        const [easyRuns, setEasyRuns] = useState<boolean | undefined>(franchise.action.easyRuns)\n        const [fanFactor, setFanFactor] = useState<boolean | undefined>(franchise.action.fanFactor)\n        const [fanFavourites, setFanFavourites] = useState<boolean | undefined>(franchise.action.fanFavourites)\n        const [gourmetRestaurant, setGourmetRestaurant] = useState<boolean | undefined>(franchise.action.gourmetRestaurant)\n        const [beerGarden, setBeerGarden] = useState<boolean | undefined>(franchise.action.beerGarden)\n        const [namingRights, setNamingRights] = useState<boolean | undefined>(franchise.action.namingRights)\n        const [eventPlanning, setEventPlanning] = useState<boolean | undefined>(franchise.action.eventPlanning)\n\n\n        const actionChecker = (franchise: any) => {\n            let oldActions = [franchise.action.improvedBathrooms, franchise.action.improvedConcessions, franchise.action.jumbotron,\n                franchise.action.upscaleBar, franchise.action.hallOfFame, franchise.action.improvedSeating, franchise.action.improvedSound,\n                franchise.action.partyDeck, franchise.action.wiFi, franchise.action.fanNight, franchise.action.familyGame,\n                franchise.action.doorPrizes, franchise.action.mvpNight, franchise.action.paradeOfChampions, franchise.action.bribeTheRefs,\n                franchise.action.easyRuns, franchise.action.fanFactor, franchise.action.fanFavourites, franchise.action.gourmetRestaurant,\n                franchise.action.beerGarden, franchise.action.namingRights, franchise.action.eventPlanning]\n            let newActions = [improvedBathrooms, improvedConcessions, jumbotron, upscaleBar,\n                hallOfFame, improvedSeating, improvedSound, partyDeck, wiFi, fanNight, familyGame, doorPrizes, mvpNight,\n                paradeOfChampions, bribeTheRefs, easyRuns, fanFactor, fanFavourites, gourmetRestaurant, beerGarden,\n                namingRights, eventPlanning]\n\n            let oldTrue = oldActions.filter(x => x === true).length\n            let newTrue = newActions.filter(x => x === true).length\n\n            let numberOfActions = franchise.action.numberOfActions\n            if (franchise.gm?.trait === \"FACILITATOR\") {\n                // @ts-ignore\n                numberOfActions += facilitatorBonus\n            }\n\n\n            let actionsSelected = newTrue - oldTrue\n            // @ts-ignore\n            if (actionsSelected > numberOfActions)\n                return actionError(franchise.franchise);\n            else {\n                // @ts-ignore\n                submitActions(actionsSelected)\n            }\n        }\n\n\n        const submitActions = (actionsSelected: number) => {\n\n            store.mutateUpdateAction({\n                    \"actionInput\": {\n                        // @ts-ignore\n                        \"numberOfActions\": (franchise.action.numberOfActions - actionsSelected),\n                        \"improvedBathrooms\": improvedBathrooms,\n                        \"improvedConcessions\": improvedConcessions,\n                        \"jumbotron\": jumbotron,\n                        \"upscaleBar\": upscaleBar,\n                        \"hallOfFame\": hallOfFame,\n                        \"improvedSeating\": improvedSeating,\n                        \"improvedSound\": improvedSound,\n                        \"partyDeck\": partyDeck,\n                        \"wiFi\": wiFi,\n                        \"fanNight\": fanNight,\n                        \"familyGame\": familyGame,\n                        \"doorPrizes\": doorPrizes,\n                        \"mvpNight\": mvpNight,\n                        \"paradeOfChampions\": paradeOfChampions,\n                        \"bribeTheRefs\": bribeTheRefs,\n                        \"easyRuns\": easyRuns,\n                        \"fanFactor\": fanFactor,\n                        \"trainPlayer\": 2,\n                        \"farmSystem\": false,\n                        \"fanFavourites\": fanFavourites,\n                        \"gourmetRestaurant\": gourmetRestaurant,\n                        \"beerGarden\": beerGarden,\n                        \"namingRights\": namingRights,\n                        \"eventPlanning\": eventPlanning,\n                        \"franchiseId\": franchise.id\n                    }\n                }, `__typename\n                                    action{\n                                      __typename\n                                      id\n                                      franchise{\n                                        __typename\n                                        id\n                                        user{\n                                          __typename\n                                          id\n                                          franchise{\n                                            __typename\n                                            id\n                                            action{\n                                          __typename\n                                          id\n                                          numberOfActions\n                                          improvedBathrooms\n                                          improvedConcessions\n                                          jumbotron\n                                          upscaleBar\n                                          hallOfFame\n                                          improvedSeating\n                                          improvedSound\n                                          partyDeck\n                                          wiFi\n                                          fanNight\n                                          familyGame\n                                          doorPrizes\n                                          mvpNight\n                                          paradeOfChampions\n                                          bribeTheRefs\n                                          easyRuns\n                                          fanFactor\n                                          trainPlayer\n                                          farmSystem\n                                          fanFavourites\n                                          gourmetRestaurant\n                                          beerGarden\n                                          namingRights\n                                          eventPlanning\n                                          }\n                                         league{\n                                          __typename\n                                          id\n                                          franchiseSet{\n                                            __typename\n                                            id\n                                            action{\n                                              __typename\n                                              id\n                                              numberOfActions\n                                              improvedBathrooms\n                                              improvedConcessions\n                                              jumbotron\n                                              upscaleBar\n                                              hallOfFame\n                                              improvedSeating\n                                              improvedSound\n                                              partyDeck\n                                              wiFi\n                                              fanNight\n                                              familyGame\n                                              doorPrizes\n                                              mvpNight\n                                              paradeOfChampions\n                                              bribeTheRefs\n                                              easyRuns\n                                              fanFactor\n                                              trainPlayer\n                                              farmSystem\n                                              fanFavourites\n                                              gourmetRestaurant\n                                              beerGarden\n                                              namingRights\n                                              eventPlanning\n                                              franchise{\n                                                __typename\n                                                id\n                                              }\n                                            }\n                                          }\n                                        }\n                                          }\n                                        }\n                                  }\n                                }\n                                `,\n                undefined\n            );\n            // overkill query since mutation response not re-rendering action table correctly\n            store.queryUser(\n                {email: email},\n                userQuery\n            )\n        }\n\n        const columns = [\n            {\n                title: 'Actions',\n                dataIndex: \"numberOfActions\",\n                key: \"numberOfActions\",\n                fixed: 'left',\n                render: (numberOfActions: number) => (\n                    ((franchise.gm?.trait === \"FACILITATOR\") ?\n                            <span>{numberOfActions + facilitatorBonus}</span> :\n                            <span>{numberOfActions}</span>\n                    )\n                )\n            },\n            {\n                title: 'Imp. Bathrooms',\n                dataIndex: \"improvedBathrooms\",\n                key: \"improvedBathrooms\",\n                render: (improvedBathrooms: boolean) => (\n                    ((franchise.action.improvedBathrooms === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={improvedBathrooms}\n                                      onChange={(e) => setImprovedBathrooms(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Imp. Concessions',\n                dataIndex: \"improvedConcessions\",\n                key: \"improvedConcessions\",\n                render: (improvedConcessions: boolean) => (\n                    ((franchise.action.improvedConcessions === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={improvedConcessions}\n                                      onChange={(e) => setImprovedConcessions(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Jumbotron',\n                dataIndex: \"jumbotron\",\n                key: \"jumbotron\",\n                render: (jumbotron: boolean) => (\n                    ((franchise.action.jumbotron === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={jumbotron}\n                                      onChange={(e) => setJumbotron(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Upscale Bar',\n                dataIndex: \"upscaleBar\",\n                key: \"upscaleBar\",\n                render: (upscaleBar: boolean) => (\n                    ((franchise.action.upscaleBar === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            ((franchise.action.improvedConcessions === true) ?\n                                    <Checkbox defaultChecked={upscaleBar}\n                                              onChange={(e) => setUpscaleBar(e.target.checked)}></Checkbox>\n                                    :\n                                    <Checkbox disabled></Checkbox>\n                            )\n                    )\n                ),\n            },\n            {\n                title: 'Hall Of Fame',\n                dataIndex: \"hallOfFame\",\n                key: \"hallOfFame\",\n                render: (hallOfFame: boolean) => (\n                    ((franchise.action.hallOfFame === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            // @ts-ignore\n                            ((franchise.championships > 0) ?\n                                    <Checkbox defaultChecked={hallOfFame}\n                                              onChange={(e) => setHallOfFame(e.target.checked)}></Checkbox>\n                                    :\n                                    <Checkbox disabled></Checkbox>\n                            )\n                    )\n                ),\n            },\n            {\n                title: 'Imp. Seating',\n                dataIndex: \"improvedSeating\",\n                key: \"improvedSeating\",\n                render: (improvedSeating: boolean) => (\n                    ((franchise.action.improvedSeating === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={improvedSeating}\n                                      onChange={(e) => setImprovedSeating(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Imp. Sound',\n                dataIndex: \"improvedSound\",\n                key: \"improvedSound\",\n                render: (improvedSound: boolean) => (\n                    ((franchise.action.improvedSound === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={improvedSound}\n                                      onChange={(e) => setImprovedSound(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Party Deck',\n                dataIndex: \"partyDeck\",\n                key: \"partyDeck\",\n                render: (partyDeck: boolean) => (\n                    ((franchise.action.partyDeck === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={partyDeck}\n                                      onChange={(e) => setPartyDeck(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'wiFi',\n                dataIndex: \"wiFi\",\n                key: \"wiFi\",\n                render: (wiFi: boolean) => (\n                    ((franchise.action.wiFi === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={wiFi} onChange={(e) => setWiFi(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Fan Night',\n                dataIndex: \"fanNight\",\n                key: \"fanNight\",\n                render: (fanNight: boolean) => (\n                    ((franchise.gm?.trait === \"PROMOTER\") ?\n                            <Checkbox defaultChecked={fanNight} onChange={(e) => setFanNight(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Family Game',\n                dataIndex: \"familyGame\",\n                key: \"familyGame\",\n                render: (familyGame: boolean) => (\n                    ((franchise.gm?.trait === \"PROMOTER\") ?\n                            <Checkbox defaultChecked={familyGame}\n                                      onChange={(e) => setFamilyGame(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Door Prizes',\n                dataIndex: \"doorPrizes\",\n                key: \"doorPrizes\",\n                render: (doorPrizes: boolean) => (\n                    ((franchise.gm?.trait === \"PROMOTER\") ?\n                            <Checkbox defaultChecked={doorPrizes}\n                                      onChange={(e) => setDoorPrizes(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'MVP Night',\n                dataIndex: \"mvpNight\",\n                key: \"mvpNight\",\n                render: (mvpNight: boolean) => (\n                    // @ts-ignore\n                    ((franchise.gm?.trait === \"PROMOTER\" && franchise.championships > 0) ?\n                            <Checkbox defaultChecked={mvpNight} onChange={(e) => setMvpNight(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Parade of Champions',\n                dataIndex: \"paradeOfChampions\",\n                key: \"paradeOfChampions\",\n                render: (paradeOfChampions: boolean) => (\n                    // @ts-ignore\n                    ((franchise.gm?.trait === \"PROMOTER\" && franchise.championships > 0) ?\n                            <Checkbox defaultChecked={paradeOfChampions}\n                                      onChange={(e) => setParadeOfChampions(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Easy Runs',\n                dataIndex: \"easyRuns\",\n                key: \"easyRuns\",\n                render: (easyRuns: boolean) => (\n                    ((franchise.action.easyRuns === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={easyRuns} onChange={(e) => setEasyRuns(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Fan Factor',\n                dataIndex: \"fanFactor\",\n                key: \"fanFactor\",\n                render: (fanFactor: boolean) => (\n                    // @ts-ignore\n                    ((franchise.seasonSet[franchise.seasonSet.length - 1].fanIndex > 120) ?\n                            <Checkbox defaultChecked={fanFactor}\n                                      onChange={(e) => setFanFactor(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Fan Favourites',\n                dataIndex: \"fanFavourites\",\n                key: \"fanFavourites\",\n                render: (fanFavourites: boolean) => (\n                    ((franchise.action.fanFavourites === true) ?\n                            <Checkbox disabled defaultChecked={true}></Checkbox>\n                            :\n                            ((franchise.action.improvedConcessions === true) ?\n                                    <Checkbox defaultChecked={fanFavourites}\n                                              onChange={(e) => setFanFavourites(e.target.checked)}></Checkbox>\n                                    :\n                                    <Checkbox disabled></Checkbox>\n                            )\n                    )\n                ),\n            },\n            {\n                title: 'Gourmet Restaurant',\n                dataIndex: \"gourmetRestaurant\",\n                key: \"gourmetRestaurant\",\n                render: (gourmetRestaurant: boolean) => (\n                    ((franchise.action.gourmetRestaurant === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={gourmetRestaurant}\n                                      onChange={(e) => setGourmetRestaurant(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Beer Garden',\n                dataIndex: \"beerGarden\",\n                key: \"beerGarden\",\n                render: (beerGarden: boolean) => (\n                    ((franchise.action.upscaleBar === true) ?\n                            <Checkbox defaultChecked={beerGarden}\n                                      onChange={(e) => setBeerGarden(e.target.checked)}></Checkbox>\n                            :\n                            <Checkbox disabled></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Naming Rights',\n                dataIndex: \"namingRights\",\n                key: \"namingRights\",\n                render: (namingRights: boolean) => (\n                    ((franchise.action.namingRights === true) ?\n                            <div>\n                                <span style={{color: \"grey\", marginRight: \"5px\"}}>used</span>\n                                <Checkbox disabled defaultChecked={true}></Checkbox>\n                            </div>\n                            :\n                            <Checkbox defaultChecked={namingRights}\n                                      onChange={(e) => setNamingRights(e.target.checked)}></Checkbox>\n                    )\n                ),\n            },\n            {\n                title: 'Event Planning',\n                dataIndex: \"eventPlanning\",\n                key: \"eventPlanning\",\n                render: (eventPlanning: boolean) => (\n                    <Checkbox defaultChecked={eventPlanning}\n                              onChange={(e) => setEventPlanning(e.target.checked)}></Checkbox>\n                ),\n            },\n            {\n                title: 'Confirm',\n                key: \"Confirm\",\n                fixed: 'right',\n                render: () => (\n                    <Popconfirm\n                        title=\"Are you sure to choose these actions?\"\n                        onConfirm={() => actionChecker(franchise)}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        placement=\"left\"\n                    >\n                    <Button style={{...buttonStyles, ...{marginBottom: '12px', marginTop: '10px'}}}>\n                        Confirm\n                    </Button>\n                    </Popconfirm>\n                ),\n            }\n        ];\n\n        let actions: IObservableArray<ActionTypeModelType> = observable([franchise.action])\n        // hack to re-render number of actions when train player is used\n        console.log(franchise.action.numberOfActions)\n\n        if (store.User?.franchise?.action === undefined) return <div>loading</div>;\n        else {\n            return (\n                <div>\n                    <Table\n                        // @ts-ignore\n                        columns={columns} dataSource={actions} pagination={false}\n                        rowKey=\"id\"\n                        bordered\n                        scroll={{x: 'max-content'}}\n                        style={tableStyles}\n                    />\n                </div>\n            );\n        }\n    }\n)\n\nexport default ActionTable;\n","import {notification} from \"antd\";\n\n\nexport const actionError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Action Error',\n        description: franchise + ' does not have enough actions',\n        duration: 10,\n    });\n};\n\nexport const ticketError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Ticket Error',\n        description: franchise + ' do not have prices set',\n        duration: 10,\n    });\n};\n\nexport const unusedActionError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Unused Actions Error',\n        description: franchise + ' still have actions available',\n        duration: 10,\n    });\n};\n\nexport const rosterError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Roster Error',\n        description: franchise + ' do not have enough players',\n        duration: 10,\n    });\n};\n\nexport const lineupError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Lineup Error',\n        description: franchise + ' have players with no lineup assigned',\n        duration: 10,\n    });\n};\n\nexport const unsignedError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Unsigned Error',\n        description: franchise + ' have unsigned players',\n        duration: 10,\n    });\n};\n\nexport const starterError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Starter Error',\n        description: franchise + ' do not have 5 starters',\n        duration: 10,\n    });\n};\n\nexport const staffError = (franchise: string | undefined) => {\n    notification.error({\n        message: 'Staff Error',\n        description: franchise + ' are not fully staffed',\n        duration: 10,\n    });\n};","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Select, Row, Col, Popconfirm, Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {IObservableArray, observable, toJS} from 'mobx';\nimport {FranchiseTypeModelType, SeasonTypeModelType, StoreContext} from \"../../../models\";\nimport {useForm} from \"react-hook-form\";\nimport {inputStyles, buttonStyles, tableStyles} from \"./TableStyles\";\n\nconst {Option} = Select;\n\ninterface IFranchise {\n    franchise: FranchiseTypeModelType;\n}\n\ntype priceConfig = {\n    advertising: number;\n    ticketPrice: number;\n    boxPrice: number;\n};\n\nexport const TicketTable: React.FunctionComponent<IFranchise> = observer(({franchise}: IFranchise) => {\n\n        const store = useContext(StoreContext)\n        const {register, handleSubmit} = useForm<priceConfig>();\n\n        // get franchise season set and filter to most current season\n        const [season, setSeason] = useState<any>(franchise.seasonSet.filter(function (season: any) {\n            return season.season === franchise.seasonSet[franchise.seasonSet.length - 1].season;\n        }));\n\n        // hack to get ticket table to render when switching seasons\n        const [seasonNum, setSeasonNum] = useState<any>(franchise.seasonSet.length - 1)\n        const changeSeason = (season_num: number) => {\n            setSeason(store.User.franchise.seasonSet.filter(function (season: any) {\n                            return season.season === season_num}))\n            setSeasonNum(season_num-1)\n        }\n\n        const onSubmit = handleSubmit(({advertising, ticketPrice, boxPrice}: priceConfig) => {\n            // season returns a single-object array. Need this to get the object\n            let season_obj = season[0]\n            store.mutateUpdateSeason({\n                    \"seasonInput\": {\n                        'franchiseId': season_obj.franchise.id,\n                        'season': season_obj.season,\n                        'ready': false,\n                        'wins': season_obj.wins,\n                        'losses': season_obj.losses,\n                        'ppg': season_obj.ppg,\n                        'std': season_obj.std,\n                        'championships': season_obj.championships,\n                        'bonuses': season_obj.bonuses,\n                        'penalties': season_obj.penalties,\n                        'fanBase': season_obj.fanBase,\n                        'fanIndex': season_obj.fanIndex,\n                        'advertising': advertising,\n                        'ticketPrice': ticketPrice,\n                        'ticketsSold': season_obj.ticketsSold,\n                        'boxPrice': boxPrice,\n                        'boxesSold': season_obj.boxesSold,\n                        'revenue': season_obj.revenue,\n                        'expenses': season_obj.expenses,\n                    },\n                },\n                `\n                        __typename\n                        season{\n                          __typename\n                          id\n                          franchise{\n                            __typename\n                            id\n                            seasonSet{\n                              __typename\n                              id\n                              season\n                              ready\n                              wins\n                              losses\n                              ppg\n                              std\n                              championships\n                              bonuses\n                              penalties\n                              fanBase\n                              fanIndex\n                              advertising\n                              ticketPrice\n                              ticketsSold\n                              boxPrice\n                              boxesSold\n                              revenue\n                              expenses\n                            }\n                          }\n                        }\n                `,\n                undefined\n            )\n        });\n\n        const columns = [\n            {\n                title: 'Season',\n                key: 'season',\n                render: (season: SeasonTypeModelType) => (\n                    <Select\n                        defaultValue={season.season}\n                        bordered={false}\n                        style={{\n                            width: \"100%\",\n\n                            borderRadius: \"8px\",\n                            fontSize: '24px',\n                            padding: '0.5rem',\n                            textAlignLast: 'center',\n                        }}\n                        onChange={(season_num: number) => changeSeason(season_num)}>\n                        {store.User.franchise.seasonSet.map((season: any) =>\n                            (\n                                <Option key={season.season} value={season.season}>\n                                    {season.season}\n                                </Option>\n                            )\n                        )}\n                    </Select>\n                ),\n            },\n            {\n                title: 'Fan Base',\n                dataIndex: 'fanBase',\n                key: 'fanBase',\n                sorter: (a: any, b: any) => a.fanBase - b.fanBase,\n                render: (fanBase: number) => <span>{fanBase.toFixed(1)}</span>,\n            },\n            {\n                title: 'Fan Index',\n                dataIndex: 'fanIndex',\n                key: 'fanIndex',\n                sorter: (a: any, b: any) => a.fanIndex - b.fanIndex,\n                render: (fanIndex: number) => <span>{fanIndex.toFixed(1)}</span>,\n            },\n            {\n                title: 'Advertising',\n                dataIndex: 'advertising',\n                key: 'advertising',\n                render: (advertising: number) => (\n                    ((season.ticketPrice > 0 && season.boxPrice > 0) || advertising > 1) ? (\n                        <span>{advertising}</span>\n                    ) : (\n                        <div>\n                            <form onSubmit={onSubmit}>\n                            <input name=\"advertising\" type=\"number\" max={10} style={inputStyles} ref={register({\n                                valueAsNumber: true,\n                                required: {\n                                    value: true,\n                                    message: \"Advertising is a required field\",\n                                },\n                                min: {\n                                    value: 1,\n                                    message: 'Advertising need to be 1 minimum',\n                                },\n                                max: {\n                                    value: 10,\n                                    message: 'Advertising need to be 10 maximum',\n                                },\n                            })}/>\n                            </form>\n                        </div>\n                    )\n                )\n            },\n            {\n                title: 'Ticket Price',\n                dataIndex: 'ticketPrice',\n                key: 'ticketPrice',\n                render: (ticketPrice: number) => (\n\n                    (ticketPrice > 0) ? (\n                        <span>{ticketPrice.toFixed(0)}</span>\n                    ) : (\n                        <div>\n                            <form onSubmit={onSubmit}>\n                            <input name=\"ticketPrice\" type=\"number\" style={inputStyles} ref={register({\n                                valueAsNumber: true,\n                                required: {\n                                    value: true,\n                                    message: \"Ticket Price is a required field\",\n                                },\n                                min: {\n                                    value: 1,\n                                    message: 'Tickets need to be $1 minimum',\n                                },\n                            })}/>\n\n                            </form>\n                        </div>\n                    )\n                ),\n            },\n            {\n                title: 'Tickets Sold',\n                dataIndex: 'ticketsSold',\n                key: 'ticketsSold',\n            },\n            {\n                title: 'Box Price',\n                dataIndex: 'boxPrice',\n                key: 'boxPrice',\n                render: (boxPrice: number) => (\n\n                    (boxPrice > 0) ? (\n                        <span>{boxPrice.toFixed(0)}</span>\n                    ) : (\n                        <div>\n                            <form onSubmit={onSubmit}>\n                            <input name=\"boxPrice\" type=\"number\" style={inputStyles} ref={register({\n                                valueAsNumber: true,\n                                required: {\n                                    value: true,\n                                    message: \"Ticket Price is a required field\",\n                                },\n                                min: {\n                                    value: 1,\n                                    message: 'Tickets need to be $1 minimum',\n                                },\n                            })}/>\n                            </form>\n                        </div>\n                    )\n                ),\n            },\n            {\n                title: 'Boxes Sold',\n                dataIndex: 'boxesSold',\n                key: 'boxesSold',\n            },\n            {\n                title: 'Confirm',\n                key: 'confirm',\n                render: () => (\n                    <Popconfirm\n                        title=\"Are you sure to choose these prices?\"\n                        onConfirm={() => onSubmit()}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        placement=\"left\"\n                    >\n                        <Button style={{...buttonStyles, ...{marginBottom: '12px', marginTop: '10px'}}}>\n                            Confirm\n                        </Button>\n                    </Popconfirm>\n                ),\n            },\n        ];\n\n        // need to make observable to update table (season from useState not being observed by ant d table)\n        const seasonJS: IObservableArray<SeasonTypeModelType> = observable(franchise.seasonSet.filter(function (season: any) {\n            return season.season === franchise.seasonSet[seasonNum].season;\n        }))\n\n        return (\n            <div>\n                <Row gutter={[0, 24]}>\n                    <Col span={24} offset={0}>\n                        <Table\n                            rowKey=\"id\"\n                            // @ts-ignore (need this to add defaultSorter for Wins)\n                            columns={columns}\n                            dataSource={toJS(seasonJS)}\n                            pagination={false}\n                            bordered\n                            style={tableStyles}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n)\n\nexport default TicketTable;\n","import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../../../models\";\nimport {useForm} from \"react-hook-form\";\nimport {Alert, Card, Space} from \"antd\";\nimport {Select} from \"../../Atoms/Select\";\nimport {buttonStyles, cardStyles, formStyles, inputStyles, labelStyles} from \"./CreateStyles\";\n\ntype stadiumConfig = {\n    stadiumName: string;\n    seats: number;\n    boxes: number;\n    city: string;\n    total: number;\n    franchise: string;\n};\n\nexport const CreateStadium: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n        const {register, handleSubmit, errors} = useForm<stadiumConfig>();\n        const onSubmit = handleSubmit(({stadiumName, seats, boxes, city, total, franchise}: stadiumConfig) => {\n            console.log(stadiumName, seats, boxes, city, total, franchise);\n            store.mutateCreateStadium({\n                    \"stadiumInput\": {\n                        \"stadiumName\": stadiumName,\n                        \"seats\": seats,\n                        \"boxes\": boxes,\n                        \"grade\": 20,\n                        \"maxGrade\": 20,\n                        \"homeFieldAdvantage\": 0,\n                        \"cityId\": city,\n                        \"franchiseId\": franchise\n                    },\n                },\n                `\n                stadium{\n                    __typename\n                    id\n                    stadiumName\n                    seats\n                    boxes\n                    grade\n                    maxGrade\n                    homeFieldAdvantage\n                    city{\n                        __typename\n                        id\n                        city\n                    }\n                    franchise{\n                        __typename\n                        id\n                        league{\n                            __typename\n                            id\n                            franchiseSet{\n                                __typename\n                                id\n                                stadium{\n                                    __typename\n                                    id\n                                }\n                            }\n                        }\n                    }\n                }\n                `,\n                undefined\n            )\n        });\n\n        const [seats, setSeats] = useState<number>(0);\n        const [boxes, setBoxes] = useState<number>(0);\n        const [total, setTotal] = useState<number>(0);\n        const [city, setCity] = useState<string>(\"\");\n\n        useEffect(() => {\n            setTotal((seats * 15000) + (boxes * 500000));\n        }, [seats, boxes]);\n\n\n        if (store.User?.franchise == undefined) return (\n        <h1 className=\"ld ld-jump-alt-in\" style={{textAlign: 'center', marginTop: '40px', fontSize: '32px'}}>\n            Missing Franchise\n        </h1>\n    )\n    else\n        {\n            return (\n                <form style={formStyles} onSubmit={onSubmit}>\n                    <Card style={{...{marginBottom: '20px'}, ...{cardStyles}}} title=\"Create Stadium\">\n                        <Space direction=\"vertical\">\n                            <label style={labelStyles}>Stadium Name:</label>\n                            <input name=\"stadiumName\" style={inputStyles} ref={register({\n                                required: {\n                                    value: true,\n                                    message: \"Stadium name is a required field\",\n                                },\n                                maxLength: {\n                                    value: 20,\n                                    message: 'Max stadium name length is 20',\n                                },\n                            })}/>\n                            {errors.stadiumName &&\n                            <Alert message={errors.stadiumName.message} type=\"error\" closable/>}\n\n                            <label style={labelStyles}>Seats:</label>\n                            <input name=\"seats\" type=\"number\" style={inputStyles} onChange={event => {\n                                setSeats(event.target.valueAsNumber)\n                            }} ref={register({\n                                valueAsNumber: true,\n                                required: {\n                                    value: true,\n                                    message: \"Seats is a required field\",\n                                },\n                                min: {\n                                    value: 1,\n                                    message: 'At least 1 seat is required',\n                                },\n                            })}/>\n                            {errors.seats && <Alert message={errors.seats.message} type=\"error\" closable/>}\n\n                            <label style={labelStyles}>Boxes:</label>\n                            <input name=\"boxes\" type=\"number\" style={inputStyles} onChange={event => {\n                                setBoxes(event.target.valueAsNumber)\n                            }} ref={register({\n                                valueAsNumber: true,\n                                required: {\n                                    value: true,\n                                    message: \"Boxes is a required field\",\n                                },\n                                min: {\n                                    value: 1,\n                                    message: 'At least 1 box is required',\n                                },\n                            })}/>\n                            {errors.boxes && <Alert message={errors.boxes.message} type=\"error\" closable/>}\n\n                            <label style={labelStyles}>City</label>\n                            <input name=\"city\" style={{display: \"none\"}}\n                                   value={city ? city : store.User.franchise.league.citySet[0].id} ref={register({})}/>\n                            <Select options={store.User.franchise.league.citySet.map((city: any) => {\n                                return {value: city.id, label: city.city}\n                            })}\n                                    value={city} onChange={(city: string) => setCity(city)}/>\n                            <input type=\"submit\" style={buttonStyles} value=\"Build Stadium\"/>\n                            <input name=\"total\" type=\"number\" style={{display: \"none\"}} value={total} ref={register({})}/>\n\n                            <h1 style={{marginTop: '10px'}}>{total ? 'Construction Cost: $' + +total / 1000000 + ' million' : ''}</h1>\n\n                            <input name=\"franchise\" style={{display: \"none\"}} value={store.User.franchise.id}\n                                   ref={register({})}/>\n\n                        </Space>\n                    </Card>\n\n\n                </form>\n            )\n        }\n    }\n)\n\nexport default CreateStadium;\n","import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react'\nimport {Row, Col} from 'antd';\nimport RosterTable from \"../Organisms/Tables/RosterTable\";\nimport StaffCard from \"../Organisms/Cards/StaffCard\";\nimport StadiumCard from \"../Organisms/Cards/StadiumCard\";\nimport LineupStatsCard from \"../Organisms/Cards/LineupStatsCard\";\nimport ActionTable from \"../Organisms/Tables/ActionTable\";\nimport TicketTable from \"../Organisms/Tables/TicketTable\";\nimport {FranchiseTypeModelType} from \"../../models\";\nimport CreateStadium from \"../Molecules/Create/CreateStadium\";\nimport introJs from \"intro.js\";\nimport 'intro.js/introjs.css';\n\ninterface IFranchise {\n    franchise: FranchiseTypeModelType;\n    setFranchise: any;\n}\n\nexport const FranchiseCards: React.FunctionComponent<IFranchise> = observer(({franchise, setFranchise}: IFranchise) => {\n\n    useEffect(() => {\n        // if first season show tutorial\n        if (franchise.seasonSet.length === 1) {\n            introJs().start()\n        }\n    }, [franchise.stadium, franchise.seasonSet])\n\n    return (\n        <div>\n            {franchise.stadium ?\n                <div>\n                    <Row gutter={[24, 0]}>\n                        <Col span={12}>\n                            <div data-intro=\"Here is a snapshot of your franchise. Click on the arrow\n                            to select a different franchise to view.\" data-step={2} className=\"card-demo\">\n                            <div data-intro=\"You currently have no staff. Please go to the Staff page to sign them.\"\n                                 data-step={7} className=\"card-demo\">\n                                <StaffCard franchise={franchise} setFranchise={setFranchise}/>\n                            </div>\n                            </div>\n                        </Col>\n                        <Col span={12}>\n                            <div\n                                data-intro=\"Congratulations! Your stadium has been built. To renovate the stadium or\n                                reconfigure seating click the edit button.\"\n                                data-step={1} className=\"card-demo\">\n                                <StadiumCard franchise={franchise}/>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={24}>\n                            <div data-intro=\"Franchise statistics are displayed here. Each season you will need to set\n                            advertising and prices. Choose wisely!\"\n                            data-step={3} className=\"card-demo\">\n                                <TicketTable franchise={franchise}/>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={24}>\n                            <div data-intro=\"Each season you will have actions available. Your GM will determine how\n                            many are available to you. They can help you win games, improve your stadium,\n                            and make money.\" data-step={4} className=\"card-demo\">\n                                <ActionTable franchise={franchise}/>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                <Col span={24} style={{marginTop: '20px', marginBottom: '20px'}}>\n                    <div data-intro=\"Team stats will be calculated here.\" data-step={6} className=\"card-demo\">\n                        <LineupStatsCard franchise={franchise}/>\n                    </div>\n                </Col>\n            </Row>\n            <Row gutter={[0, 24]}>\n                <Col span={24}>\n                    <div data-intro=\"Your team roster. Contracts and lineups will be set here.\" data-step={5} className=\"card-demo\"\n                         >\n                        <RosterTable franchise={franchise}/>\n                    </div>\n                </Col>\n            </Row>\n                </div>\n                :\n                        <CreateStadium/>\n            }\n        </div>\n    );\n})\n\nexport default FranchiseCards;\n\n","import React from 'react';\nimport {observer} from \"mobx-react\";\n\ninterface IAnimation {\n    animation: string;\n}\n\nexport const SmallLoading: React.FunctionComponent<IAnimation> = observer(({animation}: IAnimation) => {\n\n\n        return (\n            <div style={{textAlign: 'center', marginTop: '20px'}}>\n                {/*CLUB*/}\n                <svg className={animation} style={{animationDuration: \"1s\"}} viewBox=\"0 0 100 100\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"40px\" height=\"40px\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#63d13c\"\n                              d=\"M71 39.094c-3.355 0-6.502.877-9.237 2.403C66.165 38.017 69 32.641 69 26.594c0-10.493-8.507-19-19-19-10.494 0-19 8.507-19 19 0 6.047 2.835 11.423 7.237 14.903A18.9 18.9 0 0 0 29 39.094c-10.494 0-19 8.507-19 19s8.507 19 19 19c5.33 0 10.14-2.201 13.591-5.736L36.14 92.407h27.455l-6.491-21.386c3.469 3.727 8.403 6.073 13.897 6.073 10.493 0 19-8.507 19-19s-8.508-19-19.001-19z\"></path>\n                    </g>\n                </svg>\n                {/*DIAMOND*/}\n                <svg className={animation} style={{animationDuration: \"1.1s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"40px\" height=\"40px\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#3097ff\"\n                              d=\"M78.484 50L50 90.692 21.516 50 50 9.307z\"></path>\n                    </g>\n                </svg>\n                {/*HEART*/}\n                <svg className={animation} style={{animationDuration: \"1.2s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"40px\" height=\"40px\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#ff3f43\"\n                              d=\"M87.5,40.4C87.5,68.1,50,87.5,50,87.5S12.5,68.1,12.5,40.4S50,13,50,39.4C50,13.4,87.5,12.7,87.5,40.4z\"></path>\n                    </g>\n                </svg>\n                {/*SPADE*/}\n                <svg className={animation} style={{animationDuration: \"1.3s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"40px\" height=\"40px\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#FFD447\"\n                              d=\"M50 9.307S10 35.761 10 57.852v.265c0 11.046 8.954 20 20 20h0c5.698 0 9.467-2.556 13.038-6.335.759-.503 2.073-.021 1.712 1.023l-6.195 17.888h22.89L55.25 72.505c-.361-1.044.953-1.825 1.712-1.023 3.572 3.779 7.34 6.335 13.038 6.335h0c11.046 0 20-8.954 20-20v-.265C90 35.761 50 9.307 50 9.307z\"></path>\n                    </g>\n                </svg>\n            </div>\n        );\n    }\n)\n\nexport default SmallLoading;\n\n","import React, {useContext, useState} from 'react';\nimport {observer} from 'mobx-react'\nimport {StoreContext} from \"../../../models\";\nimport {Card, Button, Select, Space} from 'antd';\nimport axios from \"axios\";\nimport {userQuery} from \"../../Utils/queries\";\nimport SmallLoading from \"../../Atoms/Loading/SmallLoading\";\nimport {buttonStyles, cardStyles, formStyles, inputStyles, labelStyles} from \"./CreateStyles\";\n\nconst {Option} = Select;\n\nexport const CreateBots: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [numberOfFranchises, setNumberOfFranchises] = useState<string>(\"8\")\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const createBots = () => {\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            const data = new FormData();\n            data.append(\"franchise_id\", store.User.franchise.id)\n            data.append(\"num_of_franchises\", numberOfFranchises)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/league_generation', data)\n                .then(res => {\n                    console.log(res.data);\n                    store.queryUser(\n                        {email: email},\n                        userQuery,\n                        {}\n                    )\n                    setLoading(false)\n                })\n                .catch(err => {\n                    console.log(err)\n                    setLoading(false)\n                })\n        };\n\n        if (loading) return (\n            <div>\n                <SmallLoading animation=\"ld ld-bounce\"/>\n            </div>\n        )\n        else {\n            return (\n                <div style={formStyles}>\n                <Card style={cardStyles}>\n                        <h1>{store.User?.franchise.franchise}, welcome to the {store.User.league.leagueName}!</h1>\n                    <div>\n                        <label style={labelStyles}>Number of Franchises: </label>\n                        <Select defaultValue=\"8\" style={{width: '20%', marginBottom: '10px'}}\n                                onChange={(value: any) => setNumberOfFranchises(value)}>\n                            <Option value=\"8\">8</Option>\n                            {/*<Option value=\"10\">10</Option>*/}\n                        </Select>\n                    </div>\n                        <Button style={buttonStyles}\n                                onClick={() => createBots()}>\n                            Create Opponents\n                        </Button>\n                </Card>\n                </div>\n            )\n        }\n    }\n)\n\nexport default CreateBots;\n\n","import React, {useContext} from 'react';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../../../models\";\nimport {useForm} from \"react-hook-form\";\nimport {Alert, Card, Space} from \"antd\";\nimport {labelStyles, formStyles, buttonStyles, inputStyles, cardStyles} from \"./CreateStyles\";\nimport { useNavigate } from \"react-router-dom\";\n\n\ntype leagueConfig = {\n    leagueName: string;\n    email: string;\n};\n\nexport const CreateLeague: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n    const navigate = useNavigate();\n    const {register, handleSubmit, errors} = useForm<leagueConfig>();\n    const onSubmit = handleSubmit(({leagueName, email}: leagueConfig) => {\n        console.log(leagueName, email);\n        store.mutateCreateLeague({\n                \"leagueName\": leagueName,\n                \"email\": email\n            },\n            `\n                __typename\n                leagueName\n                user{\n                  __typename\n                  id\n                  email\n                  league{\n                      __typename\n                      id\n                      leagueName\n                    }\n                }   \n                `,\n            undefined\n        ).then(() => navigate('/Franchise'))\n    });\n\n    return (\n        <form style={formStyles} onSubmit={onSubmit}>\n            <Card style={cardStyles} title=\"Start League\">\n            <Space direction=\"vertical\">\n            <label style={labelStyles}>League Name:</label>\n            <input name=\"leagueName\" style={inputStyles} ref={register({\n                required: {\n                    value: true,\n                    message: \"League name is a required field\",\n                },\n                maxLength: {\n                    value: 25,\n                    message: 'Max League name length is 25',\n                },\n            })}/>\n\n            <input name=\"email\" style={{display: \"none\"}} value={store.User.email} ref={register({})}/>\n            <input type=\"submit\" style={buttonStyles} value=\"Create League\"/>\n            <br/> {errors.leagueName && <Alert message={errors.leagueName.message} type=\"error\" closable/>}\n            <br/>\n                </Space>\n            </Card>\n        </form>\n    );\n}\n)\n\nexport default CreateLeague;","import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from 'mobx-react'\nimport {FranchiseTypeModelType, StoreContext} from \"../models\";\nimport CreateFranchise from \"./Molecules/Create/CreateFranchise\";\nimport FranchiseCards from \"./Templates/FranchiseCards\";\nimport CreateBots from \"./Molecules/Create/CreateBots\";\nimport CreateLeague from \"./Molecules/Create/CreateLeague\";\nimport introJs from \"intro.js\";\n\nexport const Franchise: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    const [franchise, setFranchise] = useState<FranchiseTypeModelType>(store.User?.franchise ? store.User.franchise : null);\n    useEffect(() => {\n        if (store.User) {\n            setFranchise(store.User.franchise)\n        }\n        if (!store.User.league) {\n            introJs().start();\n        }\n    }, [store.User])\n\n    if (store.User?.league === undefined) return (\n        <h1 className=\"ld ld-jump-alt-in\" style={{textAlign: 'center', marginTop: '40px', fontSize: '32px'}}>\n            Missing League\n        </h1>\n    );\n    else if (store.User?.league == null)\n        return (\n            <div\n                data-intro=\"Please read the instructions on the home page before starting. Once ready, create your league to begin your journey.\"\n                data-step={1} className=\"card-demo\">\n                <CreateLeague/>\n            </div>\n        )\n    else if (store.User?.franchise === null)\n        return (\n            <div\n                data-step={1} className=\"card-demo\">\n                <CreateFranchise setFranchise={setFranchise}/>;\n            </div>\n        )\n    else if (store.User.franchise.league.franchiseSet.length <= 1)\n        return (\n            <div\n                data-step={1} className=\"card-demo\">\n                <CreateBots/>;\n            </div>\n        )\n    else {\n        return <FranchiseCards franchise={franchise} setFranchise={setFranchise}/>\n    }\n})\n\nexport default Franchise;\n\n","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Tag, Space} from 'antd';\nimport {PlayerTypeModelType, StoreContext} from \"../../../models\";\nimport {observer} from \"mobx-react\";\nimport {colour, suit_icon, insertArray} from '../../Utils/tablefunctions'\nimport {IObservableArray, observable, toJS} from 'mobx';\nimport {mutateCreatePlayerQuery} from \"../../Utils/queries\";\nimport {tableStyles} from \"./TableStyles\";\n\n\nexport const DraftTable: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const non_scouter_columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n                key: 'age',\n                sorter: (a: any, b: any) => a.age - b.age,\n            },\n            {\n                title: 'EPV',\n                dataIndex: 'epv',\n                key: 'epv',\n                sorter: (a: any, b: any) => a.epv - b.epv,\n                render: (epv: number) => <span>{epv.toFixed(1)}</span>,\n            },\n            {\n                title: 'Suit',\n                dataIndex: 'suit',\n                key: 'suit',\n                render: (suit: string) => (\n                    <Tag icon={suit_icon(suit)} color={colour(suit)} key={suit}>\n                        {suit.toUpperCase()}\n                    </Tag>\n                ),\n                filters: [\n                    {\n                        text: 'Diamond',\n                        value: 'diamond',\n                    },\n                    {\n                        text: 'Spade',\n                        value: 'spade',\n                    },\n                    {\n                        text: 'Heart',\n                        value: 'heart',\n                    },\n                    {\n                        text: 'Club',\n                        value: 'club',\n                    },\n                ],\n                onFilter: (value: any, record: any) => record.suit.indexOf(value) === 0,\n            },\n            {\n                title: 'Franchise',\n                dataIndex: [\"franchise\", \"franchise\"],\n                key: \"franchise\",\n                render: (franchise: number) => (\n                    franchise\n                        ?\n                        <span className=\"ld ld-float-rtl-in\" style={{animationDuration: \"2s\"}}>{franchise}</span>\n                        :\n                        null)\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text: string, record: any) => (\n                    (record.franchise) ? (\n                        <Space size=\"middle\">\n                            <Tag\n                                className=\"ld ld-float-rtl-in\"\n                                color={\"#B93538\"} style={{color: \"#ffffff\", border: \"2px solid #B93538\", animationDuration: \"2s\"}}\n                                 onClick={() => {\n                                     store.mutateCreatePlayer({\n                                             \"playerInput\": {\n                                                 \"name\": record.name,\n                                                 \"suit\": record.suit,\n                                                 \"age\": record.age,\n                                                 \"pv\": record.pv,\n                                                 \"epv\": record.epv,\n                                                 \"sEpv\": record.sEpv,\n                                                 \"contract\": undefined,\n                                                 \"tOption\": undefined,\n                                                 \"pOption\": undefined,\n                                                 \"renew\": undefined,\n                                                 \"salary\": undefined,\n                                                 \"grade\": undefined,\n                                                 \"lineup\": \"bench\",\n                                                 \"franchiseId\": store.User.franchise.league.draftingFranchise.id,\n                                                 \"trainer\": false,\n                                                 \"year\": record.year,\n                                                 \"leagueId\": store.User.franchise.league.id\n                                             }\n                                         }, mutateCreatePlayerQuery,\n                                         undefined\n                                     );\n                                 }\n                                 }>\n                                Drafted!\n                            </Tag>\n                        </Space>\n                    ) : (\n                        <Space size=\"middle\">\n                            <Tag color={\"#FFDE70\"} icon={<span role=\"img\" aria-label=\"player\"> 📝 </span>}\n                                 style={{color: \"#000000\", border: \"2px solid #FFDE70\", cursor: \"pointer\"}}\n                                 onClick={() => {\n                                     store.mutateCreatePlayer({\n                                             \"playerInput\": {\n                                                 \"name\": record.name,\n                                                 \"suit\": record.suit,\n                                                 \"age\": record.age,\n                                                 \"pv\": record.pv,\n                                                 \"epv\": record.epv,\n                                                 \"sEpv\": record.sEpv,\n                                                 \"contract\": undefined,\n                                                 \"tOption\": undefined,\n                                                 \"pOption\": undefined,\n                                                 \"renew\": undefined,\n                                                 \"salary\": undefined,\n                                                 \"grade\": undefined,\n                                                 \"lineup\": \"bench\",\n                                                 \"franchiseId\": store.User.franchise.league.draftingFranchise.id,\n                                                 \"trainer\": false,\n                                                 \"year\": record.year,\n                                                 \"leagueId\": store.User.franchise.league.id\n                                             }\n                                         }, mutateCreatePlayerQuery,\n                                         undefined\n                                     );\n                                     try {\n                                         // make next franchise in draft order draftingFranchise\n                                         store.User.league.setDraftingFranchise(store.User.league.draftOrder[store.User.league.draftOrder.indexOf(store.User.franchise.league.draftingFranchise) + 1])\n                                     } catch (exception_var) {\n                                         // if at the end of draft order reset to beginning\n                                         store.User.league.setDraftingFranchise(store.User.league.draftOrder[0])\n                                     }\n                                 }\n                                 }>\n                                Draft Prospect\n                            </Tag>\n                        </Space>\n                    )\n\n                ),\n            },\n        ];\n\n\n        let sEPV_column =\n            {\n                title: 'S EPV',\n                dataIndex: 'sEpv',\n                key: 'sEpv',\n                sorter: (a: any, b: any) => a.sEpv - b.sEpv,\n                render: (sEpv: number) => <span>{sEpv.toFixed(1)}</span>,\n            }\n\n\n        const columns = () => {\n            if (store.User.franchise.gm != null)\n                if (store.User.franchise.gm.trait === \"SCOUTER\") {\n                    let scouter_columns = non_scouter_columns\n                    insertArray(non_scouter_columns, 3, sEPV_column)\n                    return scouter_columns\n                } else {\n                    return non_scouter_columns\n                }\n            else return non_scouter_columns\n        }\n\n        // need to make observable to update table (draftClass not being observed by ant d table)\n        let draftClass: IObservableArray<PlayerTypeModelType> = observable(store.User.franchise.league.draftClass)\n\n        if (store.User?.franchise === undefined) return <div> loading</div>;\n        else {\n            return (\n                <Table\n                    rowKey=\"id\"\n                    columns={columns()}\n                    dataSource={toJS(draftClass)}\n                    pagination={false}\n                    bordered\n                    style={tableStyles}\n                />\n            );\n        }\n    }\n)\n\nexport default DraftTable;","import React, {useContext, useEffect} from 'react';\nimport 'antd/dist/antd.css';\nimport {Card} from 'antd';\nimport {FranchiseTypeModelType, StoreContext} from \"../../models\";\nimport {observer} from \"mobx-react\";\n\nexport const DraftOrder: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const draft_order_border = (name: string | undefined) => {\n\n            if (store.User.league.draftingFranchise && store.User.league.draftingFranchise.franchise == name) {\n                return '2px dashed #ffc300'\n            } else\n                return '1px solid #ffffff'\n        }\n\n        useEffect(() => {\n            if (!store.User.league.draftingFranchise) {\n                let idx = store.User.league.draftClassDrafted % store.User.league.franchiseSet.length\n                // make next franchise in draft order based on how many players already drafted\n                // using remained to deal with seocnd round of draft\n                store.User.league.setDraftingFranchise(store.User.league.draftOrder[idx])\n            }\n        }, [])\n\n\n        if (store.User == undefined || store.User.franchise == undefined) return <div> loading</div>;\n        else {\n            return (\n                <div>\n                    {store.User.league.draftOrder ? store.User.league.draftOrder.map((franchise: FranchiseTypeModelType, index: number) => {\n                                let number = (index + 1)\n                                return <Card\n                                    hoverable\n                                    onClick={() =>\n                                        store.User.league.setDraftingFranchise(franchise)\n                                    }\n                                    key={index} style={{\n                                    width: '12.5%', marginTop: '20px', marginBottom: '20px', display: 'inline-flex',\n                                    border: draft_order_border(franchise.franchise)\n                                }}>\n                                    <span>{number + ' ' + franchise.franchise}</span>\n                                    <span>{\" –– Players: \" + store.User.league.franchiseplayers(franchise.franchise).length}</span>\n                                </Card>\n                            }\n                        )\n                        : null\n                    }\n                </div>\n            );\n        }\n    }\n)\n\nexport default DraftOrder;\n","import CSS from \"csstype\";\n\nexport const simButtonStyles: CSS.Properties = {\n    backgroundColor: '#7395aa',\n    // margin: '10px',\n    marginBottom: '25px',\n    border: '0px',\n    borderRadius: '2px',\n    fontSize: '14px',\n    color: '#ffffff',\n    boxShadow: 'rgba(27, 31, 35, .3) 0 1px 0',\n    verticalAlign: 'middle',\n    cursor: 'pointer'\n};\n\n\n","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {FranchiseTypeModelType, StoreContext} from \"../../../models\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\nimport {mutateCreatePlayerQuery} from \"../../Utils/queries\";\n\nexport const DraftButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n\n        const draftSimRepeat = (franchise: FranchiseTypeModelType, player: any) => {\n\n            let numOfPicks: number\n            let currentTeamIndex: number = store.User.league.draftOrder.indexOf(franchise)\n            let userTeamIndex: number = store.User.league.draftOrder.indexOf(store.User.franchise)\n\n            if (userTeamIndex > currentTeamIndex) {\n                numOfPicks = userTeamIndex - currentTeamIndex\n            } else {\n                numOfPicks = Math.abs(store.User.league.franchiseSet.length - currentTeamIndex + userTeamIndex)\n            }\n\n            if (store.User.league.draftClassRemaining < numOfPicks) {\n                numOfPicks = store.User.league.draftClassRemaining\n            }\n\n            for (let i = 0; i < numOfPicks; i++) {\n                draftRepeater(i);\n            }\n\n            function draftRepeater(i: any) {\n                setTimeout(function () {\n                    franchise = store.User.league.draftingFranchise\n                    player = store.User.league.bestDraftPlayer\n                    draftSim(franchise, player)\n                }, 650 * i);\n            }\n        }\n\n        const draftSim = (franchise: FranchiseTypeModelType, player: any) => {\n            store.mutateCreatePlayer({\n                    \"playerInput\": {\n                        \"name\": player.name,\n                        \"suit\": player.suit,\n                        \"age\": player.age,\n                        \"pv\": player.pv,\n                        \"epv\": player.epv,\n                        \"sEpv\": player.sEpv,\n                        \"contract\": undefined,\n                        \"tOption\": undefined,\n                        \"pOption\": undefined,\n                        \"renew\": undefined,\n                        \"salary\": undefined,\n                        \"grade\": undefined,\n                        \"lineup\": \"bench\",\n                        \"franchiseId\": store.User.franchise.league.draftingFranchise.id,\n                        \"trainer\": false,\n                        \"year\": player.year,\n                        \"leagueId\": store.User.franchise.league.id\n                    }\n                }, mutateCreatePlayerQuery,\n                undefined\n            )\n            try {\n                // make next franchise in draft order draftingFranchise\n                store.User.league.setDraftingFranchise(store.User.league.draftOrder[store.User.league.draftOrder.indexOf(franchise) + 1])\n            } catch (exception_var) {\n                // if at the end of draft order reset to beginning\n                store.User.league.setDraftingFranchise(store.User.league.draftOrder[0])\n            }\n        }\n\n\n        return (\n            <div>\n                {store.User.league.bestDraftPlayer ?\n                    <Button style={simButtonStyles}\n                            onClick={() => draftSimRepeat(store.User.league.draftingFranchise, store.User.league.bestDraftPlayer)}\n                            block>\n                        Draft Sim\n                    </Button>\n                    :\n                    <h1 style={{textAlign: 'center'}}>\n                        Go to OffSeason\n                    </h1>\n                }\n            </div>\n        );\n    }\n)\n\nexport default DraftButton;\n","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {Statistic, Tag} from 'antd';\nimport {StoreContext} from \"../../models\";\nimport {observer} from \"mobx-react\";\nimport {colour, suit_icon} from \"../Utils/tablefunctions\";\n\nexport const BestDraftPlayer: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        return (\n            <div>\n                {(store.User.league.bestDraftPlayer && store.User.league.draftingFranchise !== store.User.franchise) ?\n                    <Statistic\n                        className=\"ld ld-flip-v-in\"\n                        style={{\n                            display: \"block\", marginLeft: 'auto', marginRight: 'auto',\n                            padding: '10px',\n                            boxShadow: \"rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px\",\n                            borderRadius: \"4px\",\n                            textAlign: 'center',\n                        }}\n                        value={store.User.league.bestDraftPlayer.name}\n                        valueStyle={{color: '#414141'}}\n                        prefix={<Tag icon={suit_icon(store.User.league.bestDraftPlayer.suit)}\n                                     color={colour(store.User.league.bestDraftPlayer.suit)}\n                                     key={store.User.league.bestDraftPlayer.suit}>\n                            {store.User.league.bestDraftPlayer.suit.toUpperCase()}\n                        </Tag>}\n                    />\n                    : null}\n            </div>\n        );\n    }\n)\n\nexport default BestDraftPlayer;\n","import React, {useContext, useEffect} from 'react';\nimport {observer} from 'mobx-react'\nimport DraftTable from \"../Organisms/Tables/DraftTable\";\nimport DraftOrder from \"../Molecules/DraftOrder\";\nimport DraftButton from \"../Molecules/SimulationButtons/DraftButton\";\nimport BestDraftPlayer from \"../Molecules/BestDraftPlayer\";\nimport introJs from \"intro.js\";\nimport {StoreContext} from \"../../models\";\n\n\nexport const DraftTemplate: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    useEffect(() => {\n        if (store.User.franchise.seasonSet.length === 1) {\n            introJs().start()\n        }\n    }, [store.User.franchise])\n\n    return (\n        <div>\n            <div data-intro=\"Welcome to the draft! This represents the order of picks.\" data-step={1} className=\"card-demo\">\n                <div data-intro=\"This simulates an opponent's pick in the draft.\" data-step={2} className=\"card-demo\">\n                    <DraftButton/>\n                </div>\n                <BestDraftPlayer/>\n                <DraftOrder/>\n            </div>\n            <div data-intro=\"Here are the players available to draft. Click the draft prospect button to select a\n            player for your team.\"\n                data-step={3} className=\"card-demo\">\n                <DraftTable/>\n            </div>\n        </div>\n    );\n})\n\nexport default DraftTemplate;\n\n","import React from 'react';\n\nexport const MissingStaffError: React.FunctionComponent = () => {\n\n        return (\n                <h1 className=\"ld ld-jump-alt-in\" style={{textAlign: 'center'}}>\n                    Missing Staff\n                </h1>\n        )\n}\n\nexport default MissingStaffError;\n\n","import React, {useContext} from 'react';\nimport {observer} from 'mobx-react'\nimport {StoreContext} from \"../models\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport DraftTemplate from \"./Templates/DraftTemplate\";\nimport MissingStaffError from \"./Atoms/MissingStaffError\";\n\n\nexport const Draft: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    if (store.User?.league == null)\n        return <SmallLoading animation=\"ld ld-bounce\"/>\n    else if (store.User?.league?.franchisesWithoutGm.length > 0 || store.User?.league?.franchisesWithoutCoach.length > 0)\n        return (\n                <MissingStaffError/>\n        )\n    else {\n        return (\n            <div>\n                <DraftTemplate/>\n            </div>\n        );\n    }\n})\n\nexport default Draft;\n\n","import React, {useContext} from 'react';\nimport {StoreContext} from \"../../../models\";\nimport 'antd/dist/antd.css';\nimport {Table, Tag, Spin} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {toJS} from 'mobx';\nimport {colour, insertArray, suit_icon} from \"../../Utils/tablefunctions\";\nimport {tableStyles} from \"./TableStyles\";\n\n\nexport const PlayerHistoryTable: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n    const non_scouter_columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                sorter: (a: any, b: any) => a.name.localeCompare(b.name),\n                // @ts-ignore\n                filters: [...new Map(store.User.league.playerhistorySet?.map(item =>\n                [item['name'], {text: item.name, value: item.name}])).values()],\n                onFilter: (value: any, record: any) => record.name.indexOf(value) === 0,\n            },\n            {\n                title: 'Season',\n                dataIndex: 'season',\n                key: 'season',\n                sorter: (a: any, b: any) => a.season - b.season,\n                // @ts-ignore\n                filters: [...new Map(store.User.league.playerhistorySet?.map(item =>\n                [item['season'], {text: item.season, value: item.season}])).values()],\n                onFilter: (value: any, record: any) => record.season.indexOf(value) === 0,\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n                key: 'age',\n                sorter: (a: any, b: any) => a.age - b.age,\n            },\n            {\n                title: 'EPV',\n                dataIndex: 'epv',\n                key: 'epv',\n                sorter: (a: any, b: any) => a.epv - b.epv,\n                render: (epv: number) => <span>{epv.toFixed(1)}</span>,\n            },\n            {\n                title: 'Suit',\n                dataIndex: 'suit',\n                key: 'suit',\n                render: (suit: string) => (\n                    <Tag icon={suit_icon(suit)} color={colour(suit)} key={suit}>\n                        {suit.toUpperCase()}\n                    </Tag>\n                ),\n                filters: [\n                    {\n                        text: 'Diamond',\n                        value: 'diamond',\n                    },\n                    {\n                        text: 'Spade',\n                        value: 'spade',\n                    },\n                    {\n                        text: 'Heart',\n                        value: 'heart',\n                    },\n                    {\n                        text: 'Club',\n                        value: 'club',\n                    },\n                ],\n                onFilter: (value: any, record: any) => record.suit.indexOf(value) === 0,\n            },\n        ];\n\n\n        let sEPV_column =\n            {\n                title: 'S EPV',\n                dataIndex: 'sEpv',\n                key: 'sEpv',\n                sorter: (a: any, b: any) => a.sEpv - b.sEpv,\n                render: (sEpv: number) => <span>{sEpv.toFixed(1)}</span>,\n            }\n\n\n        const columns = () => {\n            if (store.User.franchise.gm !== null)\n                if (store.User.franchise.gm.trait === \"SCOUTER\") {\n                    let scouter_columns = non_scouter_columns\n                    insertArray(non_scouter_columns, 4, sEPV_column)\n                    return scouter_columns\n                } else {\n                    return non_scouter_columns\n                }\n            else return non_scouter_columns\n        }\n\n\n        if (store.User?.franchise === undefined) return <div><Spin size=\"large\"/></div>;\n        else {\n            return (\n                <Table\n                    rowKey=\"id\"\n                    columns={columns()}\n                    dataSource={toJS(store.User.league.playerhistorySet)}\n                    pagination={false}\n                    bordered\n                    style={tableStyles}\n                />\n            );\n        }\n    }\n)\n\nexport default PlayerHistoryTable;","import React, {useContext, useEffect} from 'react';\nimport 'antd/dist/antd.css';\nimport {StoreContext} from \"../models\";\nimport {observer} from \"mobx-react\";\nimport PlayerHistoryTable from \"./Organisms/Tables/PlayerHistoryTable\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport introJs from \"intro.js\";\n\n\nexport const PlayerHistory: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        useEffect(() => {\n            if (store.User.franchise.seasonSet.length === 2) {\n                introJs().start()\n            }\n        }, [store.User.franchise])\n\n        if (store.User?.franchise == null)\n            return <SmallLoading animation=\"ld ld-bounce\"/>\n        else {\n            return (\n                <div data-intro=\"Player history table shows player stats from previous seasons.\" data-step={1} className=\"card-demo\">\n                <PlayerHistoryTable/>\n                </div>\n            );\n        }\n    }\n)\n\nexport default PlayerHistory;","import 'antd/dist/antd.css';\nimport {FranchiseTypeModelType, LeagueTypeModelType} from \"../../../models\";\nimport {lineupError, rosterError, staffError, starterError, unsignedError} from \"../../Atoms/notificationerrors\";\n\n\nexport const simSeasonChecker = (franchise: FranchiseTypeModelType, league: LeagueTypeModelType) => {\n    // every team needs at least 5 players\n    if (franchise.playerSet.length < 5) {\n        league.setSeasonSimCheck(false)\n        return rosterError(franchise.franchise);\n    }\n    // all players with a franchise need a lineup\n    if (franchise.lineup.includes(null)) {\n        league.setSeasonSimCheck(false)\n        return lineupError(franchise.franchise);\n    }\n    // each franchise needs 5 starters\n    if (franchise.starters.length !== 5) {\n        league.setSeasonSimCheck(false)\n        return starterError(franchise.franchise);\n    }\n    // all players with a franchise need to be signed\n    if (franchise.contracts.includes(null)) {\n        league.setSeasonSimCheck(false)\n        return unsignedError(franchise.franchise);\n    }\n    // all franchises need staff\n    if (!franchise.gm || !franchise.coach) {\n        league.setSeasonSimCheck(false)\n        return staffError(franchise.franchise);\n    }\n}","import React from 'react';\nimport {observer} from \"mobx-react\";\n\ninterface IAnimation {\n    animation: string;\n}\n\nexport const BigLoading: React.FunctionComponent<IAnimation> = observer(({animation}: IAnimation) => {\n\n\n        return (\n            <div className=\"overlay\"\n                 style={{\n                     opacity: '1',\n                     width: '80%',\n                     height: '100%',\n                     zIndex: 100,\n                     top: '20%',\n                     left: '10%',\n                     position: 'fixed',\n                     textAlign: 'center',\n                 }}>\n                {/*CLUB*/}\n                <svg className={animation} style={{animationDuration: \"1s\"}} viewBox=\"0 0 100 100\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"20%\" height=\"60%\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#63d13c\"\n                              d=\"M71 39.094c-3.355 0-6.502.877-9.237 2.403C66.165 38.017 69 32.641 69 26.594c0-10.493-8.507-19-19-19-10.494 0-19 8.507-19 19 0 6.047 2.835 11.423 7.237 14.903A18.9 18.9 0 0 0 29 39.094c-10.494 0-19 8.507-19 19s8.507 19 19 19c5.33 0 10.14-2.201 13.591-5.736L36.14 92.407h27.455l-6.491-21.386c3.469 3.727 8.403 6.073 13.897 6.073 10.493 0 19-8.507 19-19s-8.508-19-19.001-19z\"></path>\n                    </g>\n                </svg>\n                {/*DIAMOND*/}\n                <svg className={animation} style={{animationDuration: \"1.1s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"20%\" height=\"60%\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#3097ff\"\n                              d=\"M78.484 50L50 90.692 21.516 50 50 9.307z\"></path>\n                    </g>\n                </svg>\n                {/*HEART*/}\n                <svg className={animation} style={{animationDuration: \"1.2s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"20%\" height=\"60%\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#ff3f43\"\n                              d=\"M87.5,40.4C87.5,68.1,50,87.5,50,87.5S12.5,68.1,12.5,40.4S50,13,50,39.4C50,13.4,87.5,12.7,87.5,40.4z\"></path>\n                    </g>\n                </svg>\n                {/*SPADE*/}\n                <svg className={animation} style={{animationDuration: \"1.3s\"}} viewBox=\"0 0 100 100\" y=\"0\" x=\"0\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"20%\" height=\"60%\">\n                    <g fill=\"#61DAFB\">\n                        <path strokeMiterlimit=\"10\" strokeLinejoin=\"round\" strokeLinecap=\"round\" strokeWidth=\"3.5\"\n                              stroke=\"#333\" fill=\"#FFD447\"\n                              d=\"M50 9.307S10 35.761 10 57.852v.265c0 11.046 8.954 20 20 20h0c5.698 0 9.467-2.556 13.038-6.335.759-.503 2.073-.021 1.712 1.023l-6.195 17.888h22.89L55.25 72.505c-.361-1.044.953-1.825 1.712-1.023 3.572 3.779 7.34 6.335 13.038 6.335h0c11.046 0 20-8.954 20-20v-.265C90 35.761 50 9.307 50 9.307z\"></path>\n                    </g>\n                </svg>\n            </div>\n        );\n    }\n)\n\nexport default BigLoading;\n\n","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport {FranchiseTypeModelType, StoreContext} from \"../../../models\";\nimport {userQuery} from \"../../Utils/queries\";\nimport {simSeasonChecker} from \"./SimSeasonChecker\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\nimport BigLoading from \"../../Atoms/Loading/BigLoading\";\nimport {ticketError, unusedActionError} from \"../../Atoms/notificationerrors\";\n\n\nexport const SimSeasonButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const simSeason = () => {\n\n            // sets seasonSimCheck as true\n            store.User.league.setSeasonSimCheck(true)\n            // loops through each franchise, if check fails, sets seasonSim to false\n            store.User.franchise.league.franchiseSet.forEach((franchise: FranchiseTypeModelType) =>\n                simSeasonChecker(franchise, store.User.league))\n            //checks if user team has ticket pricing, if check fails, sets seasonSim to false\n            if (store.User.franchise.seasonSet[store.User.franchise.seasonSet.length - 1].ticketPrice === 0\n                || store.User.franchise.seasonSet[store.User.franchise.seasonSet.length - 1].boxPrice === 0) {\n                store.User.league.setSeasonSimCheck(false)\n                return ticketError(store.User.franchise.franchise);\n            }\n            //checks if user team has actions available, if check fails, sets seasonSim to false\n            if (store.User.franchise.action.numberOfActions > 0) {\n                store.User.league.setSeasonSimCheck(false)\n                return unusedActionError(store.User.franchise.franchise);\n            }\n            // if seasonSimCheck is false do not run season simulation\n            if (store.User.league.seasonSimCheck === false) {\n                return\n            }\n\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            // season sim request\n            const data = new FormData();\n            data.append(\"league_id\", store.User.franchise.league.id)\n            data.append(\"season\", store.User.franchise.seasonSet.length)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/season_sim', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                    {email: email},\n                    userQuery\n                    )\n                    setLoading(false)\n                })\n                .catch(err => {\n                    console.log(err)\n                    setLoading(false)\n                })\n        };\n\n        const leagueReset = () => {\n\n            // reset league request\n            const data = new FormData();\n            data.append(\"league_id\", store.User.franchise.league.id)\n            setLoading(true)\n            axios.post('http://127.0.0.1:8000/league_reset', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                    {email: email},\n                    userQuery\n                    )\n                    setLoading(false)\n                })\n                .catch(err => {\n                    console.log(err)\n                    setLoading(false)\n                })\n        };\n\n        if (loading) return (\n            <div>\n                <BigLoading animation=\"ld ld-bounce\"/>\n            </div>\n        )\n        else if (store.User.franchise.seasonSet.length === 11) return (\n            <div>\n                <h1 style={{textAlign: 'center'}}>\n                    Your Big League Journey Has Concluded\n                </h1>\n                <Button style={simButtonStyles} onClick={() => leagueReset()} block>\n                        Click Here To Reset!\n                </Button>\n                </div>\n        )\n        else {\n            return (\n                <div>\n                    <Button style={simButtonStyles} onClick={() => simSeason()} block>\n                        Simulate Season\n                    </Button>\n                </div>\n            );\n        }\n    }\n)\n\nexport default SimSeasonButton;","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Select} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {toJS} from 'mobx';\nimport {StoreContext} from \"../../../models\";\nimport {tableStyles} from \"./TableStyles\";\n\nconst {Option} = Select;\n\nexport const SeasonTable: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const columns = [\n            {\n                title: 'Franchise',\n                dataIndex: ['franchise', 'franchise'],\n                key: 'franchise',\n            },\n            {\n                title: 'Wins',\n                dataIndex: 'wins',\n                key: 'wins',\n                sorter: (a: any, b: any) => a.wins - b.wins,\n                defaultSortOrder: 'descend',\n            },\n            {\n                title: 'Losses',\n                dataIndex: 'losses',\n                key: 'losses',\n                sorter: (a: any, b: any) => a.losses - b.losses,\n            },\n            {\n                title: 'PPG',\n                dataIndex: 'ppg',\n                key: 'ppg',\n                sorter: (a: any, b: any) => a.ppg - b.ppg,\n                render: (ppg: number) => <span>{ppg?.toFixed(1)}</span>,\n            },\n            {\n                title: 'STD',\n                dataIndex: 'std',\n                key: 'std',\n                sorter: (a: any, b: any) => a.std - b.std,\n                render: (std: number) => <span>{std?.toFixed(1)}</span>,\n            },\n            {\n                title: 'Championships',\n                dataIndex: 'championships',\n                key: 'championships',\n            },\n            {\n                title: 'Bonuses',\n                dataIndex: 'bonuses',\n                key: 'bonuses',\n            },\n            {\n                title: 'Penalties',\n                dataIndex: 'penalties',\n                key: 'penalties',\n            },\n            {\n                title: 'Fan Base',\n                dataIndex: 'fanBase',\n                key: 'fanBase',\n                sorter: (a: any, b: any) => a.fanBase - b.fanBase,\n                render: (fanBase: number) => <span>{fanBase?.toFixed(1)}</span>,\n            },\n            {\n                title: 'Fan Index',\n                dataIndex: 'fanIndex',\n                key: 'fanIndex',\n                sorter: (a: any, b: any) => a.fanIndex - b.fanIndex,\n                render: (fanIndex: number) => <span>{fanIndex?.toFixed(1)}</span>,\n            },\n            {\n                title: 'Advertising',\n                dataIndex: 'advertising',\n                key: 'advertising',\n            },\n            {\n                title: 'Ticket Price',\n                dataIndex: 'ticketPrice',\n                key: 'ticketPrice',\n                sorter: (a: any, b: any) => a.ticketPrice - b.ticketPrice,\n                render: (ticketPrice: number) => <span>{(ticketPrice)?.toFixed(0)}</span>,\n            },\n            {\n                title: 'Tickets Sold',\n                dataIndex: 'ticketsSold',\n                key: 'ticketsSold',\n                sorter: (a: any, b: any) => a.boxesSold - b.boxesSold,\n            },\n            {\n                title: 'Box Price',\n                dataIndex: 'boxPrice',\n                key: 'boxPrice',\n                sorter: (a: any, b: any) => a.boxPrice - b.boxPrice,\n                render: (boxPrice: number) => <span>{(boxPrice)?.toFixed(0)}</span>,\n            },\n            {\n                title: 'Boxes Sold',\n                dataIndex: 'boxesSold',\n                key: 'boxesSold',\n                sorter: (a: any, b: any) => a.boxesSold - b.boxesSold,\n            },\n            {\n                title: 'Revenue (m)',\n                dataIndex: 'revenue',\n                key: 'revenue',\n                sorter: (a: any, b: any) => a.revenue - b.revenue,\n                render: (revenue: number) => <span>{(revenue / 1000000)?.toFixed(2)}</span>,\n            },\n            {\n                title: 'Expenses (m)',\n                dataIndex: 'expenses',\n                key: 'expenses',\n                sorter: (a: any, b: any) => a.expenses - b.expenses,\n                render: (expenses: number) => <span>{(expenses / 1000000)?.toFixed(2)}</span>,\n            },\n        ];\n\n        // get most recent season (franchise.seasonSet.length - 1) and map each franchise in that season\n        const [season, setSeason] = useState<any>(store.User.franchise.league.franchiseSet.map((franchise: any) => franchise.seasonSet[franchise.seasonSet.length - 1]));\n\n\n        return (\n            <div>\n                <Select\n                    defaultValue={store.User.franchise.seasonSet[store.User.franchise.seasonSet.length - 1].season}\n                    bordered={false}\n                    style={{\n                        width: \"100%\",\n                        borderRadius: \"2px\",\n                        fontSize: '24px',\n                        padding: '0.5rem',\n                        marginBottom: '4px',\n                        textAlignLast: 'center',\n                        boxShadow: 'rgba(9, 30, 66, 0.1) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px'\n                    }}\n                    onChange={(season: string) => setSeason(store.User.franchise.league.franchiseSet.map((franchise: any) => franchise.seasonSet[parseInt(season) - 1]))}>\n                    {store.User.franchise.seasonSet.map((season: any) =>\n                        (\n                            <Option key={season.season} value={season.season}>\n                                {season.season}\n                            </Option>\n                        )\n                    )}\n                </Select>\n                <Table\n                    rowKey=\"id\"\n                    // @ts-ignore (need this to add defaultSorter for Wins)\n                    columns={columns}\n                    dataSource={toJS(season)}\n                    pagination={false}\n                    bordered\n                    style={tableStyles}\n                />\n            </div>\n        );\n    }\n)\n\nexport default SeasonTable;","import React, {useContext, useEffect} from 'react';\nimport 'antd/dist/antd.css';\nimport {StoreContext} from \"../models\";\nimport {observer} from \"mobx-react\";\nimport SimSeasonButton from \"./Molecules/SimulationButtons/SimSeasonButton\";\nimport SeasonTable from \"./Organisms/Tables/SeasonTable\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport introJs from \"intro.js\";\n\n\nexport const Season: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        useEffect(() => {\n            if (store.User.franchise.seasonSet.length === 1) {\n                introJs().start()\n            }\n        }, [store.User])\n\n        if (store.User?.franchise == null)\n            return <SmallLoading animation=\"ld ld-bounce\"/>\n        else\n            return (\n                <div>\n                    <div data-intro=\"Click here to simulate the season.\"\n                         data-step={1} className=\"card-demo\">\n                        <SimSeasonButton/>\n                    </div>\n                        <SeasonTable/>\n                </div>\n            );\n    }\n)\n\nexport default Season;","export default __webpack_public_path__ + \"static/media/PlayerDistribution.59274d16.png\";","export default __webpack_public_path__ + \"static/media/DevelopmentDistribution.5685b999.png\";","export default __webpack_public_path__ + \"static/media/Actions.1b337f9f.png\";","import React from 'react';\nimport {observer} from 'mobx-react'\nimport {Typography, Divider, Card, Col, Row, List, Tag, Image, Button} from 'antd';\nimport PlayerDistribution from \"../../assets/PlayerDistribution.png\"\nimport DevelopmentDistribution from \"../../assets/DevelopmentDistribution.png\"\nimport Actions from \"../../assets/Actions.png\"\nimport {colour, suit_icon} from \"../Utils/tablefunctions\";\nimport {useNavigate} from 'react-router-dom';\nimport CSS from \"csstype\";\n\nconst {Title, Paragraph, Text} = Typography;\n\nexport const beginButtonStyles: CSS.Properties = {\n    backgroundColor: '#7395aa',\n    marginTop: '20px',\n    marginBottom: '20px',\n    border: '0px',\n    borderRadius: '2px',\n    fontSize: '16px',\n    color: '#ffffff',\n    boxShadow: 'rgba(27, 31, 35, .3) 0 1px 0',\n    verticalAlign: 'middle',\n    cursor: 'pointer'\n};\n\nexport const Instructions: React.FunctionComponent = observer(() => {\n    const navigate = useNavigate();\n\n    const cities = [\n        {city: \"Los Angeles\"},\n        {city: \"New York\"},\n        {city: \"London\"},\n        {city: \"Chicago\"},\n        {city: \"San Francisco\"},\n        {city: \"Washington\"},\n        {city: \"Phoenix\"},\n        {city: \"Indianapolis\"},\n        {city: \"Philadelphia\"},\n        {city: \"Houston\"},\n        {city: \"Dallas\"},\n        {city: \"Denver\"},\n        {city: \"Boston\"},\n        {city: \"Las Vegas\"},\n        {city: \"Seattle\"},\n        {city: \"Atlanta\"},\n        {city: \"Miami\"},\n        {city: \"Toronto\"},\n        {city: \"Vancouver\"},\n        {city: \"Detroit\"},\n    ];\n\n    const suits = [\n        {\n            suit: \"Club\", pv: 16, description: \"Support the team’s star, aiding spades on the field. Each spade on\" +\n                \" a team receives a +1 bonus for each club on the team.\"\n        },\n        {\n            suit: \"Diamond\",\n            pv: 17,\n            description: \"Fill gaps in a team, and are at their best when they fill a unique \" +\n                \"role on the team. A team with just 1 diamond player gets a +2 bonus, and that bonus is reduced by one\" +\n                \" for each additional diamond on the team.\"\n        },\n        {\n            suit: \"Heart\",\n            pv: 15,\n            description: \"Find their glory in the success of the team, and play with everything \" +\n                \"they have. Each heart adds one point to the PV of each non-heart on the team. \"\n        },\n        {\n            suit: \"Spade\", pv: 18, description: \"Typically highly skilled players who tend to dominate the \" +\n                \"game but don’t mix well with other spades. Each spade on a team subtracts one point from the \" +\n                \"PV of each other spade on the team.\"\n        },\n    ];\n\n\n    return (\n        <div>\n            <Card style={{...{width: '100%'}}}>\n                <Typography style={{fontSize: '15px'}}>\n                    <Title level={3}>The Big League Rulebook</Title>\n                    Congratulations, you are now the owner of a major sports franchise! You will\n                    be responsible for making every decision facing your franchise, from where to locate to whom to\n                    draft. In this section is a basic introduction to the game. At the end, some additional notes\n                    and strategy suggestions will be discussed. The Big League is a game of entrepreneurship,\n                    economics, and statistical acumen. As an owner, you will need to put together a team that is\n                    both dominant on the field and profitable. It is no easy task, but it should be said at the\n                    start that while this game appears at first glance to be overly complicated, it gets smaller the\n                    more you play it. As managers, you will need to field a team of five players acquired through\n                    the draft and free agency. You will also have the option to build a rotation of up to three\n                    players who can be substituted in when your starting players falter. To support these players,\n                    you will also hire a coach whose special attributes bring additional benefits, and you’ll select\n                    a General Manager who orients your franchise to a specific long-run strategy. Once set, your team\n                    will play against each other in a 7-game series. You will also be responsible for managing\n                    your franchise’s finances and resources. This means building a stadium, setting ticket prices, and\n                    selecting actions which can produce a wide range of benefits from upgrading your stadium to\n                    improving your players. On the financial side, you will also have to negotiate contracts with\n                    players and maintain your stadium. In total, ten seasons can be played, hundreds of players will\n                    come through the ranks, and billions of dollars will be made. Good luck!\n                    <Divider/>\n                    <Title level={4}>Cities</Title>\n                    <Paragraph>\n                        Franchises can choose to locate in one of 20 markets:\n                    </Paragraph>\n                    <Row gutter={[0, 0]}>\n                        <List\n                            grid={{gutter: 16, column: 5}}\n                            dataSource={cities}\n                            renderItem={city => (\n                                <List.Item>\n                                    <Tag style={{color: \"#000000\", fontSize: '14px'}} color=\"#D0E0F0\">{city.city}</Tag>\n                                </List.Item>\n                            )}\n                        />\n                    </Row>\n                    Each market has a City Value which contributes to a franchise’s Fan Base. Cities are randomly\n                    assigned a value between 5 and 12.\n                    <Divider/>\n                    <Title level={4}>Stadiums</Title>\n                    To play, teams need stadiums. Stadiums can be built in any of the listed cities and can be built\n                    to any size. When building a new stadium, franchises must determine the number of regular seats the\n                    stadium will hold and how many luxury boxes will be available. These choices can be changed\n                    after the stadium is built but are editable at an extra cost.\n                    <Title level={5}>Construction Costs</Title>\n                    The cost to construct a new stadium is $15,000 per regular seat and $500,000 per luxury box:\n                    <div style={{textAlign: 'center', margin: '10px', fontStyle: 'italic'}}>\n                            <Text> Construction Cost = $15,000 ∗ StadiumSeats + $500,000 ∗ StadiumBoxes</Text>\n                        </div>\n                    At the start of a season, franchises can choose to change seats or luxury boxes to their already built\n                    stadium. Additional seats cost $20,000 each, while additional luxury boxes cost $1,000,000 each.\n                    It costs $5,000 to remove a seat, and $250,000 to remove a luxury box.\n                    <Title level={5}>Grade and Renovation Costs</Title>\n                    <Paragraph style={{marginBottom: '10px'}}>\n                        A new stadium starts off with a grade of 20 and loses one point each season. Stadium grades are\n                        an important component of demand for tickets to games. A higher stadium score draws more fans to\n                        games. The stadium score can be increased through upgrades constructed by spending an action.\n                    </Paragraph>\n                    <Paragraph>\n                        Stadiums can be renovated and returned to their highest grade. The cost of\n                        renovation is determined by the following formula:\n                        <div style={{textAlign: 'center', margin: '10px', fontStyle: 'italic'}}>\n                            <Text> Renovation Cost = $20,000,000 ∗ ln(MaxGrade - CurrentGrade)</Text>\n                        </div>\n                        Where ln is the natural log. The effect of renovation is to set the current grade back to its\n                        max grade, returning the stadium to a grade of 20 plus whatever other bonuses have previously\n                        been applied to the stadium.\n                    </Paragraph>\n                    <Title level={5}>Upkeep</Title>\n                    Stadiums degrade over time, which is not only reflected in the decay of the stadium grade, but\n                    also in the need to pay upkeep costs:\n                    <div style={{textAlign: 'center', margin: '10px', fontStyle: 'italic'}}>\n                            <Text> Upkeep Cost = $200 ∗ StadiumSeats + $20,000 ∗ StadiumBoxes + $200,000 ∗ StadiumGrade</Text>\n                        </div>\n                    <Divider/>\n                    <Title level={4}>General Managers</Title>\n                    <Paragraph>\n                        GMs play a similar role for a Big League franchise as they do in other professional sports, they\n                        set the tone and mission of the franchise. Unlike other hires, owners do not need to worry about\n                        the market for GMs. Instead, at the start of each season, owners simply choose which GM trait\n                        they are setting for their franchise. Those traits are as follows:\n                    </Paragraph>\n                    <ul>\n                        <li>\n                            <Text><Text strong>Facilitator:</Text> Gives the franchise two additional actions for the\n                                season</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Promoter: </Text> Unlocks all the Promotions actions</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Recruiter:</Text> Provides a +2 bonus to all player contracts</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Scouter:</Text> Unlocks S EPV (a reduced EPV error by 50%)</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Suitor:</Text> Disables all suit effects on players</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Trainer:</Text> Unlocks Personal Trainers actions and can train one\n                                player per action</Text>\n                        </li>\n                    </ul>\n                    <Divider/>\n                    <Title level={4}>Players</Title>\n                    <Paragraph>\n                        Each team will need to field a minimum of <Text underline>five</Text> starting players, with the\n                        option of fielding three additional players known as rotation players. Each player is\n                        accompanied by three statistics: age, player value, suit\n                    </Paragraph>\n                    <Title level={5}>Age and Retirement</Title>\n                    <Paragraph>\n                        A player’s age can range from 18 to 30 and impacts their development. Most players will enter\n                        the game at the age of 18 to 22, but in the first season they will be older. All players retire\n                        after age 30 or when their player value drops below 8.\n                    </Paragraph>\n                    <Title level={5}>Player Value</Title>\n                    <Paragraph>\n                        Player Value (PV) is the player’s average score per game before any adjustments are made.\n                        The player’s actual score in each game will be determined randomly, according to the normal\n                        distribution, with the given mean and a standard deviation of 9. For a PV of 15, the score\n                        distribution will look like this:\n                        <div style={{textAlign: 'center', marginBottom: '20px'}}>\n                            <Image\n                                width={'100vh'}\n                                src={PlayerDistribution}\n                            ></Image>\n                        </div>\n                        Owners will only have access to an Estimated Player Value (EPV).\n                        The <Text style={{fontStyle: 'italic'}}> Scouter </Text> GM will provide an additional\n                        Scouted Estimated Player Value (S EPV). Owners can also infer EPV using historical values\n                        from the player history table.\n                    </Paragraph>\n                    <Title level={5}>Suit</Title>\n                    <Paragraph>\n                        Each player is generated based on their suit with a standard deviation of 3. When mixed\n                        in different ways, these suits give a bonus to a team's score, know as the Suit Bonus.\n                        A player will be generated with one of four suits:\n                    </Paragraph>\n                    <List\n                        style={{textAlign: 'center'}}\n                        grid={{gutter: 16, column: 4}}\n                        dataSource={suits}\n                        renderItem={suit => (\n                            <List.Item>\n                                <Tag style={{marginBottom: '5px'}} icon={suit_icon(suit.suit)} color={colour(suit.suit)}\n                                     key={suit.suit}>\n                                    {suit.suit.toUpperCase()}\n                                </Tag>\n                                <br/>\n                                <Text strong>Mean PV: </Text>\n                                <Text> {suit.pv}</Text>\n                                <br/>\n                                <Text strong>Description: </Text>\n                                <Text> {suit.description}</Text>\n                            </List.Item>\n                        )}\n                    />\n                    Only the suits of the five starting players are taken into consideration when determining bonuses or\n                    penalties, and those bonuses or penalties are applied to the team for the entire season, regardless\n                    of substitutions. The maximum total bonus for suits is 9, while the minimum is -20.\n                    <Title level={5}>Player Development</Title>\n                    <Paragraph>\n                        After each season, a player develops, which could mean growth or decay in PV. Their development\n                        is\n                        drawn from the normal distribution, with an age-adjusted mean and a standard deviation of one.\n                        Noting first that the convention N(0,1) represents the standard normal distribution with a mean\n                        of\n                        zero and a standard deviation of one, the following table describes the base rates of\n                        development:\n                    </Paragraph>\n                    <div style={{marginBottom: '20px'}}>\n                        <Row>\n                            <Col style={{textAlign: 'center'}} offset={10}>\n                                <Row><Text strong>Ages</Text></Row>\n                                <Row><Text>18 – 20</Text></Row>\n                                <Row><Text>21 – 23</Text></Row>\n                                <Row><Text>24 – 26</Text></Row>\n                                <Row><Text>27 – 30</Text></Row>\n                            </Col>\n                            <Col style={{textAlign: 'center'}} offset={2}>\n                                <Row><Text strong>Development Distribution</Text></Row>\n                                <Row><Text> N(1,1)</Text></Row>\n                                <Row><Text>N(0,1)</Text></Row>\n                                <Row><Text>N(-1,1)</Text></Row>\n                                <Row><Text>N(-2,1)</Text></Row>\n                            </Col>\n                        </Row>\n                    </div>\n                    <Paragraph>\n                        What this means is that players develop randomly. A 19-year-old player is expected to improve in\n                        player value by 1 for the next season, but it is possible for them to improve by more or even\n                        decay.\n                        These distributions can be altered using the <Text\n                        style={{fontStyle: 'italic'}}> Trainer </Text> General Manager. Below is a table\n                        giving the odds of each outcome based on the distribution:\n                    </Paragraph>\n                    <div style={{textAlign: 'center'}}>\n                        <Image\n                            width={'70vh'}\n                            src={DevelopmentDistribution}\n                        ></Image>\n                    </div>\n                    <Divider/>\n                    <Title level={4}>Teams</Title>\n                    <Title level={5}>Scoring</Title>\n                    Your team will consist of five starting players and up to three bench players. Your score in a\n                    particular game will be determined by calculating the individual contributions of the five starting\n                    players and adding them together with bonuses. All players have a standard deviation of 9.\n                    <Title level={5}>Rotation and Substitution</Title>\n                    Your team can consist of up to three rotation players, though owners can opt to field fewer.\n                    These players will only enter a game if a starting player performs at two standard deviations\n                    or more below their player value. When that is the case, your coach will substitute in the best\n                    scoring bench player, followed by the second and third best scoring players if allowed.\n                    <Divider/>\n                    <Title level={4}>Coaching</Title>\n                    <Paragraph>\n                        Each team is required to hire a coach from the pool of available coaches. Each coach is\n                        different, and has two of eight possible attributes which modify your team’s performance. Those\n                        attributes are listed in the table below:\n                    </Paragraph>\n                    <ul>\n                        <li>\n                            <Text><Text strong>Clutch: </Text> Adds +6 to the score in all losing games</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Fame: </Text> Adds a +5 bonus to your fan index</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Focus:</Text> Reduces the S.D. for each player to 2</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Guts:</Text> Increases the S.D. for each player by 5</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Road:</Text> Negates the opponents home-field advantage</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Substitution:</Text> Calls in a rotation player at 1 S.D. below expected\n                                value</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Teamwork:</Text> Adds +3 to sum of player values for all games</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Underdog:</Text> Adds 40% of difference in starter PVs when an\n                                underdog</Text>\n                        </li>\n                    </ul>\n                    <Divider/>\n                    <Title level={4}>Player Contracts</Title>\n                    Whenever you sign a new player, you will need to negotiate a contract with them. Contracts consist\n                    of three elements: salary, length, and clauses. Players grade the contract offered to them based on\n                    these elements.\n                    <Title level={5}>Estimated Player Value</Title>\n                    Each player is given an EPV based on the following:\n                    <div style={{textAlign: 'center', margin: '10px', fontStyle: 'italic'}}>\n                        <Text>EPV = PV + ε</Text>\n                    </div>\n                    Where PV is the player’s true Player Value, or the average points per game they will score on their\n                    own, and ε is a random error term, drawn from a normal distribution with a mean of 0 and standard\n                    deviation of 3. The <Text style={{fontStyle: 'italic'}}> Scouter </Text> GM reduces the standard\n                    deviation of this error term to 2 with its S EPV. This is, essentially, an estimate of the players\n                    skills. It is rarely exact but is correct on average.\n                    <Title level={5}>Clauses</Title>\n                    There are three different clauses that can be inserted into player contracts.\n                    <ul>\n                        <li>\n                            <Text><Text strong>Team Option: </Text> allows the team to terminate a player’s contract at\n                                the beginning of a season,\n                                even if that contract was supposed to continue.</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Player Option: </Text> allows a player to choose to terminate their\n                                contract with a team and become a free agent. If the option is in effect, the player\n                                will leave the team if their salary is less than 75% of the average for their\n                                EPV.</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Renewal Clause:</Text> allows the team to re-sign a player after their\n                                contract ends for the same salary for one additional year. Teams can choose to make this\n                                clause repeatable, meaning the team could force a re-sign each year indefinitely. A\n                                renewal clause cannot override a player option. If a player has an option, and chooses\n                                to leave, nothing can stop that from happening.</Text>\n                        </li>\n                    </ul>\n                    <Title level={5}>Player's Contract Grades</Title>\n                    <Paragraph>\n                        Players will grade the contracts offered to them based on the terms. To calculate the grade,\n                        follow\n                        the following procedure:\n                    </Paragraph>\n                    <ul>\n                        <li>Take the annual salary offered and divide by 1 million.</li>\n                        <li>Multiply that number by the length of the contract plus one.</li>\n                        <li>Divide that number by the player’s EPV.</li>\n                        <li>Subtract 1 point for each year of the contract that the team option is active.</li>\n                        <li>Add 1⁄2 point for each year of the contract the player has an option to leave.</li>\n                        <li>Subtract 1 points for a non-repeat renewal clause.</li>\n                        <li>Subtract 2 points for a repeat renewal clause.</li>\n                        <li>Add 1 point for each year over the age of 26.</li>\n                        <li>Add 2 points if the team has the <Text style={{fontStyle: 'italic'}}> Recruiter </Text> GM.</li>\n                    </ul>\n                    <Paragraph>\n                        The Big League Player's Association (BLPA) mandates that all player contracts have a minimum\n                        grade of 5 at the time the contract is signed. This minimum applied to both drafted players and\n                        players signed in free agency. Once the contract is signed, it is enforced by law and cannot be\n                        violated in any way. The Draft will be conducted per league rules. When a team drafts a player,\n                        they are free to write any contract they please so long as it complies with BLPA mandates. You\n                        must sign every player that you draft.\n                    </Paragraph>\n                    <Title level={5}>Free Agents</Title>\n                    Players whose draft contracts end, or who are not drafted, become Free Agents and can be signed by\n                    any team in the league. Teams bid for Free Agents in an open market each season by offering complete\n                    contracts. The player will always select the contract with the highest grade.\n                    <Divider/>\n                    <Title level={4}>Actions</Title>\n                    <div style={{textAlign: 'center', marginBottom: '20px'}}>\n                        <Image\n                            width={'120vh'}\n                            src={Actions}\n                        ></Image>\n                    </div>\n                    <Divider/>\n                    <Title level={4}>Fan Index</Title>\n                    A franchise’s Fan Index is a determinant in almost every aspect of their revenue. The Fan Index is\n                    calculated in two steps. First, you calculate your fan base for the current season and for the\n                    previous season. The Fan Base is determined as follows:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>FanBase = (2 ∗ CityValue) + PointsPerGame + Wins - Losses + (3 ∗ Championships)</Text>\n                    </div>\n                    Then the Fan Index is determined as follows:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>FanIndex𝑡 = 0.7 ∗ FanBase𝑡 + 0.4 ∗ FanIndex𝑡-1</Text>\n                    </div>\n                    Where ‘t’ is the season in question. The Fan Index in season 0 is 70.\n                    <Divider/>\n                    <Title level={4}>Advertising</Title>\n                    <Paragraph>\n                        Franchises can boost their brand through advertising, which results in higher and more elastic\n                        demand for their games and merchandise. A franchise builds an advertising score by spending\n                        money on campaigns. The table below outlines the cost of additional advertising points:\n                    </Paragraph>\n                    <div style={{marginBottom: '20px'}}>\n                        <Row>\n                            <Col style={{textAlign: 'center'}} offset={10}>\n                                <Row><Text strong>Point</Text></Row>\n                                <Row><Text>1</Text></Row>\n                                <Row><Text>2</Text></Row>\n                                <Row><Text>3</Text></Row>\n                                <Row><Text>4</Text></Row>\n                                <Row><Text>5</Text></Row>\n                                <Row><Text>6</Text></Row>\n                                <Row><Text>7</Text></Row>\n                                <Row><Text>8</Text></Row>\n                                <Row><Text>9</Text></Row>\n                                <Row><Text>10</Text></Row>\n                            </Col>\n                            <Col style={{textAlign: 'center'}} offset={2}>\n                                <Row><Text strong>Total Cost</Text></Row>\n                                <Row><Text>$1 million</Text></Row>\n                                <Row><Text>$2 million</Text></Row>\n                                <Row><Text>$4 million</Text></Row>\n                                <Row><Text>$8 million</Text></Row>\n                                <Row><Text>$16 million</Text></Row>\n                                <Row><Text>$32 million</Text></Row>\n                                <Row><Text>$64 million</Text></Row>\n                                <Row><Text>$128 million</Text></Row>\n                                <Row><Text>$256 million</Text></Row>\n                                <Row><Text>$512 million</Text></Row>\n                            </Col>\n                        </Row>\n                    </div>\n                    <Divider/>\n                    <Title level={4}>Revenue</Title>\n                    There are several sources of revenue for franchises, each of which is described below.\n                    <Title level={5}>Ticket Sales</Title>\n                    Franchises must choose the price of their tickets at the start of each season. This price cannot be\n                    changed during or after the season is played. The number of tickets purchased per home game is\n                    determined by the following demand curve:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>Demand per Home Game = (15∗Advertising + 200) ∗ (6∗Advertising + 2∗FanIndex +\n                            3∗StadiumGrade − Price)</Text>\n                    </div>\n                    Despite its complex appearance, this demand curve is a simple linear one, and should be easy to\n                    manipulate for those adept in the art of economics. When setting your ticket price, it is important\n                    to remember that all the costs associated with the stadium and its upkeep have already been paid.\n                    Your goal, then, is to maximize the revenue generated from ticket sales. That revenue is calculated\n                    simply as price times quantity, or in the mathematical parlance below:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>Revenue per Home Game = Price ∗ (15∗Advertising + 200) ∗ (6∗Advertising + 2∗FanIndex +\n                            3∗StadiumGrade − Price)</Text>\n                    </div>\n                    <Title level={5}>Luxury Boxes</Title>\n                    Franchises must also choose the price of their luxury boxes at the start of each season. Unlike\n                    regular\n                    seats, luxury boxes are purchased and priced for the entire season, including the playoffs. The\n                    demand for luxury boxes is given by this inverse demand function:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>Demand for Luxury Boxes = ((Advertising ∗ FanIndex𝑡−1 ∗ CityValue) / 10) – ((Price ∗\n                            CityValue) / 10,000)\n                        </Text>\n                    </div>\n                    As with regular tickets, you cannot sell more luxury boxes than are available in your stadium, no\n                    matter what price you set, and it may not always be wise to sell them all. Unlike regular tickets,\n                    there is no missing information when it comes to calculating Luxury Box revenue. The Fan Index from\n                    the previous season is known precisely, as is the City Value, and the advertising score is selected\n                    at the same time as this price is set. So, your goal is simply to maximize the revenue:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>Revenue from Luxury Boxes = Price ∗ ((Advertising ∗ FanIndex𝑡−1 ∗ CityValue) / 10) –\n                            ((Price ∗\n                            CityValue) / 10,000)\n                        </Text>\n                    </div>\n                    It is worth mentioning again that luxury boxes are sold by the season, not by the game. So, the\n                    equation above describes the total season revenue from luxury box sales.\n                    <Title level={5}>Merchandise</Title>\n                    Merchandise revenue is based on two factors: your fan index and your advertising score. Revenue from\n                    merchandise is calculated as follows:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>Merchandise Revenue = 50,000 ∗ Advertising ∗ FanIndex𝑡\n                        </Text>\n                    </div>\n                    <Title level={5}>TV Contract</Title>\n                    Television contracts are negotiated league-wide and must be renewed every year. The total league\n                    contract is determined by the following equations:\n                    <div style={{textAlign: 'center', margin: '20px', fontStyle: 'italic'}}>\n                        <Text>\n                            Nolly Scull Idealized Standard = (Games Played / 2) / (Games Played ** 0.5)\n                            <br/>\n                            Competitiveness = Actual Standard Deviation / Nolly Scull Idealized Standard\n                            <br/>\n                            TV Revenue = (ΣLeagueFanIndex𝑡−1 / Competitiveness) * 1,000,000\n                        </Text>\n                    </div>\n                    This means that the competitiveness of the league has large implications for the television\n                    contract. The more competitive the league the larger the contract. TV Revenue is shared evenly by\n                    all franchises. For the first season, a contract of $70 million per franchise has been awarded.\n                    <Divider/>\n                    <Title level={4}>Costs</Title>\n                    There are six categories in which costs fall into, most of which have already been described\n                    above.\n                    <Title level={5}>Stadium Construction</Title>\n                    Most stadium construction costs are incurred in the first season of the game when a franchise builds\n                    their stadium. In later seasons, the costs of adding and removing seats/luxury boxes or the cost of\n                    renovating a stadium will appear in this category.\n                    <Title level={5}>Stadium Upkeep</Title>\n                    These costs will reflect the formula for stadium upkeep described above.\n                    <Title level={5}>Operating Costs</Title>\n                    Every season, each franchise will face $50,000,000 in operating costs regardless of their other\n                    circumstances. This amount reflects the standard costs of operating, including staff,\n                    travel, and other operations. This cost cannot be avoided and does not fluctuate.\n                    <Title level={5}>Advertising Costs</Title>\n                    These costs will reflect the advertising points selected by a franchise as described above.\n                    <Title level={5}>Salaries</Title>\n                    This category includes the salaries paid to all players signed to the team. Players who do not play\n                    in a season still must be paid the full amount of their contract.\n                    <Title level={5}>Action Costs</Title>\n                    Of the 22 available actions, 21 have associated costs, which will be added together in this\n                    category. The costs of each action are described in the table above.\n                </Typography>\n            </Card>\n            <Button style={beginButtonStyles} onClick={() => navigate('/Franchise')} block>\n                        Begin Your Journey\n            </Button>\n        </div>\n    );\n})\n\nexport default Instructions;","import React, {useContext} from 'react';\nimport {observer} from \"mobx-react\";\nimport {StoreContext} from \"../models\";\nimport {Link} from \"react-router-dom\";\nimport {Spin} from 'antd';\nimport '../loading.css';\nimport '../transition.min.css';\nimport BigLoading from \"./Atoms/Loading/BigLoading\";\nimport Instructions from \"./Templates/Instructions\";\n\n\nexport const Home: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        if (store.User === undefined) return (\n            <Spin/>\n        )\n        else if (store.User.league && !store.User.franchise) return (\n            <div style={{textAlign: 'center', marginTop: '20px'}}>\n                <h1>Welcome to, {store.User.league.leagueName}!</h1>\n                <h3>Click <Link to=\"/Franchise\">here</Link> to create a Franchise!</h3>\n            </div>\n        )\n        else if (store.User.league?.franchiseSet?.length > 1) return (\n            <div>\n                <div className=\"ld ld-slide-rtl-in\">\n                    <h1>Welcome to, {store.User.league?.leagueName}!</h1>\n                    <h1>Good luck this season, {store.User.franchise?.franchise}!</h1>\n                    {/*<p>Please read the instructions to guide you on your way to victory</p>*/}\n                    <BigLoading animation=\"ld ld-bounce\"/>\n                </div>\n                <Instructions/>\n            </div>\n        )\n        else {\n            return (\n                <div>\n                <Instructions/>\n                </div>\n            );\n        }\n    }\n)\n\nexport default Home;\n","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport {StoreContext} from \"../../../models\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\nimport SmallLoading from \"../../Atoms/Loading/SmallLoading\";\n\n\nexport const SignPlayersButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const signPlayers = () => {\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            const data = new FormData();\n            data.append(\"franchise_id\", store.User.franchise.id)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/sign_players', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                        {email: email},\n                        `__typename\n                                      id\n                                      franchise{\n                                        __typename\n                                        id\n                                        league{\n                                          __typename\n                                          id\n                                          franchiseSet{\n                                            __typename\n                                            id\n                                            playerSet{\n                                              __typename\n                                              id\n                                              name\n                                              suit\n                                              age\n                                              pv\n                                              epv\n                                              sEpv\n                                              contract\n                                              tOption\n                                              pOption\n                                              renew\n                                              salary\n                                              grade\n                                              trainer\n                                              lineup\n                                            }\n                                          }\n                                        }\n                                      }`\n                    )\n                    setTimeout(() => {\n                        setLoading(false)\n                    }, 1000);\n                })\n                .catch(err => {\n                    console.log(err)\n                    setTimeout(() => {\n                        setLoading(false)\n                    }, 1000);\n                })\n        };\n\n\n        if (loading) return (\n            <div>\n                <SmallLoading animation=\"ld ld-bounce\"/>\n            </div>\n        )\n        else {\n            return (\n                <div>\n                    <Button style={simButtonStyles} onClick={() => signPlayers()} block>\n                        Sign Opponent Players\n                    </Button>\n                </div>\n            );\n        }\n    }\n)\n\nexport default SignPlayersButton;","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport {StoreContext} from \"../../../models\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\nimport SmallLoading from \"../../Atoms/Loading/SmallLoading\";\n\nexport const SetLineupsButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const setLineups = () => {\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            const data = new FormData();\n            data.append(\"franchise_id\", store.User.franchise.id)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/set_lineup', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                    {email: email},\n                        `__typename\n                                      id\n                                      franchise{\n                                        __typename\n                                        id\n                                        league{\n                                          __typename\n                                          id\n                                          franchiseSet{\n                                            __typename\n                                            id\n                                            playerSet{\n                                              __typename\n                                              id\n                                              name\n                                              suit\n                                              age\n                                              pv\n                                              epv\n                                              sEpv\n                                              contract\n                                              tOption\n                                              pOption\n                                              renew\n                                              salary\n                                              grade\n                                              year\n                                              trainer\n                                              lineup\n                                            }\n                                            gm{\n                                                __typename\n                                                id\n                                                trait\n                                            }\n                                            coach{\n                                                __typename\n                                                id\n                                                name\n                                                attributeOne\n                                                attributeTwo\n                                            }\n                                          }\n                                        }\n                                      }`\n                    )\n                    setTimeout(() => {setLoading(false)}, 1000);\n                })\n                .catch(err => {\n                    console.log(err)\n                    setTimeout(() => {setLoading(false)}, 1000);\n                })\n        };\n\n\n        if (loading) return (\n            <div>\n                <SmallLoading animation={\"ld ld-bounce\"}/>\n            </div>\n        )\n        else {\n            return (\n                <div>\n                    <Button style={simButtonStyles} onClick={() => setLineups()} block>\n                        Set Opponent Lineups\n                    </Button>\n                </div>\n            );\n        }\n    }\n)\n\nexport default SetLineupsButton;","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const MissingStartersIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n             className=\"ld ld-bounce-in\"\n             style={{animationDuration: \"5s\"}}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g fill=\"#61DAFB\">\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#666\"\n                      d=\"M83.8 53.1c-.4-.3-.9-.5-1.4-.7 4.2-2.8 6.8-7.9 5.8-13.5-1-5.7-5.8-10.2-11.5-10.8-8.1-.9-14.9 5.4-14.9 13.2 0 4.7 2.4 8.7 6 11.1-.5.2-.9.4-1.4.7-5.2 3-8.7 8.6-8.7 15v11.4c0 3.3 2.7 6 6 6h22.8c3.3 0 6-2.7 6-6V68.2c0-6.5-3.5-12.1-8.7-15.1z\"></path>\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#666\"\n                      d=\"M16.2 53.1c.4-.3.9-.5 1.4-.7-4.2-2.8-6.8-7.9-5.8-13.5 1-5.7 5.8-10.2 11.5-10.8 8.1-.9 14.9 5.4 14.9 13.2 0 4.7-2.4 8.7-6 11.1.5.2.9.4 1.4.7 5.2 3 8.7 8.6 8.7 15v11.4c0 3.3-2.7 6-6 6H13.5c-3.3 0-6-2.7-6-6V68.2c0-6.5 3.5-12.1 8.7-15.1z\"></path>\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#f5e6c8\"\n                      d=\"M62.1 45c-.6-.3-1.2-.6-1.9-.9 5.8-3.8 9.4-10.9 8-18.7-1.4-7.9-8-14.1-16-15-11.1-1.3-20.6 7.4-20.6 18.3 0 6.4 3.3 12.1 8.3 15.4-.6.3-1.3.6-1.9.9-7.2 4.1-12 11.9-12 20.8v15.7c0 4.6 3.7 8.3 8.3 8.3h31.4c4.6 0 8.3-3.7 8.3-8.3V65.8c.2-8.9-4.7-16.7-11.9-20.8z\"></path>\n            </g>\n        </svg>\n    );\n})\n\nexport default MissingStartersIcon;\n\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const StartersIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n             // className=\"ld ld-bounce-in\"\n             // style={{animationDuration: \"1s\"}}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g fill=\"#61DAFB\">\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#f5e6c8\"\n                      d=\"M83.8 53.1c-.4-.3-.9-.5-1.4-.7 4.2-2.8 6.8-7.9 5.8-13.5-1-5.7-5.8-10.2-11.5-10.8-8.1-.9-14.9 5.4-14.9 13.2 0 4.7 2.4 8.7 6 11.1-.5.2-.9.4-1.4.7-5.2 3-8.7 8.6-8.7 15v11.4c0 3.3 2.7 6 6 6h22.8c3.3 0 6-2.7 6-6V68.2c0-6.5-3.5-12.1-8.7-15.1z\"></path>\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#f5e6c8\"\n                      d=\"M16.2 53.1c.4-.3.9-.5 1.4-.7-4.2-2.8-6.8-7.9-5.8-13.5 1-5.7 5.8-10.2 11.5-10.8 8.1-.9 14.9 5.4 14.9 13.2 0 4.7-2.4 8.7-6 11.1.5.2.9.4 1.4.7 5.2 3 8.7 8.6 8.7 15v11.4c0 3.3-2.7 6-6 6H13.5c-3.3 0-6-2.7-6-6V68.2c0-6.5 3.5-12.1 8.7-15.1z\"></path>\n                <path strokeMiterlimit=\"10\" strokeWidth=\"3\" stroke=\"#000\" fill=\"#f5e6c8\"\n                      d=\"M62.1 45c-.6-.3-1.2-.6-1.9-.9 5.8-3.8 9.4-10.9 8-18.7-1.4-7.9-8-14.1-16-15-11.1-1.3-20.6 7.4-20.6 18.3 0 6.4 3.3 12.1 8.3 15.4-.6.3-1.3.6-1.9.9-7.2 4.1-12 11.9-12 20.8v15.7c0 4.6 3.7 8.3 8.3 8.3h31.4c4.6 0 8.3-3.7 8.3-8.3V65.8c.2-8.9-4.7-16.7-11.9-20.8z\"></path>\n            </g>\n        </svg>\n    );\n})\n\nexport default StartersIcon;\n\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const UnsetPlayerIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n             className=\"ld ld-bounce-in\"\n             style={{animationDuration: \"5s\"}}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g>\n                <path fill=\"#f5e6c8\"\n                      d=\"M60.688 89.375H39.313c-8.595 0-15.563-6.968-15.563-15.563V70c0-13.876 11.249-25.125 25.125-25.125h2.25C65.001 44.875 76.25 56.124 76.25 70v3.813c0 8.594-6.968 15.562-15.562 15.562z\">\n                </path>\n                <circle fill=\"#f5e6c8\" r=\"21.25\" cy=\"31.875\" cx=\"50\"></circle>\n            </g>\n            <g>\n                <circle strokeMiterlimit=\"10\" strokeWidth=\"4\" stroke=\"#000\" fill=\"#fff\" r=\"14.738\" cy=\"69.814\"\n                        cx=\"69.793\"></circle>\n            </g>\n            <g>\n                <path fill=\"#666\" d=\"M63.147 71.813h-.5a2 2 0 0 1 0-4h.5a2 2 0 0 1 0 4z\"></path>\n            </g>\n            <g>\n                <path fill=\"#666\" d=\"M70.197 71.813h-.708a2 2 0 0 1 0-4h.708a2 2 0 0 1 0 4z\"></path>\n            </g>\n            <g>\n                <path fill=\"#666\" d=\"M76.938 71.813h-.5a2 2 0 0 1 0-4h.5a2 2 0 0 1 0 4z\"></path>\n            </g>\n        </svg>\n    );\n})\n\nexport default UnsetPlayerIcon;\n\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const UnsignedPlayerIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n             className=\"ld ld-bounce-in\"\n             style={{animationDuration: \"5s\"}}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g fill=\"#61DAFB\">\n                <path fill=\"#333\"\n                      d=\"M86.034 88.907H15.238a3.43 3.43 0 0 1-3.43-3.43V31.829a3.43 3.43 0 0 1 3.43-3.43h70.796a3.43 3.43 0 0 1 3.43 3.43v53.648a3.43 3.43 0 0 1-3.43 3.43z\"></path>\n                <path fill=\"#666\"\n                      d=\"M43.654 23.5H16.708v60.507h26.947c3.824.012 6.125-1.108 6.982 1.47V27.42c-1.454-2.865-3.84-4.067-6.983-3.92z\"></path>\n                <path fill=\"#666\"\n                      d=\"M57.617 23.5h26.947v60.507H57.617c-3.824.012-6.125-1.108-6.982 1.47V27.42c1.454-2.865 3.84-4.067 6.982-3.92z\"></path>\n                <path fill=\"#b3b3b3\"\n                      d=\"M43.654 21.541H16.708v60.507h26.947c3.824.012 6.125.851 6.982 3.43V25.46c-1.454-2.865-3.84-4.067-6.983-3.919z\"></path>\n                <path fill=\"#b3b3b3\"\n                      d=\"M57.617 21.541h26.947v60.507H57.617c-3.824.012-6.125.851-6.982 3.43V25.46c1.454-2.865 3.84-4.067 6.982-3.919z\"></path>\n                <path d=\"M30.528 73.556h-4.573V92.5l4.573-3.92 4.573 3.92V73.556z\" fill=\"#c33737\"></path>\n                <path fill=\"#e0e0e0\"\n                      d=\"M43.654 19.581H16.708v60.507h26.947c3.824.012 6.125 1.831 6.982 4.409V23.5c-1.454-2.865-3.84-4.066-6.983-3.919z\"></path>\n                <path fill=\"#e0e0e0\"\n                      d=\"M57.617 19.581h26.947v60.507H57.617c-3.824.012-6.125 1.831-6.982 4.409V23.5c1.454-2.865 3.84-4.066 6.982-3.919z\"></path>\n                <g>\n                    <path d=\"M14.973 28.76H63.55v14.93H14.973z\" fill=\"#eba523\"\n                          transform=\"rotate(-134.999 39.262 36.225)\"></path>\n                    <path fill=\"#f2f2f2\"\n                          d=\"M27.366 13.772L22.014 8.42a3.14 3.14 0 0 0-4.442 0l-6.115 6.115a3.14 3.14 0 0 0 0 4.442l5.352 5.352 10.557-10.557z\"></path>\n                    <path d=\"M58.311 60.153l4.879-4.878-1.475-7.154-5.279 5.279-5.278 5.278z\" fill=\"#f5e6c8\"></path>\n                    <path d=\"M64.457 61.42l-1.267-6.145-4.879 4.878z\" fill=\"#333\"></path>\n                    <path d=\"M52.477 49.441L26.249 23.212\" strokeWidth=\"1.941\" stroke=\"#333\" fill=\"none\"></path>\n                </g>\n            </g>\n        </svg>\n    );\n})\n\nexport default UnsignedPlayerIcon;\n\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\n\n\nexport const SignedPlayerIcon: React.FunctionComponent = observer(() => {\n\n    return (\n        <svg xmlSpace=\"preserve\"\n            // className=\"ld ld-bounce-in\"\n            // style={{animationDuration: \"3s\"}}\n             viewBox=\"0 0 100 100\"\n             xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"50px\" height=\"50px\">\n            <g>\n                <path fill=\"#333\"\n                      d=\"M89.115 31.867a.945.945 0 0 0-.567-.691L50.137 15.072a.952.952 0 0 0-1.054.214L12.792 52.451c-.319.327-.283.709-.253.858s.146.515.567.691l6.303 2.643 3.338 1.399 28.77 12.062a.95.95 0 0 0 1.054-.214l26.337-26.971 2.528-2.589 7.426-7.605a.949.949 0 0 0 .253-.858z\"></path>\n                <path fill=\"#e0e0e0\"\n                      d=\"M82.245 44.318L54.979 72.242a4.3 4.3 0 0 1-4.763.966L20.219 60.632l-3.338-1.399-2.364-.991-1.714-.719c-.523-.219-1.07-.68-1.575-.169-.224.227-.334.541-.413.85-.279 1.087-.222 2.275-.179 3.388.046 1.188.217 2.371.496 3.527.168.694.372 1.379.61 2.053.229.647.471 1.321.837 1.906.214.341.511.729.896.871a6.3 6.3 0 0 1 .259.101l.526.221 1.471.617 1.962.823 2.372.995 2.702 1.133 2.951 1.237 3.119 1.308 3.206 1.344 3.213 1.347 3.139 1.316 2.984 1.251 2.749 1.152 2.433 1.02 2.036.854a1031.432 1031.432 0 0 0 2.558 1.072l.361.151a.953.953 0 0 0 1.054-.214l33.674-34.485V40.225l-1.471 1.507-2.528 2.586z\"></path>\n                <path\n                    d=\"M91.27 35.076a4.315 4.315 0 0 0 1.143-3.879 4.319 4.319 0 0 0-2.564-3.126L51.438 11.968a4.303 4.303 0 0 0-4.763.966l-.539.552-2.508 2.568-4.085 4.183-5.142 5.266-5.679 5.816-5.696 5.834-5.194 5.319-4.172 4.272c-1.183 1.211-2.366 2.294-3.319 3.724-.655.984-1.058 2.005-1.466 3.11a22.866 22.866 0 0 0-.797 2.62 21.169 21.169 0 0 0-.532 3.459 21.15 21.15 0 0 0 .695 6.939c.483 1.797 1.101 3.638 2.295 5.097.569.695 1.173 1.217 2.01 1.507.228.079.45.189.673.282l4.432 1.858 6.439 2.7 7.409 3.106 7.342 3.078 6.237 2.615 4.094 1.716 1.041.437a4.304 4.304 0 0 0 4.763-.966L91.27 50.862a4.32 4.32 0 0 0-1.421-7.005l-.239-.1v-6.981l1.66-1.7zm-5.025 7.27V51.19L52.571 85.676a.951.951 0 0 1-1.054.214l-.361-.151-1-.419-1.558-.653-2.036-.854-2.433-1.02-2.749-1.152-2.984-1.251-3.139-1.316-3.213-1.347-3.206-1.344-3.119-1.308-2.951-1.237-2.702-1.133-2.372-.995-1.962-.823-1.471-.617-.526-.221a6.3 6.3 0 0 0-.259-.101c-.385-.142-.682-.53-.896-.871-.366-.584-.608-1.258-.837-1.906a20.935 20.935 0 0 1-.61-2.053 18.013 18.013 0 0 1-.496-3.527c-.043-1.113-.1-2.302.179-3.388.079-.309.189-.623.413-.85.505-.511 1.051-.051 1.575.169l1.714.719 2.364.991 3.338 1.399 29.997 12.576a4.299 4.299 0 0 0 4.763-.966l27.266-27.924 2.528-2.589 1.471-1.507v2.125zm2.617-9.621l-7.426 7.605-2.528 2.589L52.571 69.89a.953.953 0 0 1-1.054.214l-28.77-12.062-3.338-1.399L13.106 54a.945.945 0 0 1-.513-1.235c.017-.037.036-.074.054-.11a.914.914 0 0 1 .145-.204l36.291-37.165a.951.951 0 0 1 1.054-.214l38.411 16.104a.945.945 0 0 1 .567.691.949.949 0 0 1-.253.858z\"></path>\n            </g>\n            <g>\n                <path d=\"M44.595 51.362L19.597 26.364l9.847-9.847 24.998 24.998z\" strokeLinejoin=\"round\"\n                      strokeLinecap=\"round\" strokeWidth=\"2.14297857\" stroke=\"#000\" fill=\"#eba523\"></path>\n                <path strokeLinecap=\"round\" strokeWidth=\"2.143\" stroke=\"#000\" fill=\"#e0e0e0\"\n                      d=\"M29.444 16.516l-4.992-4.992a2.93 2.93 0 0 0-4.144 0l-5.704 5.704a2.93 2.93 0 0 0 0 4.144l4.992 4.992 9.848-9.848z\"></path>\n                <path d=\"M51.267 52.738l4.551-4.551-1.376-6.673-4.924 4.924-4.923 4.924z\" strokeLinejoin=\"round\"\n                      strokeLinecap=\"round\" strokeWidth=\"2.143\" stroke=\"#000\" fill=\"#f5e6c8\"></path>\n                <path d=\"M57 53.92l-1.182-5.733-4.551 4.551z\" strokeLinejoin=\"round\" strokeLinecap=\"round\"\n                      strokeWidth=\"2.143\" stroke=\"#000\" fill=\"#333\"></path>\n                <path d=\"M45.826 42.745L28.403 25.323\" strokeLinejoin=\"round\" strokeLinecap=\"round\"\n                      strokeWidth=\"2.143\" stroke=\"#000\" fill=\"none\"></path>\n            </g>\n        </svg>\n    );\n})\n\nexport default SignedPlayerIcon;\n\n\n","import React, {useContext, useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Card, Col, Row, Statistic, Badge, Divider} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {FranchiseTypeModelType, StoreContext} from \"../../models\";\nimport MissingStartersIcon from \"../Atoms/Icons/MissingStartersIcon\";\nimport StartersIcon from \"../Atoms/Icons/StartersIcon\";\nimport UnsetPlayerIcon from \"../Atoms/Icons/UnsetPlayerIcon\";\nimport UnsignedPlayerIcon from \"../Atoms/Icons/UnsignedPlayerIcon\";\nimport SignedPlayerIcon from \"../Atoms/Icons/SignedPlayerIcon\";\n\n\nexport const missingStaff = (franchise: FranchiseTypeModelType) => {\n    if (!franchise.gm?.trait || !franchise.coach?.attributeOne)\n        return \"Missing Staff\"\n    else {\n        return \"Staff Signed\"\n    }\n};\n\nexport const missingStaffColor = (franchise: FranchiseTypeModelType) => {\n    if (!franchise.gm?.trait || !franchise.coach?.attributeOne)\n        return \"#EB5E55\"\n    else {\n        return \"#71C544\"\n    }\n};\n\nexport const unsignedPlayer = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsignedPlayers.length > 0)\n        return \"Unsigned Players \" + franchise.unsignedPlayers.length\n    else {\n        return \"All Signed\"\n    }\n};\n\nexport const unsignedPlayerColor = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsignedPlayers.length > 0)\n        return \"#EB5E55\"\n    else {\n        return \"#71C544\"\n    }\n};\n\nexport const unsignedPlayerLogic = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsignedPlayers.length > 0)\n        return (\n            <UnsignedPlayerIcon/>\n        )\n    else {\n        return <SignedPlayerIcon/>\n    }\n};\n\nexport const unsetPlayers = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsetPlayers.length > 0)\n        return \"Unset Players \" + franchise.unsetPlayers.length\n    else if (franchise.starters.length !== 5) {\n        return \"Missing \" + (5 - franchise.starters.length) + \" Starters\"\n    } else {\n        return \"All Set\"\n    }\n};\n\nexport const unsetPlayerColor = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsetPlayers.length > 0)\n        return \"#EB5E55\"\n    else if (franchise.starters.length !== 5) {\n        return \"#EB5E55\"\n    } else {\n        return \"#71C544\"\n    }\n};\n\nexport const unsetPlayerLogic = (franchise: FranchiseTypeModelType) => {\n    if (franchise.unsetPlayers.length > 0)\n        return <UnsetPlayerIcon/>\n    else if (franchise.starters.length !== 5) {\n        return <MissingStartersIcon/>\n    } else {\n        return <StartersIcon/>\n    }\n};\n\nexport const LeagueStatus: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        useEffect(() => {\n            // used for animation of draft order\n            const timer = setTimeout(() => {\n                toggle(true)\n            }, 100);\n            return () => clearTimeout(timer);\n        }, []);\n\n        // used for animation of franchises\n        const [on, toggle] = useState(false);\n        // const springs = useTrail(store.User.league.franchiseSet.length, {\n        //     to: {opacity: on ? 1 : 0.5},\n        //     config: {tension: 300}\n        // });\n\n        return (\n            <Col span={24}>\n                {store.User.league.franchiseSet.map((franchise: any) => (\n                        <Row>\n                            <Col span={7} offset={0}>\n                                 <Badge.Ribbon color={missingStaffColor(franchise)}\n                                              text={missingStaff(franchise)}>\n                                <Card bordered={false}\n                                      key={franchise.id}\n                                      style={{boxShadow: 'rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px'}}\n                                >\n                                    <Statistic title=\"Franchise\"\n                                               value={franchise ? franchise.franchise : \"None\"}/>\n                                </Card>\n                                 </Badge.Ribbon>\n                            </Col>\n                            <Col span={7} offset={1}>\n                                <Badge.Ribbon color={unsignedPlayerColor(franchise)}\n                                              text={unsignedPlayer(franchise)}>\n                                    <Card bordered={false}\n                                          key={franchise.id}\n                                          style={{boxShadow: 'rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px'}}\n                                    >\n                                        <Row>\n                                            <Col span={12}>\n                                                <Statistic title=\"General Manager\"\n                                                           value={franchise.gm ? franchise?.gm?.trait?.toLowerCase() : \"None\"}/>\n                                            </Col>\n                                            <Col span={12}>\n                                                {unsignedPlayerLogic(franchise)}\n                                            </Col>\n                                        </Row>\n                                    </Card>\n                                </Badge.Ribbon>\n                            </Col>\n                            <Col span={7} offset={1}>\n                                <Badge.Ribbon color={unsetPlayerColor(franchise)}\n                                              text={unsetPlayers(franchise)}>\n                                    <Card bordered={false}\n                                          key={franchise.id}\n                                          style={{boxShadow: 'rgba(9, 30, 66, 0.2) 0px 1px 1px, rgba(9, 30, 66, 0.1) 0px 0px 1px 1px'}}>\n                                        <Row>\n                                            <Col span={12}>\n                                                <Statistic title=\"Coach\"\n                                                           value={franchise.coach ? franchise.coach?.name?.toLowerCase() : \"None\"}/>\n                                            </Col>\n                                            <Col span={12}>\n                                                {unsetPlayerLogic(franchise)}\n                                            </Col>\n                                        </Row>\n                                    </Card>\n                                </Badge.Ribbon>\n                            </Col>\n                        </Row>\n                ))}\n            </Col>\n        )\n    }\n)\n\nexport default LeagueStatus;\n","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport {StoreContext} from \"../../../models\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\nimport SmallLoading from \"../../Atoms/Loading/SmallLoading\";\n\n\nexport const SetStaffButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const setLineups = () => {\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            const data = new FormData();\n            data.append(\"franchise_id\", store.User.franchise.id)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/set_staff', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                    {email: email},\n                        `__typename\n                                      id\n                                      franchise{\n                                        __typename\n                                        id\n                                        league{\n                                          __typename\n                                          id\n                                          franchiseSet{\n                                            __typename\n                                            id\n                                            playerSet{\n                                              __typename\n                                              id\n                                              name\n                                              suit\n                                              age\n                                              pv\n                                              epv\n                                              sEpv\n                                              contract\n                                              tOption\n                                              pOption\n                                              renew\n                                              salary\n                                              grade\n                                              year\n                                              trainer\n                                              lineup\n                                            }\n                                            gm{\n                                                __typename\n                                                id\n                                                trait\n                                            }\n                                            coach{\n                                                __typename\n                                                id\n                                                name\n                                                attributeOne\n                                                attributeTwo\n                                                franchise{\n                                                    __typename\n                                                    id\n                                                }\n                                            }\n                                          }\n                                        }\n                                      }`\n                    )\n                    setTimeout(() => {setLoading(false)}, 2000);\n                })\n                .catch(err => {\n                    console.log(err)\n                    setTimeout(() => {setLoading(false)}, 2000);\n                })\n        };\n\n        if (loading) return (\n            <div>\n                <SmallLoading animation={\"ld ld-bounce\"}/>\n            </div>\n        )\n        else {\n            return (\n                <div>\n                    <Button style={simButtonStyles} onClick={() => setLineups()} block>\n                        Set Opponent Staff\n                    </Button>\n                </div>\n            );\n        }\n    }\n)\n\nexport default SetStaffButton;","import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from 'mobx-react'\nimport {FranchiseTypeModelType, StoreContext} from \"../models\";\nimport {Row, Col} from 'antd';\nimport SignPlayersButton from \"./Molecules/SimulationButtons/SignPlayersButton\";\nimport SetLineupsButton from \"./Molecules/SimulationButtons/SetLineupsButton\";\nimport LeagueStatus from \"./Molecules/LeagueStatus\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport SetStaffButton from \"./Molecules/SimulationButtons/SetStaffButton\";\nimport MissingStaffError from \"./Atoms/MissingStaffError\";\nimport introJs from \"intro.js\";\n\nexport const OffSeason: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    const [franchise, setFranchise] = useState<any>(store.User ? store.User.franchise : null);\n\n    useEffect(() => {\n        if (store.User) {\n            setFranchise(store.User.franchise)\n        }\n        if (store.User.franchise.seasonSet.length === 1) {\n            introJs().start()\n        }\n    }, [store.User])\n\n\n\n    if (store.User?.league == null)\n        return <SmallLoading animation=\"ld ld-bounce\"/>\n    else {\n        return (\n            <div>\n                <Row>\n                    <Col span={7} offset={0}>\n                        <div data-intro=\"Click to simulate opponent staff signings\"\n                             data-step={4} className=\"card-demo\">\n                        <SetStaffButton/>\n                        </div>\n                    </Col>\n                    <Col span={7} offset={1}>\n                        <div>\n                            {(store.User?.league?.franchisesWithoutGm.length > 0 || store.User?.league?.franchisesWithoutCoach.length > 0) ?\n                                <MissingStaffError/>\n                                :\n                            <div data-intro=\"Click to simulate opponent player signings\"\n                             data-step={5} className=\"card-demo\">\n                                <SignPlayersButton/>\n                            </div>\n                            }\n                        </div>\n                    </Col>\n                    <Col span={7} offset={1}>\n                        {(store.User?.league?.franchisesWithoutGm.length > 0 || store.User?.league?.franchisesWithoutCoach.length > 0) ?\n                            <MissingStaffError/>\n                            :\n                            <div data-intro=\"Click to simulate opponent roster lineups\"\n                             data-step={6} className=\"card-demo\">\n                            <SetLineupsButton/>\n                            </div>\n                        }\n                    </Col>\n                </Row>\n                <div data-intro=\"This gives a status for each franchise. User edits can be made on the franchise page.\"\n                             data-step={7} className=\"card-demo\">\n                <LeagueStatus/>\n                </div>\n            </div>\n        );\n    }\n})\n\nexport default OffSeason;\n\n","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Table, Tag, Space} from 'antd';\nimport {PlayerTypeModelType, StoreContext} from \"../../../models\";\nimport {observer} from \"mobx-react\";\nimport {colour, suit_icon, insertArray, _to_fixed} from '../../Utils/tablefunctions'\nimport {IObservableArray, observable, toJS} from 'mobx';\nimport SigningModal from \"../../Molecules/Modals/SigningModal\";\nimport {tableStyles} from \"./TableStyles\";\n\nexport const FreeAgentTable: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [visible, setVisible] = useState<boolean>(false)\n        const [selectedPlayer, setSelectedPlayer] = useState<any>([]);\n\n        const non_scouter_columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n                key: 'age',\n                sorter: (a: any, b: any) => a.age - b.age,\n            },\n            {\n                title: 'EPV',\n                dataIndex: 'epv',\n                key: 'epv',\n                sorter: (a: any, b: any) => a.epv - b.epv,\n                render: (epv: number) => <span>{epv.toFixed(1)}</span>,\n            },\n            {\n                title: 'Suit',\n                dataIndex: 'suit',\n                key: 'suit',\n                render: (suit: string) => (\n                    <Tag icon={suit_icon(suit)} color={colour(suit)} key={suit}>\n                        {suit.toUpperCase()}\n                    </Tag>\n                ),\n                filters: [\n                    {\n                        text: 'Diamond',\n                        value: 'diamond',\n                    },\n                    {\n                        text: 'Spade',\n                        value: 'spade',\n                    },\n                    {\n                        text: 'Heart',\n                        value: 'heart',\n                    },\n                    {\n                        text: 'Club',\n                        value: 'club',\n                    },\n                ],\n                onFilter: (value: any, record: any) => record.suit.indexOf(value) === 0,\n            },\n            {\n                title: 'Grade',\n                dataIndex: 'grade',\n                key: 'grade',\n                sorter: (a: any, b: any) => a.grade - b.grade,\n                render: (grade: number) => <span>{_to_fixed(grade)}</span>,\n            },\n            {\n                title: 'Franchise',\n                dataIndex: [\"franchise\", \"franchise\"],\n                key: \"franchise\",\n            },\n        ];\n\n\n        let sEPV_column =\n            {\n                title: 'S EPV',\n                dataIndex: 'sEpv',\n                key: 'sEpv',\n                sorter: (a: any, b: any) => a.sEpv - b.sEpv,\n                render: (sEpv: number) => <span>{sEpv.toFixed(1)}</span>,\n            }\n\n        let actionColumn =\n                {\n                    title: 'Action',\n                    key: 'action',\n                    render: (record: PlayerTypeModelType) => (\n\n                        (record.contract) ? (\n                            <Space size=\"middle\">\n                                <Tag color={\"#89dc0d\"} style={{ color: \"#000000\", border: \"3px solid #89dc0d\"}}>\n                                    Signed\n                                </Tag>\n                            </Space>\n                        ) : (\n                            <Space size=\"middle\">\n                                <Tag icon={<span style={{marginRight: '3px'}} role=\"img\" aria-label=\"player\"> 📝 </span>}\n                                     color={\"#ffe479\"} style={{ color: \"#000000\", border: \"3px solid #ffe479\", cursor: \"pointer\"}}\n                                     onClick={() => {setSelectedPlayer(record); setVisible(true)}}>\n                                    Offer Contract\n                                </Tag>\n                            </Space>\n                        )\n                    ),\n                }\n\n\n        const columns = () => {\n            if (store.User.franchise.gm !== null)\n                if (store.User.franchise.league.freeAgentClassSigned.length > 0) {\n                    insertArray(non_scouter_columns, 6, actionColumn)\n                }\n\n                if (store.User.franchise.gm.trait === \"SCOUTER\") {\n                    let scouter_columns = non_scouter_columns\n                    insertArray(non_scouter_columns, 3, sEPV_column)\n                    return scouter_columns\n                } else {\n                    return non_scouter_columns\n                }\n            return non_scouter_columns\n        }\n\n        // need to make observable to update table (draftClass not being observed by ant d table)\n        let freeAgentClass: IObservableArray<PlayerTypeModelType> = observable(store.User.franchise.league.freeAgentClass)\n\n        if (store.User === undefined || store.User.franchise === undefined) return <div> loading</div>;\n        else {\n            return (\n                <div>\n                <SigningModal visible={visible} setVisible={setVisible} selectedplayer={selectedPlayer}/>\n                <Table\n                    rowKey=\"id\"\n                    columns={columns()}\n                    dataSource={toJS(freeAgentClass)}\n                    pagination={false}\n                    bordered\n                    style={tableStyles}\n                />\n                </div>\n            );\n        }\n    }\n)\n\nexport default FreeAgentTable;\n","import React, {useContext, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Button} from 'antd';\nimport {observer} from \"mobx-react\";\nimport axios from \"axios\";\nimport {StoreContext} from \"../../../models\";\nimport SmallLoading from \"../../Atoms/Loading/SmallLoading\";\nimport {simButtonStyles} from \"./SimButtonStyles\";\n\nexport const FreeAgencyButton: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const [loading, setLoading] = useState<boolean>(false)\n        const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n\n        const signFreeAgents = () => {\n            let link;\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            const data = new FormData();\n            data.append(\"franchise_id\", store.User.franchise.id)\n            data.append(\"season\", store.User.franchise.seasonSet.length)\n            setLoading(true)\n            axios.post(window.location.protocol + \"//\" + link + '/free_agency', data)\n                .then(res => {\n                    console.log(res.data)\n                    store.queryUser(\n                    {email: email},\n                    `        \n                    __typename\n                    id\n                    franchise{\n                        __typename\n                        id\n                        stadium{\n                          __typename\n                          id\n                          grade\n                          maxGrade\n                        }\n                      league{\n                        __typename\n                        id\n                        playerSet{\n                          __typename\n                            id\n                            name\n                            suit\n                            age\n                            pv\n                            epv\n                            sEpv\n                            contract\n                            tOption\n                            pOption\n                            renew\n                            salary\n                            grade\n                            trainer\n                            year\n                            franchise{\n                                __typename\n                                id\n                                franchise\n                            }\n                        }\n                        franchiseSet{\n                          __typename\n                          id\n                          playerSet{\n                            __typename\n                            id\n                            name\n                            suit\n                            age\n                            pv\n                            epv\n                            sEpv\n                            contract\n                            tOption\n                            pOption\n                            renew\n                            salary\n                            grade\n                            trainer\n                            year\n                            franchise {\n                                __typename\n                                id\n                                franchise\n                            }\n                          }\n                        }\n                      }\n                    }`,\n                    {}\n                    )\n                    setTimeout(() => {setLoading(false)}, 2000);\n                })\n                .catch(err => {\n                    console.log(err)\n                    setTimeout(() => {setLoading(false)}, 2000);\n                })\n        };\n\n\n        if (loading) return (\n            <div>\n                <SmallLoading animation=\"ld ld-bounce\"/>\n            </div>\n        )\n        else {\n            return (\n                <div>\n                    {(store.User.league.freeAgentClassSigned.length > 0) ?\n                        null :\n                    <Button style={simButtonStyles} onClick={() => signFreeAgents()} block>\n                        Sim Free Agents\n                    </Button>\n                    }\n                </div>\n            );\n        }\n    }\n)\n\nexport default FreeAgencyButton;\n","import React, {useContext, useEffect} from 'react';\nimport {observer} from 'mobx-react'\nimport {StoreContext} from \"../models\";\nimport FreeAgentTable from \"./Organisms/Tables/FreeAgentTable\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport MissingStaffError from \"./Atoms/MissingStaffError\";\nimport FreeAgencyButton from \"./Molecules/SimulationButtons/FreeAgentButton\";\nimport introJs from \"intro.js\";\n\n\nexport const FreeAgency: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n        useEffect(() => {\n        if (store.User.franchise.seasonSet.length === 2) {\n            introJs().start()\n        }\n    }, [store.User.franchise])\n\n    if (store.User?.league == null)\n        return <SmallLoading animation=\"ld ld-bounce\"/>\n    else if (store.User?.league?.franchisesWithoutGm.length > 0 || store.User?.league?.franchisesWithoutCoach.length > 0)\n        return (\n            <MissingStaffError/>\n        )\n    else {\n        return (\n            <div>\n            <div data-intro=\"Click here to simulate free agency.\" data-step={1} className=\"card-demo\">\n            <FreeAgencyButton/>\n            </div>\n            <div data-intro=\"After you have simulated free agency outbid other franchises to sign players.\" data-step={2} className=\"card-demo\">\n            <FreeAgentTable/>\n            </div>\n            </div>\n        );\n    }\n})\n\nexport default FreeAgency;\n\n","import React from 'react';\nimport {observer} from 'mobx-react'\nimport {Typography, Divider, Card} from 'antd';\nimport {cardStyles} from \"./Create/CreateStyles\";\n\nconst {Title, Paragraph, Text} = Typography;\n\nexport const StaffInfo: React.FunctionComponent = observer(() => {\n\n    return (\n        <div>\n            <Card style={{...{cardStyles}, ...{width: '100%'}}}>\n            <Typography>\n                <Title level={2}>GMs</Title>\n                <Paragraph>\n                    GMs play a similar role for a Big League franchise as they do in other professional sports, they set the\n                    tone and mission of the franchise. Unlike other hires, owners do not need to worry about the market\n                    for GMs. Instead, at the start of each season, owners simply choose which GM trait they are setting\n                    for their franchise. Those traits are as follows:\n                </Paragraph>\n                <Paragraph>\n                    <ul>\n                        <li>\n                            <Text><Text strong>Facilitator:</Text> Gives the team two additional actions for the season</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Promoter: </Text> Unlocks all the Promotions actions</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Recruiter:</Text> Provides a +2 bonus to all player contracts</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Scouter:</Text> Unlocks S EPV (a reduced EPV error by 50%)</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Suitor:</Text> Disables all suit effects on players</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Trainer:</Text> Unlocks Personal Trainers actions and can train one\n                                player per action</Text>\n                        </li>\n                    </ul>\n                </Paragraph>\n                <Title level={2}>Coaches</Title>\n                <Paragraph>\n                    Each team is required to hire a coach from the pool of available coaches. Each coach is different,\n                    and has two of eight possible attributes which modify your team’s performance. Those attributes are\n                    as follows:\n                </Paragraph>\n                <ul>\n                        <li>\n                            <Text><Text strong>Clutch: </Text> Adds +6 to the score in all losing games</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Fame: </Text> Adds a +5 bonus to your fan index</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Focus:</Text> Reduces the S.D. for each player to 2</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Guts:</Text> Increases the S.D. for each player by 5</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Road:</Text> Negates the opponents home-field advantage</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Substitution:</Text> Calls in a rotation player at 1 S.D. below expected\n                                value</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Teamwork:</Text> Adds +3 to sum of player values for all games</Text>\n                        </li>\n                        <li>\n                            <Text><Text strong>Underdog:</Text> Adds 40% of difference in starter PVs when an\n                                underdog</Text>\n                        </li>\n                    </ul>\n                <Divider/>\n            </Typography>\n            </Card>\n        </div>\n    );\n})\n\nexport default StaffInfo;","import React, {useContext, useState} from 'react';\nimport {observer} from 'mobx-react'\nimport {CoachTypeModelType, StoreContext} from \"../../models\";\nimport {Select, Button, Card, Space} from 'antd';\nimport {buttonStyles} from \"./Create/CreateStyles\";\nimport {cardStyles} from \"../Organisms/Cards/CardStyles\";\n\n\nexport const StaffSelect: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    const [franchise, setFranchise] = useState<any>(store.User ? store.User.franchise : null);\n    const [gmId, setGmId] = useState<string>(store.User.franchise.gm ? store.User.franchise.gm.id : '');\n    const [coachId, setCoachId] = useState<string>(store.User.franchise.coach ? store.User.franchise.coach.id : '');\n\n    const coachLabel = (coach: CoachTypeModelType) => {\n        if (coach.franchise)\n            return {\n                value: coach.id,\n                label: [coach.name + \" \" + coach.attributeOne + \" \" + coach.attributeTwo + \" ——— \" + coach.franchise?.franchise]\n            }\n        else\n            return {value: coach.id, label: [coach.name + \" \" + coach.attributeOne + \" \" + coach.attributeTwo]}\n    }\n\n    const onSubmit = (franchise: any, gmId: string, coachId: string) => {\n        store.mutateUpdateFranchise({\n                \"franchiseInput\": {\n                    \"franchise\": franchise.id,\n                    \"gmId\": gmId,\n                    \"coachId\": coachId,\n                },\n            },\n            `\n                franchise{\n                    __typename\n                  id\n                  franchise\n                  gm{\n                    __typename\n                    id\n                    trait\n                  }\n                  coach{\n                    __typename\n                    id\n                    name\n                  }\n                }\n                `,\n            undefined\n        )\n    };\n\n    return (\n        <div>\n            <Card style={cardStyles}\n                  title=\"Select Staff\">\n                <Space direction=\"vertical\">\n                    <label>GMs </label>\n                    <Select style={{minWidth: '500px'}} options={store.User.league.gmSet.map((gm: any) => {\n                        return {value: gm.id, label: gm.trait}\n                    })}\n                            value={gmId} onChange={(gm: any) => setGmId(gm)}/>\n                    <label>Coaches </label>\n                    <Select style={{minWidth: '500px'}} options={store.User.league.coachSet.map((coach: any) => {\n                        return coachLabel(coach)\n                    })}\n                            value={coachId} onChange={(coach: any) => setCoachId(coach)}/>\n                    {store.User.franchise.gm && store.User.franchise.coach ? null :\n                        <Button style={{...buttonStyles, ...{width: '25%'}}}\n                                onClick={() => onSubmit(franchise, gmId, coachId)}>Sign</Button>}\n                </Space>\n            </Card>\n        </div>\n    );\n})\n\nexport default StaffSelect;\n\n","import React, {useContext, useEffect} from 'react';\nimport {observer} from 'mobx-react'\nimport {StoreContext} from \"../models\";\nimport StaffInfo from \"./Molecules/StaffInfo\";\nimport StaffSelect from \"./Molecules/StaffSelect\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport {Col, Row} from \"antd\";\nimport SetStaffButton from \"./Molecules/SimulationButtons/SetStaffButton\";\nimport introJs from \"intro.js\";\n\nexport const Staff: React.FunctionComponent = observer(() => {\n\n    const store = useContext(StoreContext)\n\n    useEffect(() => {\n        if (store.User.franchise.seasonSet.length === 1) {\n            introJs().start()\n        }\n    }, [])\n\n    if (store.User.franchise == null)\n        return <SmallLoading animation=\"ld ld-bounce\"/>\n    else {\n        return (\n            <div>\n                <Row gutter={[0,24]}>\n                    <Col span={24}>\n                        <div data-intro=\"Each season you will sign a General Manager and Coach to help your team.\n                        They have unique traits and attributes.\"\n                             data-step={1} className=\"card-demo\">\n                        <StaffInfo/>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        <div data-intro=\"Click here to simulate opponent staff signings.\" data-step={2} className=\"card-demo\">\n                        <SetStaffButton/>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        <div data-intro=\"Please sign your staff. Then go to draft!\" data-step={3} className=\"card-demo\">\n                        <StaffSelect/>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n})\n\nexport default Staff;\n\n","import React, {useReducer, useContext} from 'react';\nimport {Alert, Button, Card, Input, Space} from 'antd';\nimport {useNavigate} from 'react-router-dom';\nimport {StoreContext} from \"../models\";\nimport {observer} from \"mobx-react\";\nimport {buttonStyles} from \"./Molecules/Create/CreateStyles\";\n\n\n//state type (using redux for practice)\ntype State = {\n    email: string\n    password: string\n    isError: boolean\n};\n\nconst initialState: State = {\n    email: '',\n    password: '',\n    isError: false\n};\n\ntype Action =\n    | { type: 'setEmail', payload: string }\n    | { type: 'setPassword', payload: string }\n    | { type: 'setIsError', payload: boolean };\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'setEmail':\n            return {\n                ...state,\n                email: action.payload\n            };\n        case 'setPassword':\n            return {\n                ...state,\n                password: action.payload\n            };\n        case 'setIsError':\n            return {\n                ...state,\n                isError: action.payload\n            };\n    }\n}\n\nconst LoginForm: React.FunctionComponent = observer(() => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const navigate = useNavigate();\n\n    const store = useContext(StoreContext)\n    const handleLogin = (e: any, data: any) => {\n        // this is for switching local between react and backend static local (3000 vs. 8000)\n        let link = '';\n        if (window.location.port === '3000') {\n            link = window.location.hostname + ':8000'\n        } else {\n            link = window.location.host\n        }\n        e.preventDefault();\n        fetch(window.location.protocol + \"//\" + link + '/token-auth/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(res)\n            })\n            .then(json => {\n                console.log(json)\n                localStorage.setItem('token', json.access);\n                localStorage.setItem('refresh', json.refresh);\n                localStorage.setItem('email', data.email);\n                store.setUser(data.email).then(() => console.log(\"SET USER\"));\n                store.setIsLoggedIn(true)\n                navigate('/Home');\n            })\n            .catch((response) => {\n                console.log(response.status, response.statusText);\n                dispatch({type: 'setIsError', payload: true})\n            });\n    };\n\n    const handleEmailChange: React.ChangeEventHandler<HTMLInputElement> =\n        (event) => {\n            dispatch({\n                type: 'setEmail',\n                payload: event.target.value\n            });\n        };\n\n    const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> =\n        (event) => {\n            dispatch({\n                type: 'setPassword',\n                payload: event.target.value\n            });\n        }\n    return (\n        <form style={{textAlign: 'center', marginTop: '20px'}} noValidate autoComplete=\"off\">\n            <Card style={{display: 'inline-block', width: '30%'}} title=\"Login\">\n                <Space direction=\"vertical\">\n                    <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        onChange={handleEmailChange}\n                    />\n                    <Input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={handlePasswordChange}\n                    />\n                    <Button\n                        size=\"large\"\n                        color=\"primary\"\n                        // @ts-ignore\n                        style={buttonStyles}\n                        onClick={(e) => handleLogin(e, state)}>\n                        Login\n                    </Button>\n                    {state.isError ?\n                        <Alert\n                            message=\"Login Failed\"\n                            description=\"\"\n                            type=\"error\"\n                            showIcon\n                            closable\n                            onClose={() => {\n                                dispatch({\n                                    type: 'setIsError',\n                                    payload: false\n                                })\n                            }}\n                        /> : null}\n                </Space>\n            </Card>\n        </form>\n    );\n})\n\nexport default LoginForm;\n","import React, {useReducer, useEffect, useContext} from 'react';\nimport {Alert, Button, Card, Input, Space} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {buttonStyles} from \"./Molecules/Create/CreateStyles\";\nimport {useNavigate} from \"react-router\";\nimport {StoreContext} from \"../models\";\n\n//state type (using redux for practice)\ntype State = {\n    username: string\n    email: string\n    password: string\n    isButtonDisabled: boolean\n    isError: boolean\n    isSuccess: boolean\n};\n\nconst initialState: State = {\n    username: '',\n    email: '',\n    password: '',\n    isButtonDisabled: true,\n    isError: false,\n    isSuccess: false,\n};\n\ntype Action = { type: 'setUsername', payload: string }\n    | { type: 'setEmail', payload: string }\n    | { type: 'setPassword', payload: string }\n    | { type: 'setIsButtonDisabled', payload: boolean }\n    | { type: 'setIsError', payload: boolean }\n    | { type: 'setIsSuccess', payload: boolean};\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'setUsername':\n            return {\n                ...state,\n                username: action.payload\n            };\n        case 'setEmail':\n            return {\n                ...state,\n                email: action.payload\n            };\n        case 'setPassword':\n            return {\n                ...state,\n                password: action.payload\n            };\n        case 'setIsButtonDisabled':\n            return {\n                ...state,\n                isButtonDisabled: action.payload\n            };\n        case 'setIsError':\n            return {\n                ...state,\n                isError: action.payload\n            };\n        case 'setIsSuccess':\n            return {\n                ...state,\n                isSuccess: action.payload\n            };\n    }\n}\n\nconst SignupForm: React.FunctionComponent = observer(() => {\n        const [state, dispatch] = useReducer(reducer, initialState);\n        const navigate = useNavigate();\n\n        const store = useContext(StoreContext)\n\n        useEffect(() => {\n            if (state.username.trim() && state.password.trim()) {\n                dispatch({\n                    type: 'setIsButtonDisabled',\n                    payload: false\n                });\n            } else {\n                dispatch({\n                    type: 'setIsButtonDisabled',\n                    payload: true\n                });\n            }\n        }, [state.username, state.password]);\n\n        const handleSignup = (e: any, data: any) => {\n            const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            if (re.test(state.email) && state.username.length < 30 && state.password) {\n                // this is for switching local between react and backend static local (3000 vs. 8000)\n                let link = '';\n                if (window.location.port === '3000') {\n                    link = window.location.hostname + ':8000'\n                } else {\n                    link = window.location.host\n                }\n                e.preventDefault();\n                fetch(window.location.protocol + \"//\" + link + '/users/', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                })\n                    .then(res => {\n                        if (res.ok) {\n                            return res.json();\n                        }\n                        return Promise.reject(res)\n                    })\n                    .then(json => {\n                        localStorage.setItem('token', json.token);\n                        localStorage.setItem('email', state.email);\n                        store.setUser(state.email).then(r => console.log(\"SET USER\"));\n                        store.setIsLoggedIn(true)\n                        navigate('/Home');\n                        dispatch({type: 'setIsSuccess', payload: true})\n                    })\n                    .catch((response) => {\n                        console.log(response.status, response.statusText);\n                        dispatch({type: 'setIsError', payload: true})\n                    });\n            } else {\n                dispatch({type: 'setIsError', payload: true})\n            }\n        };\n\n\n        const handleEmailChange: React.ChangeEventHandler<HTMLInputElement> =\n            (event) => {\n                dispatch({\n                    type: 'setEmail',\n                    payload: event.target.value\n                });\n            };\n\n        const handleUsernameChange: React.ChangeEventHandler<HTMLInputElement> =\n            (event) => {\n                dispatch({\n                    type: 'setUsername',\n                    payload: event.target.value\n                });\n            };\n\n        const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> =\n            (event) => {\n                dispatch({\n                    type: 'setPassword',\n                    payload: event.target.value\n                });\n            }\n\n        return (\n            <form style={{textAlign: 'center', marginTop: '20px'}} noValidate autoComplete=\"off\">\n                <Card style={{display: 'inline-block', width: '30%'}} title=\"Register\">\n                    <Space direction=\"vertical\">\n                        <Input\n                            id=\"email\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            onChange={handleEmailChange}\n                        />\n                        <Input\n                            id=\"username\"\n                            type=\"username\"\n                            placeholder=\"Username\"\n                            onChange={handleUsernameChange}\n                        />\n                        <Input\n                            id=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            onChange={handlePasswordChange}\n                        />\n                        <Button\n                            size=\"large\"\n                            color=\"primary\"\n                            style={buttonStyles}\n                            onClick={(e) => handleSignup(e, state)}\n                            disabled={state.isButtonDisabled}>\n                            Sign Up\n                        </Button>\n                        {state.isSuccess ?\n                            <Alert\n                                message=\"Sign Up Successful\"\n                                description=\"\"\n                                type=\"success\"\n                                showIcon\n                                closable\n                                onClose={() => {\n                                    dispatch({\n                                        type: 'setIsSuccess',\n                                        payload: false\n                                    })\n                                }}\n                            /> : null}\n                        {state.isError ?\n                            <Alert\n                                message=\"Sign Up Failed\"\n                                description=\"\"\n                                type=\"error\"\n                                showIcon\n                                closable\n                                onClose={() => {\n                                    dispatch({\n                                        type: 'setIsError',\n                                        payload: false\n                                    })\n                                }}\n                            /> : null}\n                    </Space>\n                </Card>\n            </form>\n        );\n    }\n)\n\nexport default SignupForm;","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {Space, Table, Tag} from 'antd';\nimport {observer} from \"mobx-react\";\nimport {IObservableArray, observable, toJS} from 'mobx';\nimport {StoreContext, FranchiseTypeModelType, PlayerTypeModelType} from \"../../../models\";\nimport {tableStyles} from \"./TableStyles\";\n\n\nexport const LeaderboardTable: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        const columns = [\n            {\n                title: 'Franchise',\n                dataIndex: ['franchise'],\n                key: 'franchise',\n            },\n            {\n                title: 'Profit (m)',\n                dataIndex: 'profit',\n                key: 'profit',\n                sorter: (a: any, b: any) => a.profit - b.profit,\n                defaultSortOrder: 'descend',\n                render: (profit: number) => <span>{(profit / 1000000)?.toFixed(0)}</span>,\n            },\n        ];\n\n        // need to map to array —– can't use toJS(franchiseSet) as that doesn't carry mob x \"getter\" which has profit\n        let data: IObservableArray<FranchiseTypeModelType> =  observable(store.User.league.franchiseSet.map((franchise: FranchiseTypeModelType) => franchise))\n\n        return (\n            <div>\n                <Table\n                    rowKey=\"id\"\n                    // @ts-ignore (need this to add defaultSorter for Wins)\n                    columns={columns}\n                    dataSource={data}\n                    pagination={false}\n                    bordered\n                    style={tableStyles}\n                />\n            </div>\n        );\n    }\n)\n\nexport default LeaderboardTable;","import React, {useContext} from 'react';\nimport 'antd/dist/antd.css';\nimport {StoreContext} from \"../models\";\nimport {observer} from \"mobx-react\";\nimport SmallLoading from \"./Atoms/Loading/SmallLoading\";\nimport LeaderboardTable from \"./Organisms/Tables/LeaderboardTable\";\n\n\nexport const Leaderboard: React.FunctionComponent = observer(() => {\n\n        const store = useContext(StoreContext)\n\n        if (store.User?.franchise == null)\n            return <SmallLoading animation=\"ld ld-bounce\"/>\n        else\n            return (\n            <div>\n                <LeaderboardTable/>\n            </div>\n        );\n    }\n)\n\nexport default Leaderboard;","import React, {useEffect, useState} from \"react\";\nimport './index.css';\nimport {BrowserRouter as Router, Routes, Route, Link} from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport {Layout, Menu} from 'antd';\nimport './App.css'\nimport {useQuery} from \"./models\";\nimport {observer} from \"mobx-react\";\nimport Franchise from \"./Pages/Franchise\";\nimport Draft from \"./Pages/Draft\";\nimport PlayerHistory from \"./Pages/PlayerHistory\";\nimport Season from \"./Pages/Season\";\nimport Home from \"./Pages/Home\";\nimport OffSeason from \"./Pages/OffSeason\";\nimport {userQuery} from \"./Pages/Utils/queries\";\nimport FreeAgency from \"./Pages/FreeAgency\";\nimport Staff from \"./Pages/Staff\";\nimport LoginForm from \"./Pages/LoginForm\";\nimport SignupForm from \"./Pages/SignupForm\";\nimport SmallLoading from \"./Pages/Atoms/Loading/SmallLoading\";\nimport Leaderboard from \"./Pages/Leaderboard\";\n\n\nconst {Header, Content, Footer} = Layout;\n\nconst App: React.FunctionComponent = observer(() => {\n\n    // need local isLoggedIn used as store. IsLoggedIn may not be available on refresh\n    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(localStorage.getItem('token') ? true : false)\n    const email: any = localStorage.getItem('email') ? localStorage.getItem('email') : '';\n    const [year, setYear] = useState<number>( new Date().getFullYear() );\n\n    const deleteToken = () => {\n        localStorage.removeItem(\"email\")\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"refresh\")\n    }\n\n    const {store, error, loading, data} = useQuery((store) =>\n        store.queryUser(\n            {email: email},\n            userQuery,\n            {fetchPolicy: 'cache-first'}\n        )\n    )\n\n    const getCurrentUser = () => {\n        if (isLoggedIn) {\n            let link = '';\n            if (window.location.port === '3000') {\n                link = window.location.hostname + ':8000'\n            } else {\n                link = window.location.host\n            }\n            fetch(window.location.protocol + \"//\" + link + '/current_user/', {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`\n                }\n            })\n                .then(res => {\n                    if (res.ok) {\n                        return res.json();\n                    }\n                    return Promise.reject(res)\n                })\n                .then(json => {\n                    console.log(json)\n                    localStorage.setItem('email', json.email);\n                    store.setIsLoggedIn(true)\n                    setIsLoggedIn(true)\n                    store.setUser(json.email);\n                })\n                .catch((response) => {\n                    console.log(\"failed to get current user\", response.status, response.statusText);\n                    store.setIsLoggedIn(false)\n                    setIsLoggedIn(false)\n                    deleteToken()\n                })\n        }\n    }\n\n\n    const handleRefresh = () => {\n        // this is for switching local between react and backend static local (3000 vs. 8000)\n        let link: string;\n        if (window.location.port === '3000') {\n            link = window.location.hostname + ':8000'\n        } else {\n            link = window.location.host\n        }\n        fetch(window.location.protocol + \"//\" + link + '/token-auth/refresh', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\"refresh\": localStorage.getItem(\"refresh\")})\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                }\n                return Promise.reject(res)\n            })\n            .then(json => {\n                console.log(json)\n                localStorage.setItem('token', json.access);\n                localStorage.setItem('refresh', json.refresh);\n                getCurrentUser()\n            })\n            .catch((response) => {\n                console.log(\"failed to refresh token\", response.status, response.statusText);\n                store.setIsLoggedIn(false)\n                setIsLoggedIn(false)\n                deleteToken()\n            });\n    };\n    useEffect(() => {\n       handleRefresh()\n    }, [store.isLoggedIn, email]);\n\n\n    if (!store.isLoggedIn && !isLoggedIn) {\n        return <div>\n                        <Layout className='layout'>\n                            <Router>\n                                <Header style={{backgroundColor: '#12263A'}}>\n                                    <Menu theme=\"dark\" mode=\"horizontal\" style={{backgroundColor: 'inherit', color: '#12263A'}}>\n                                        <Menu.Item key=\"13\" style={{float: 'right'}}>Register<a href=\"/Register\"/></Menu.Item>\n                                        {store.isLoggedIn ? (\n                                                <Menu.Item key=\"14\" style={{float: 'right'}} onClick={() => {\n                                                    deleteToken()\n                                                }}>Logout\n                                                    <a href=\"/Login\"/></Menu.Item>)\n                                            :\n                                            (<Menu.Item key=\"15\" style={{float: 'right'}}>Login<a href=\"/Login\"/></Menu.Item>)\n                                        }\n                                    </Menu>\n                                </Header>\n                                <Content style={{margin: '0px'}}>\n                                    <div className=\"site-layout-content\">\n                                        <Routes>\n                                            <Route path='/Register' element={<SignupForm/>}/>\n                                            <Route path='/Login' element={<LoginForm/>}/>\n                                            <Route path='/*' element={<LoginForm/>}/>\n                                        </Routes>\n                                    </div>\n                                </Content>\n                                <Footer style={{textAlign: 'center'}}>© {year} The Big League </Footer>\n                            </Router>\n                        </Layout>\n            </div>;\n    }\n    else if (loading || store.User === undefined) return <div><SmallLoading animation=\"ld ld-bounce\"/></div>;\n    else if (!store.User?.league || !store.User?.franchise || store.User?.franchise.seasonSet.length === 0) {\n        return (\n            <div>\n                <Layout className='layout'>\n                    <Router>\n                        <Header style={{backgroundColor: '#12263A'}}>\n                            <Menu theme=\"dark\" mode=\"horizontal\" style={{backgroundColor: 'inherit', color: '#12263A'}}>\n                                <Menu.Item key=\"1\"><Link to=\"/Home\">Home</Link></Menu.Item>\n                                <Menu.Item key=\"2\"><Link to=\"/Franchise\">Franchise</Link></Menu.Item>\n                                <Menu.Item key=\"10\" style={{float: 'right'}}>Register<a href=\"/Register\"/></Menu.Item>\n                                {store.isLoggedIn ? (\n                                        <Menu.Item key=\"11\" style={{float: 'right'}} onClick={() => {\n                                            deleteToken()\n                                        }}>Logout\n                                            <a href=\"/Login\"/></Menu.Item>)\n                                    :\n                                    (<Menu.Item key=\"12\" style={{float: 'right'}}>Login<a href=\"/Login\"/></Menu.Item>)\n                                }\n                            </Menu>\n                        </Header>\n                        <Content style={{margin: '0px'}}>\n                            <div className=\"site-layout-content\">\n                                <Routes>\n                                    <Route  path='/Home' element={<Home/>}/>\n                                    <Route  path='/Franchise' element={<Franchise/>}/>w\n                                    <Route  path='/Login' element={<LoginForm/>}/>\n                                    <Route  path='/Register' element={<SignupForm/>}/>\n                                </Routes>\n                            </div>\n                        </Content>\n\n                        <Footer style={{textAlign: 'center'}}>© {year} The Big League </Footer>\n                    </Router>\n                </Layout>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <Layout className='layout'>\n                    <Router>\n                        <Header style={{backgroundColor: '#12263A'}}>\n                            <Menu theme=\"dark\" mode=\"horizontal\" style={{backgroundColor: 'inherit', color: '#12263A'}}>\n                                <Menu.Item key=\"1\"><Link to=\"/Home\">Home</Link></Menu.Item>\n                                <Menu.Item key=\"2\"><Link to=\"/Franchise\">Franchise</Link></Menu.Item>\n                                <Menu.Item key=\"3\"><Link to=\"/Staff\">Staff</Link></Menu.Item>\n                                <Menu.Item key=\"4\"><Link to=\"/OffSeason\">OffSeason</Link></Menu.Item>\n                                <Menu.Item key=\"5\"><Link to=\"/Draft\">Draft</Link></Menu.Item>\n                                <Menu.Item key=\"6\"><Link to=\"/FreeAgency\">Free Agency</Link></Menu.Item>\n                                <Menu.Item key=\"7\"><Link to=\"/PlayerHistory\">Player History</Link></Menu.Item>\n                                <Menu.Item key=\"8\"><Link to=\"/Season\">Season</Link></Menu.Item>\n                                <Menu.Item key=\"9\"><Link to=\"/Leaderboard\">Leaderboard</Link></Menu.Item>\n                                <Menu.Item key=\"10\" style={{float: 'right'}}>Register<a href=\"/Register\"/></Menu.Item>\n                                {store.isLoggedIn ? (\n                                        <Menu.Item key=\"11\" style={{float: 'right'}} onClick={() => {\n                                            deleteToken()\n                                        }}>Logout\n                                            <a href=\"/Login\"/></Menu.Item>)\n                                    :\n                                    (<Menu.Item key=\"12\" style={{float: 'right'}}>Login<a href=\"/Login\"/></Menu.Item>)\n                                }\n                            </Menu>\n                        </Header>\n                        <Content style={{margin: '0px'}}>\n                            <div className=\"site-layout-content\">\n                                <Routes>\n                                    <Route path='/Home' element={<Home/>}/>\n                                    <Route path='/Franchise' element={<Franchise/>}/>w\n                                    <Route path='/Staff' element={<Staff/>}/>\n                                    <Route path='/OffSeason' element={<OffSeason/>}/>\n                                    <Route path='/Draft' element={<Draft/>}/>\n                                    <Route path='/FreeAgency' element={<FreeAgency/>}/>\n                                    <Route path='/PlayerHistory' element={<PlayerHistory/>}/>\n                                    <Route path='/Season' element={<Season/>}/>\n                                    <Route path='/Leaderboard' element={<Leaderboard/>}/>\n                                    <Route path='/Login' element={<LoginForm/>}/>\n                                    <Route path='/Register' element={<SignupForm/>}/>\n                                </Routes>\n                            </div>\n                        </Content>\n\n                        <Footer style={{textAlign: 'center'}}>© {year} The Big League </Footer>\n                    </Router>\n                </Layout>\n            </div>\n        )\n    }\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createHttpClient } from 'mst-gql'\nimport { RootStore } from './models'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { StoreContext } from './models'\n// import {getToken} from \"./components/Forms/token\";\n\n\nconst rootStore = RootStore.create(undefined, {\n  gqlHttpClient: createHttpClient(window.location.protocol + \"//\" + window.location.host + '/graphql/')})\n\nconst render = () => {\n  ReactDOM.render(\n    <StoreContext.Provider value={rootStore}>\n        <App />\n    </StoreContext.Provider>,\n    document.getElementById('root'),\n  )\n}\n\nwindow.store = rootStore\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// Render once\nrender();\n\ndeclare global {\n    interface Window {\n        store: any;\n        getSnapshot: any;\n        token: any;\n        data: any\n        toJS: any\n    }\n}\n\n// window.getSnapshot = getSnapshot;\n// window.token = getToken()"],"sourceRoot":""}