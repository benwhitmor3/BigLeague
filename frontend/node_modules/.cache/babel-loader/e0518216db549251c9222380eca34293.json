{"ast":null,"code":"var _jsxFileName = \"/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nexport function TicTacToe() {\n  function Square({\n    value,\n    onClick\n  }) {\n    return React.createElement(\"button\", {\n      className: \"square\",\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, value);\n  }\n\n  function Restart({\n    onClick\n  }) {\n    return React.createElement(\"button\", {\n      className: \"restart\",\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Play again\");\n  }\n\n  function Game() {\n    render();\n    {\n      const [squares, setSquares] = useState(Array(9).fill(null));\n      const [isXNext, setIsXNext] = useState(true);\n      const nextSymbol = isXNext ? \"A\" : \"B\";\n      const winner = calculateWinner(squares);\n\n      function getStatus() {\n        if (winner) {\n          return \"Winner: \" + winner;\n        } else if (isBoardFull(squares)) {\n          return \"Draw!\";\n        } else {\n          return \"Next player: \" + nextSymbol;\n        }\n      }\n\n      function renderSquare(i) {\n        return React.createElement(Square, {\n          value: squares[i],\n          onClick: () => {\n            if (squares[i] != null || winner != null) {\n              return;\n            }\n\n            const nextSquares = squares.slice();\n            nextSquares[i] = nextSymbol;\n            setSquares(nextSquares);\n            setIsXNext(!isXNext); // toggle turns\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });\n      }\n\n      function renderRestartButton() {\n        return React.createElement(Restart, {\n          onClick: () => {\n            setSquares(Array(9).fill(null));\n            setIsXNext(true);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, renderSquare(0), renderSquare(1), renderSquare(2)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, renderSquare(3), renderSquare(4), renderSquare(5)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, renderSquare(6), renderSquare(7), renderSquare(8))), React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, getStatus()), React.createElement(\"div\", {\n        className: \"restart-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, renderRestartButton())));\n    }\n  } // ReactDOM.render(<Game/>, document.getElementById(\"root\"));\n\n\n  function calculateWinner(squares) {\n    const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  function isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}","map":{"version":3,"sources":["/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js"],"names":["React","useState","ReactDOM","TicTacToe","Square","value","onClick","Restart","Game","render","squares","setSquares","Array","fill","isXNext","setIsXNext","nextSymbol","winner","calculateWinner","getStatus","isBoardFull","renderSquare","i","nextSquares","slice","renderRestartButton","possibleLines","length","a","b","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nexport function TicTacToe() {\n\n  function Square({value, onClick}) {\n\n    return (\n        <button className=\"square\" onClick={onClick}>\n          {value}\n        </button>\n    );\n  }\n\n  function Restart({onClick}) {\n\n    return (\n        <button className=\"restart\" onClick={onClick}>\n          Play again\n        </button>\n    );\n  }\n\n  function Game() {\n      render()\n      {\n          const [squares, setSquares] = useState(Array(9).fill(null));\n          const [isXNext, setIsXNext] = useState(true);\n          const nextSymbol = isXNext ? \"A\" : \"B\";\n          const winner = calculateWinner(squares);\n\n          function getStatus() {\n              if (winner) {\n                  return \"Winner: \" + winner;\n              } else if (isBoardFull(squares)) {\n                  return \"Draw!\";\n              } else {\n                  return \"Next player: \" + nextSymbol;\n              }\n          }\n\n          function renderSquare(i) {\n              return (\n                  <Square\n                      value={squares[i]}\n                      onClick={() => {\n                          if (squares[i] != null || winner != null) {\n                              return;\n                          }\n                          const nextSquares = squares.slice();\n                          nextSquares[i] = nextSymbol;\n                          setSquares(nextSquares);\n\n                          setIsXNext(!isXNext); // toggle turns\n                      }}\n                  />\n              );\n          }\n\n          function renderRestartButton() {\n              return (\n                  <Restart\n                      onClick={() => {\n                          setSquares(Array(9).fill(null));\n                          setIsXNext(true);\n                      }}\n                  />\n              );\n          }\n\n          return (\n              <div className=\"container\">\n                  <div className=\"game\">\n                      <div className=\"game-board\">\n                          <div className=\"board-row\">\n                              {renderSquare(0)}\n                              {renderSquare(1)}\n                              {renderSquare(2)}\n                          </div>\n                          <div className=\"board-row\">\n                              {renderSquare(3)}\n                              {renderSquare(4)}\n                              {renderSquare(5)}\n                          </div>\n                          <div className=\"board-row\">\n                              {renderSquare(6)}\n                              {renderSquare(7)}\n                              {renderSquare(8)}\n                          </div>\n                      </div>\n                      <div className=\"game-info\">{getStatus()}</div>\n                      <div className=\"restart-button\">{renderRestartButton()}</div>\n                  </div>\n              </div>\n          );\n      }\n  }\n\n  // ReactDOM.render(<Game/>, document.getElementById(\"root\"));\n\n\n  function calculateWinner(squares) {\n    const possibleLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    // go over all possibly winning lines and check if they consist of only X's/only O's\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}