{"ast":null,"code":"var _jsxFileName = \"/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nexport function TicTacToe() {\n  function Square({\n    value,\n    onClick\n  }) {\n    return React.createElement(\"button\", {\n      className: \"square\",\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, value);\n  }\n\n  function Restart({\n    onClick\n  }) {\n    return React.createElement(\"button\", {\n      className: \"restart\",\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Play again\");\n  }\n\n  function Game() {\n    const [squares, setSquares] = useState(Array(9).fill(null));\n    const [isXNext, setIsXNext] = useState(true);\n    const nextSymbol = isXNext ? \"O\" : \"X\";\n    const winner = calculateWinner(squares);\n\n    function getStatus() {\n      if (winner) {\n        return \"Winner: \" + winner;\n      } else if (isBoardFull(squares)) {\n        return \"Draw!\";\n      } else {\n        return \"Next player: \" + nextSymbol;\n      }\n    }\n\n    function renderSquare(i) {\n      return React.createElement(Square, {\n        value: squares[i],\n        onClick: () => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n\n          const nextSquares = squares.slice();\n          nextSquares[i] = nextSymbol;\n          setSquares(nextSquares);\n          setIsXNext(!isXNext); // toggle turns\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    }\n\n    function renderRestartButton() {\n      return React.createElement(Restart, {\n        onClick: () => {\n          setSquares(Array(9).fill(null));\n          setIsXNext(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, renderSquare(0), renderSquare(1), renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, renderSquare(3), renderSquare(4), renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, renderSquare(6), renderSquare(7), renderSquare(8))), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, getStatus()), React.createElement(\"div\", {\n      className: \"restart-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, renderRestartButton())));\n  }\n\n  ReactDOM.render(React.createElement(Game, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), document.getElementById(\"root\"));\n\n  function calculateWinner(squares) {\n    const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  function isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}","map":{"version":3,"sources":["/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js"],"names":["React","useState","ReactDOM","TicTacToe","Square","value","onClick","Restart","Game","squares","setSquares","Array","fill","isXNext","setIsXNext","nextSymbol","winner","calculateWinner","getStatus","isBoardFull","renderSquare","i","nextSquares","slice","renderRestartButton","render","document","getElementById","possibleLines","length","a","b","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nexport function TicTacToe() {\n\n  function Square({value, onClick}) {\n\n    return (\n        <button className=\"square\" onClick={onClick}>\n          {value}\n        </button>\n    );\n  }\n\n  function Restart({onClick}) {\n\n    return (\n        <button className=\"restart\" onClick={onClick}>\n          Play again\n        </button>\n    );\n  }\n\n  function Game() {\n    const [squares, setSquares] = useState(Array(9).fill(null));\n    const [isXNext, setIsXNext] = useState(true);\n    const nextSymbol = isXNext ? \"O\" : \"X\";\n    const winner = calculateWinner(squares);\n\n    function getStatus() {\n      if (winner) {\n        return \"Winner: \" + winner;\n      } else if (isBoardFull(squares)) {\n        return \"Draw!\";\n      } else {\n        return \"Next player: \" + nextSymbol;\n      }\n    }\n\n    function renderSquare(i) {\n      return (\n          <Square\n              value={squares[i]}\n              onClick={() => {\n                if (squares[i] != null || winner != null) {\n                  return;\n                }\n                const nextSquares = squares.slice();\n                nextSquares[i] = nextSymbol;\n                setSquares(nextSquares);\n\n                setIsXNext(!isXNext); // toggle turns\n              }}\n          />\n      );\n    }\n\n    function renderRestartButton() {\n      return (\n          <Restart\n              onClick={() => {\n                setSquares(Array(9).fill(null));\n                setIsXNext(true);\n              }}\n          />\n      );\n    }\n\n    return (\n        <div className=\"container\">\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n              </div>\n              <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n              </div>\n              <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n              </div>\n            </div>\n            <div className=\"game-info\">{getStatus()}</div>\n            <div className=\"restart-button\">{renderRestartButton()}</div>\n          </div>\n        </div>\n    );\n  }\n\n  ReactDOM.render(<Game/>, document.getElementById(\"root\"));\n\n\n  function calculateWinner(squares) {\n    const possibleLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    // go over all possibly winning lines and check if they consist of only X's/only O's\n    for (let i = 0; i < possibleLines.length; i++) {\n      const [a, b, c] = possibleLines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}