{"ast":null,"code":"var _jsxFileName = \"/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square({\n  value,\n  onClick\n}) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, value);\n}\n\nfunction Restart({\n  onClick\n}) {\n  return React.createElement(\"button\", {\n    className: \"restart\",\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Play again\");\n}\n\nfunction Game() {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const nextSymbol = isXNext ? \"X\" : \"O\";\n  const winner = calculateWinner(squares);\n\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + nextSymbol;\n    }\n  }\n\n  function renderSquare(i) {\n    return React.createElement(Square, {\n      value: squares[i],\n      onClick: () => {\n        if (squares[i] != null || winner != null) {\n          return;\n        }\n\n        const nextSquares = squares.slice();\n        nextSquares[i] = nextSymbol;\n        setSquares(nextSquares);\n        setIsXNext(!isXNext); // toggle turns\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n  }\n\n  function renderRestartButton() {\n    return React.createElement(Restart, {\n      onClick: () => {\n        setSquares(Array(9).fill(null));\n        setIsXNext(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, renderSquare(0), renderSquare(1), renderSquare(2)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, renderSquare(3), renderSquare(4), renderSquare(5)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, renderSquare(6), renderSquare(7), renderSquare(8))), React.createElement(\"div\", {\n    className: \"game-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, getStatus()), React.createElement(\"div\", {\n    className: \"restart-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, renderRestartButton())));\n}\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/TicTacToe.js"],"names":["React","useState","ReactDOM","Square","value","onClick","Restart","Game","squares","setSquares","Array","fill","isXNext","setIsXNext","nextSymbol","winner","calculateWinner","getStatus","isBoardFull","renderSquare","i","nextSquares","slice","renderRestartButton","render","document","getElementById","possibleLines","length","a","b","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square({ value, onClick }) {\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Restart({ onClick }) {\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Play again\n    </button>\n  );\n}\n\nfunction Game() {\n  const [ squares, setSquares ] = useState(Array(9).fill(null));\n  const [ isXNext, setIsXNext ] = useState(true);\n  const nextSymbol = isXNext ? \"X\" : \"O\";\n  const winner = calculateWinner(squares);\n\n  function getStatus() {\n    if (winner) {\n      return \"Winner: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + nextSymbol;\n    }\n  }\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = nextSymbol;\n          setSquares(nextSquares);\n\n          setIsXNext(!isXNext); // toggle turns\n        }}\n      />\n    );\n  }\n\n  function renderRestartButton() {\n    return (\n      <Restart\n        onClick={() => {\n          setSquares(Array(9).fill(null));\n          setIsXNext(true);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n          </div>\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  // go over all possibly winning lines and check if they consist of only X's/only O's\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}