{"ast":null,"code":"var _jsxFileName = \"/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/Cell.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n/**\n * Cell represents the atomic element of a table\n */\n\nexport default class Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n      this.display = this.determineDisplay({\n        x: this.props.x,\n        y: this.props.y\n      }, e.target.value);\n    };\n\n    this.onKeyPressOnInput = e => {\n      if (e.key === 'Enter') {\n        this.hasNewValue(e.target.value);\n      }\n    };\n\n    this.onKeyPressOnSpan = () => {\n      if (!this.state.editing) {\n        this.setState({\n          editing: true\n        });\n      }\n    };\n\n    this.onBlur = e => {\n      this.hasNewValue(e.target.value);\n    };\n\n    this.handleUnselectAll = () => {\n      if (this.state.selected || this.state.editing) {\n        this.setState({\n          selected: false,\n          editing: false\n        });\n      }\n    };\n\n    this.hasNewValue = value => {\n      this.props.onChangedValue({\n        x: this.props.x,\n        y: this.props.y\n      }, value);\n      this.setState({\n        editing: false\n      });\n    };\n\n    this.emitUnselectAllEvent = () => {\n      const unselectAllEvent = new Event('unselectAll');\n      window.document.dispatchEvent(unselectAllEvent);\n    };\n\n    this.clicked = () => {\n      // Prevent click and double click to conflict\n      this.timer = setTimeout(() => {\n        if (!this.prevent) {\n          // Unselect all the other cells and set the current\n          // Cell state to `selected`\n          this.emitUnselectAllEvent();\n          this.setState({\n            selected: true\n          });\n        }\n\n        this.prevent = false;\n      }, this.delay);\n    };\n\n    this.doubleClicked = () => {\n      // Prevent click and double click to conflict\n      clearTimeout(this.timer);\n      this.prevent = true; // Unselect all the other cells and set the current\n      // Cell state to `selected` & `editing`\n\n      this.emitUnselectAllEvent();\n      this.setState({\n        editing: true,\n        selected: true\n      });\n    };\n\n    this.determineDisplay = ({\n      x,\n      y\n    }, value) => {\n      return value;\n    };\n\n    this.calculateCss = () => {\n      const css = {\n        width: '80px',\n        padding: '4px',\n        margin: '0',\n        height: '25px',\n        boxSizing: 'border-box',\n        position: 'relative',\n        display: 'inline-block',\n        color: 'black',\n        border: '1px solid #cacaca',\n        textAlign: 'left',\n        verticalAlign: 'top',\n        fontSize: '14px',\n        lineHeight: '15px',\n        overflow: 'hidden',\n        fontFamily: 'Calibri'\n      };\n\n      if (this.props.x === 0 || this.props.y === 0) {\n        css.textAlign = 'center';\n        css.backgroundColor = '#f0f0f0';\n        css.fontWeight = 'bold';\n      }\n\n      return css;\n    };\n\n    this.state = {\n      editing: false,\n      value: props.value\n    };\n    this.display = this.determineDisplay({\n      x: props.x,\n      y: props.y\n    }, props.value);\n    this.timer = 0;\n    this.delay = 200;\n    this.prevent = false;\n  }\n  /**\n   * Add listener to the `unselectAll` event used to broadcast the\n   * unselect all event\n   */\n\n\n  componentDidMount() {\n    window.document.addEventListener('unselectAll', this.handleUnselectAll);\n  }\n  /**\n   * Before updating, execute the formula on the Cell value to\n   * calculate the `display` value. Especially useful when a\n   * redraw is pushed upon this cell when editing another cell\n   * that this might depend upon\n   */\n\n\n  componentWillUpdate() {\n    this.display = this.determineDisplay({\n      x: this.props.x,\n      y: this.props.y\n    }, this.state.value);\n  }\n  /**\n   * Remove the `unselectAll` event listener added in\n   * `componentDidMount()`\n   */\n\n\n  componentWillUnmount() {\n    window.document.removeEventListener('unselectAll', this.handleUnselectAll);\n  }\n  /**\n   * When a Cell value changes, re-determine the display value\n   * by calling the formula calculation\n   */\n\n\n  render() {\n    const css = this.calculateCss(); // column 0\n\n    if (this.props.x === 0) {\n      return React.createElement(\"span\", {\n        style: css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.props.y);\n    } // row 0\n\n\n    if (this.props.y === 0) {\n      const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('');\n      return React.createElement(\"span\", {\n        onKeyPress: this.onKeyPressOnSpan,\n        style: css,\n        role: \"presentation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, alpha[this.props.x]);\n    }\n\n    if (this.state.selected) {\n      css.outlineColor = 'lightblue';\n      css.outlineStyle = 'dotted';\n    }\n\n    if (this.state.editing) {\n      return React.createElement(\"input\", {\n        style: css,\n        type: \"text\",\n        onBlur: this.onBlur,\n        onKeyPress: this.onKeyPressOnInput,\n        value: this.state.value,\n        onChange: this.onChange,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"span\", {\n      onClick: e => this.clicked(e),\n      onDoubleClick: e => this.doubleClicked(e),\n      style: css,\n      role: \"presentation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, this.display);\n  }\n\n}\nCell.propTypes = {\n  onChangedValue: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  value: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/Cell.js"],"names":["React","Component","PropTypes","Cell","constructor","props","onChange","e","setState","value","target","display","determineDisplay","x","y","onKeyPressOnInput","key","hasNewValue","onKeyPressOnSpan","state","editing","onBlur","handleUnselectAll","selected","onChangedValue","emitUnselectAllEvent","unselectAllEvent","Event","window","document","dispatchEvent","clicked","timer","setTimeout","prevent","delay","doubleClicked","clearTimeout","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","fontFamily","backgroundColor","fontWeight","componentDidMount","addEventListener","componentWillUpdate","componentWillUnmount","removeEventListener","render","alpha","split","outlineColor","outlineStyle","propTypes","func","isRequired","number","string"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from 'prop-types'\n\n/**\n * Cell represents the atomic element of a table\n */\nexport default class Cell extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: false,\n      value: props.value,\n    }\n    this.display = this.determineDisplay(\n      { x: props.x, y: props.y },\n      props.value\n    )\n    this.timer = 0\n    this.delay = 200\n    this.prevent = false\n  }\n\n  /**\n   * Add listener to the `unselectAll` event used to broadcast the\n   * unselect all event\n   */\n  componentDidMount() {\n    window.document.addEventListener('unselectAll',\n      this.handleUnselectAll)\n  }\n\n  /**\n   * Before updating, execute the formula on the Cell value to\n   * calculate the `display` value. Especially useful when a\n   * redraw is pushed upon this cell when editing another cell\n   * that this might depend upon\n   */\n  componentWillUpdate() {\n    this.display = this.determineDisplay(\n      { x: this.props.x, y: this.props.y }, this.state.value)\n  }\n\n  /**\n   * Remove the `unselectAll` event listener added in\n   * `componentDidMount()`\n   */\n  componentWillUnmount() {\n    window.document.removeEventListener('unselectAll',\n      this.handleUnselectAll)\n  }\n\n  /**\n   * When a Cell value changes, re-determine the display value\n   * by calling the formula calculation\n   */\n  onChange = (e) => {\n    this.setState({ value: e.target.value })\n    this.display = this.determineDisplay(\n      { x: this.props.x, y: this.props.y }, e.target.value)\n  }\n\n  /**\n   * Handle pressing a key when the Cell is an input element\n   */\n  onKeyPressOnInput = (e) => {\n    if (e.key === 'Enter') {\n      this.hasNewValue(e.target.value)\n    }\n  }\n\n  /**\n   * Handle pressing a key when the Cell is a span element,\n   * not yet in editing mode\n   */\n  onKeyPressOnSpan = () => {\n    if (!this.state.editing) {\n      this.setState({ editing: true })\n    }\n  }\n\n  /**\n   * Handle moving away from a cell, stores the new value\n   */\n  onBlur = (e) => {\n    this.hasNewValue(e.target.value)\n  }\n\n  /**\n   * Used by `componentDid(Un)Mount`, handles the `unselectAll`\n   * event response\n   */\n  handleUnselectAll = () => {\n    if (this.state.selected || this.state.editing) {\n      this.setState({ selected: false, editing: false })\n    }\n  }\n\n  /**\n   * Called by the `onBlur` or `onKeyPressOnInput` event handlers,\n   * it escalates the value changed event, and restore the editing\n   * state to `false`.\n   */\n  hasNewValue = (value) => {\n    this.props.onChangedValue(\n      {\n        x: this.props.x,\n        y: this.props.y,\n      },\n      value,\n    )\n    this.setState({ editing: false })\n  }\n\n  /**\n   * Emits the `unselectAll` event, used to tell all the other\n   * cells to unselect\n   */\n  emitUnselectAllEvent = () => {\n    const unselectAllEvent = new Event('unselectAll')\n    window.document.dispatchEvent(unselectAllEvent)\n  }\n\n  /**\n   * Handle clicking a Cell.\n   */\n  clicked = () => {\n    // Prevent click and double click to conflict\n    this.timer = setTimeout(() => {\n      if (!this.prevent) {\n        // Unselect all the other cells and set the current\n        // Cell state to `selected`\n        this.emitUnselectAllEvent()\n        this.setState({ selected: true })\n      }\n      this.prevent = false\n    }, this.delay)\n  }\n\n  /**\n   * Handle doubleclicking a Cell.\n   */\n  doubleClicked = () => {\n    // Prevent click and double click to conflict\n    clearTimeout(this.timer)\n    this.prevent = true\n\n    // Unselect all the other cells and set the current\n    // Cell state to `selected` & `editing`\n    this.emitUnselectAllEvent()\n    this.setState({ editing: true, selected: true })\n  }\n\n  determineDisplay = ({ x, y }, value) => {\n    return value\n  }\n\n  /**\n   * Calculates a cell's CSS values\n   */\n  calculateCss = () => {\n    const css = {\n      width: '80px',\n      padding: '4px',\n      margin: '0',\n      height: '25px',\n      boxSizing: 'border-box',\n      position: 'relative',\n      display: 'inline-block',\n      color: 'black',\n      border: '1px solid #cacaca',\n      textAlign: 'left',\n      verticalAlign: 'top',\n      fontSize: '14px',\n      lineHeight: '15px',\n      overflow: 'hidden',\n      fontFamily: 'Calibri',\n    }\n\n    if (this.props.x === 0 || this.props.y === 0) {\n      css.textAlign = 'center'\n      css.backgroundColor = '#f0f0f0'\n      css.fontWeight = 'bold'\n    }\n\n    return css\n  }\n\n  render() {\n    const css = this.calculateCss()\n\n    // column 0\n    if (this.props.x === 0) {\n      return (\n        <span style={css}>\n          {this.props.y}\n        </span>\n      )\n    }\n\n    // row 0\n    if (this.props.y === 0) {\n      const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('')\n      return (\n        <span\n          onKeyPress={this.onKeyPressOnSpan}\n          style={css}\n          role=\"presentation\">\n          {alpha[this.props.x]}\n        </span>\n      )\n    }\n\n    if (this.state.selected) {\n      css.outlineColor = 'lightblue'\n      css.outlineStyle = 'dotted'\n    }\n\n    if (this.state.editing) {\n      return (\n        <input\n          style={css}\n          type=\"text\"\n          onBlur={this.onBlur}\n          onKeyPress={this.onKeyPressOnInput}\n          value={this.state.value}\n          onChange={this.onChange}\n          autoFocus\n        />\n      )\n    }\n    return (\n      <span\n        onClick={e => this.clicked(e)}\n        onDoubleClick={e => this.doubleClicked(e)}\n        style={css}\n        role=\"presentation\"\n      >\n        {this.display}\n      </span>\n    )\n  }\n}\n\nCell.propTypes = {\n  onChangedValue: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  value: PropTypes.string.isRequired,\n}"]},"metadata":{},"sourceType":"module"}