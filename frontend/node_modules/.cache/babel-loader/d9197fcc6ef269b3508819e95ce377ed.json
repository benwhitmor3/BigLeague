{"ast":null,"code":"var _jsxFileName = \"/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/Row.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\n\nconst Row = props => {\n  const cells = [];\n  const y = props.y;\n\n  for (let x = 0; x < props.x; x += 1) {\n    cells.push(React.createElement(Cell, {\n      key: `${x}-${y}`,\n      y: y,\n      x: x,\n      onChangedValue: props.handleChangedCell,\n      updateCells: props.updateCells,\n      value: props.rowData[x] || '',\n      executeFormula: props.executeFormula,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, cells);\n};\n\nRow.propTypes = {\n  handleChangedCell: PropTypes.func.isRequired,\n  updateCells: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  rowData: PropTypes.shape({\n    string: PropTypes.string\n  }).isRequired,\n  executeFormula: PropTypes.func.isRequired\n};\nexport default Row;","map":{"version":3,"sources":["/Users/buw0017/projects/TheBigLeagueGame/frontend/src/components/Row.js"],"names":["React","Component","PropTypes","Cell","Row","props","cells","y","x","push","handleChangedCell","updateCells","rowData","executeFormula","propTypes","func","isRequired","number","shape","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrB,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,CAAC,GAAGF,KAAK,CAACE,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACG,CAA1B,EAA6BA,CAAC,IAAI,CAAlC,EAAqC;AACnCF,IAAAA,KAAK,CAACG,IAAN,CACE,oBAAC,IAAD;AACE,MAAA,GAAG,EAAG,GAAED,CAAE,IAAGD,CAAE,EADjB;AAEE,MAAA,CAAC,EAAEA,CAFL;AAGE,MAAA,CAAC,EAAEC,CAHL;AAIE,MAAA,cAAc,EAAEH,KAAK,CAACK,iBAJxB;AAKE,MAAA,WAAW,EAAEL,KAAK,CAACM,WALrB;AAME,MAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcJ,CAAd,KAAoB,EAN7B;AAOE,MAAA,cAAc,EAAEH,KAAK,CAACQ,cAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,KADH,CADF;AAKD,CArBD;;AAuBAF,GAAG,CAACU,SAAJ,GAAgB;AACdJ,EAAAA,iBAAiB,EAAER,SAAS,CAACa,IAAV,CAAeC,UADpB;AAEdL,EAAAA,WAAW,EAAET,SAAS,CAACa,IAAV,CAAeC,UAFd;AAGdR,EAAAA,CAAC,EAAEN,SAAS,CAACe,MAAV,CAAiBD,UAHN;AAIdT,EAAAA,CAAC,EAAEL,SAAS,CAACe,MAAV,CAAiBD,UAJN;AAKdJ,EAAAA,OAAO,EAAEV,SAAS,CAACgB,KAAV,CAAgB;AACvBC,IAAAA,MAAM,EAAEjB,SAAS,CAACiB;AADK,GAAhB,EAENH,UAPW;AAQdH,EAAAA,cAAc,EAAEX,SAAS,CAACa,IAAV,CAAeC;AARjB,CAAhB;AAWA,eAAeZ,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from 'prop-types'\nimport Cell from './Cell'\n\nconst Row = (props) => {\n  const cells = []\n  const y = props.y\n  for (let x = 0; x < props.x; x += 1) {\n    cells.push(\n      <Cell\n        key={`${x}-${y}`}\n        y={y}\n        x={x}\n        onChangedValue={props.handleChangedCell}\n        updateCells={props.updateCells}\n        value={props.rowData[x] || ''}\n        executeFormula={props.executeFormula}\n      />,\n    )\n  }\n  return (\n    <div>\n      {cells}\n    </div>\n  )\n}\n\nRow.propTypes = {\n  handleChangedCell: PropTypes.func.isRequired,\n  updateCells: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  rowData: PropTypes.shape({\n    string: PropTypes.string,\n  }).isRequired,\n  executeFormula: PropTypes.func.isRequired\n}\n\nexport default Row"]},"metadata":{},"sourceType":"module"}